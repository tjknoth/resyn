-- Simple model of list memory semantics:
--   Constructing an element of a list requires enough heap space 
--   for the polymorphic type and a pointer to the next one.
--   We assume Nil requires no memory
data List a where
  Nil :: List a
  Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  
  
measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs  

-- append xs ys requires memory proportional to the length of xs
append :: xs: List {1**a| |1} -> ys: List {1**a} -> {List 1**a | len _v == len xs + len ys && elems _v == elems xs + elems ys}
append = \xs. \ys.
  match xs with
    Nil -> ys
    Cons z zs -> Cons z (tick 1 (append zs ys))

-- append xs ys requires memory proportional to the length of xs
append2 :: xs: List {0**a| |0} -> ys: List {0**a| |2} -> zs: List {0**a| |1} -> {List 0**a | len _v == len xs + len ys + len zs && elems _v == elems xs + elems ys + elems zs}
append2 = \xs. \ys. \zs. 
  append (append ys zs) xs