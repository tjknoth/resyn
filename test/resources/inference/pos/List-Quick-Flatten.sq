data List a <q :: Int> where
	Nil :: List a <q>
	Cons :: x: a -> xs: List {a | | q} <q> -> List a <q>

data Tree a <q :: Int> where
        Leaf :: Tree a <q>
        Node :: x:a -> l: Tree {a | | q} <q> -> r: Tree {a | | q} <q> -> Tree a <q>

flatten' :: Tree {a | | 2} <{0}> -> List a <{0}> -[1]-> List a <{0}>
flatten' = \t. \acc.
  match t with
    Leaf -> acc
    Node x l r -> flatten' l (Cons x (flatten' r acc))

flatten :: {Tree {a | | 2} <{0}>| | 1} -[1]-> List a <{0}>
flatten = \t. 
  flatten' t Nil

