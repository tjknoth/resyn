-- This example is extracted out of the 99 Problems in OCaml - Lists RAML example.

data List a <q :: Int> where
  Nil :: List a <q>
  Cons :: x: a -> xs: List {a | | q} <q> -> List a <q>

data Node a <q :: Int> where
  One :: a -> Node a <q>
  Many :: List (Node a <q>) <q> -> Node a <q>

example :: List (Node {Int | | -1} <{0}>) <{0}>
example = Cons (One 1) (Cons (Many (Cons (One 2) (Cons (Many (Cons (One 3) (Cons (One 4) Nil))) (Cons (One 5) Nil)))) Nil)

-- RAML bound: 1*M, where M is the number of ::-nodes in the argument
-- Resource checking succeeds, but inference can't find a solution.
-- Resource inference succeeds w/o defn of example above
compress :: List {Int | | 1} <{0}> -> List Int <{0}>
compress = \l.
  match l with
    Nil -> Nil
    Cons x xs ->
      match xs with
        Nil -> Cons x Nil
        Cons y ys ->
          if x == y
            then tick 1 (compress xs)
            else tick 1 (Cons x (compress xs))
