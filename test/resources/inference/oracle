Goal
    { gName = "size"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Empty"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "BST" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "BST" [ VarS "a" ] ) "Empty" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "contains"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "t"
                                        ( ScalarT
                                            ( DatatypeT "BST"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT BoolT
                                            ( Binary Eq ( Var BoolS "_v" )
                                                ( Binary Member
                                                    ( Var ( VarS "a" ) "x" )
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "BST" [ VarS "a" ] ) "t"
                                                        ]
                                                    )
                                                )
                                            ) ( Var IntS "I3" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "Node"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "l"
                                        ( ScalarT
                                            ( DatatypeT "BST"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                                    ( Binary Lt
                                                        ( Var ( VarS "a" ) "_v" )
                                                        ( Var ( VarS "a" ) "x" )
                                                    ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "r"
                                            ( ScalarT
                                                ( DatatypeT "BST"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                                        ( Binary Lt
                                                            ( Var ( VarS "a" ) "x" )
                                                            ( Var ( VarS "a" ) "_v" )
                                                        ) ( IntLit 0 )
                                                    ] []
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "BST"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "BST" [ VarS "a" ] ) "Node"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "BST" [ VarS "a" ] ) "l"
                                                        , Var
                                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Empty"
            , "Emptyset"
            , "Insert"
            , "Node"
            , "Singleton"
            , "contains"
            , "elems"
            , "size"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "BST"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Empty"
                        , "Node"
                        ]
                    , _wfMetric = Just "size"
                    , _resourcePreds = []
                    }
                )
            ,
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "BST" [ VarS "a" ]
                    ]
                )
            ,
                ( "size"
                ,
                    [ IntS
                    , DataS "BST" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "BST" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Empty" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Node"
                            [ "x"
                            , "l"
                            , "r"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( Binary Union
                                        ( SetLit ( VarS "a" )
                                            [ Var ( VarS "a" ) "x" ]
                                        )
                                        ( Pred
                                            ( SetS ( VarS "a" ) ) "elems"
                                            [ Var
                                                ( DataS "BST" [ VarS "a" ] ) "l"
                                            ]
                                        )
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "size"
                , MeasureDef
                    { _inSort = DataS "BST" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Empty" []
                            ( Binary Eq
                                ( Pred IntS "size"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Node"
                            [ "x"
                            , "l"
                            , "r"
                            ]
                            ( Binary Eq
                                ( Pred IntS "size"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus
                                    ( Binary Plus ( IntLit 1 )
                                        ( Pred IntS "size"
                                            [ Var
                                                ( DataS "BST" [ VarS "a" ] ) "l"
                                            ]
                                        )
                                    )
                                    ( Pred IntS "size"
                                        [ Var
                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Empty"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "BST"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Node"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "l"
                            ( ScalarT
                                ( DatatypeT "BST"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                        ( Binary Lt ( Var AnyS "_v" ) ( Var AnyS "x" ) ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "r"
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                            ( Binary Lt ( Var AnyS "x" ) ( Var AnyS "_v" ) ) ( IntLit 0 )
                                        ] []
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "contains"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "t"
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT BoolT
                                    ( Binary Eq ( Var BoolS "_v" )
                                        ( Binary Member
                                            ( Var ( VarS "a" ) "x" )
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "BST" [ VarS "a" ] ) "t"
                                                ]
                                            )
                                        )
                                    ) ( Var IntS "I3" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "BST"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "size"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "BST"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "BST"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                )
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "arg0"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "arg0"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Empty"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "0"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Node"
                        , argNames =
                            [ "_"
                            , "l"
                            , "r"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "+"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "+"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "1"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "size"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "l"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "size"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "r"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/BST-Contains.sq"
        ( line 10
        , column 1
        )
    , gInferredPotlVars = []
    , gInferSolve = False
    , gSynthesize = False
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m arg0 [37m==[0m [37m([0mEmpty[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0mEmpty[37m)[0m [37m==[0m [36m0[0m [37m&&[0m elems [37m([0mEmpty[37m)[0m [37m==[0m [37m[[0m[37m][0m[37m)[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x3 [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mNode _ l r[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0m_[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m _[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m _[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m_ [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m_ [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m _ [37m<==>[0m _ [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m_ [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m _[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mNode _ l r[37m)[0m [37m&&[0m [1m_v[0m [37m<[0m _[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m _[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m _ [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0m_[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x3 [37m+[0m x4 [37m&&[0m x3 [37m==[0m [36m1[0m [37m+[0m x8[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mNode _ l r[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m x8 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0m_[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m _[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m _[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m_ [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m_ [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m _ [37m<==>[0m _ [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m_ [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m _[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mNode _ l r[37m)[0m [37m&&[0m _ [37m<[0m [1m_v[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m _[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m _ [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0m_[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x3 [37m+[0m x4 [37m&&[0m x3 [37m==[0m [36m1[0m [37m+[0m x8[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mNode _ l r[37m)[0m[37m)[0m [37m&&[0m x4 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m x8 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m _[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m _ [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode _ l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0m_[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
Goal
    { gName = "elems"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Empty"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "BST" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "BST" [ VarS "a" ] ) "Empty" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "size"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "BST"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "contains"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "t"
                                        ( ScalarT
                                            ( DatatypeT "BST"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT BoolT
                                            ( Binary Eq ( Var BoolS "_v" )
                                                ( Binary Member
                                                    ( Var ( VarS "a" ) "x" )
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "BST" [ VarS "a" ] ) "t"
                                                        ]
                                                    )
                                                )
                                            ) ( Var IntS "I3" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "Node"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "l"
                                        ( ScalarT
                                            ( DatatypeT "BST"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                                    ( Binary Lt
                                                        ( Var ( VarS "a" ) "_v" )
                                                        ( Var ( VarS "a" ) "x" )
                                                    ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "r"
                                            ( ScalarT
                                                ( DatatypeT "BST"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                                        ( Binary Lt
                                                            ( Var ( VarS "a" ) "x" )
                                                            ( Var ( VarS "a" ) "_v" )
                                                        ) ( IntLit 0 )
                                                    ] []
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "BST"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "BST" [ VarS "a" ] ) "Node"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "BST" [ VarS "a" ] ) "l"
                                                        , Var
                                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Empty"
            , "Emptyset"
            , "Insert"
            , "Node"
            , "Singleton"
            , "contains"
            , "elems"
            , "size"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "BST"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Empty"
                        , "Node"
                        ]
                    , _wfMetric = Just "size"
                    , _resourcePreds = []
                    }
                )
            ,
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "BST" [ VarS "a" ]
                    ]
                )
            ,
                ( "size"
                ,
                    [ IntS
                    , DataS "BST" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "BST" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Empty" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Node"
                            [ "x"
                            , "l"
                            , "r"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( Binary Union
                                        ( SetLit ( VarS "a" )
                                            [ Var ( VarS "a" ) "x" ]
                                        )
                                        ( Pred
                                            ( SetS ( VarS "a" ) ) "elems"
                                            [ Var
                                                ( DataS "BST" [ VarS "a" ] ) "l"
                                            ]
                                        )
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "size"
                , MeasureDef
                    { _inSort = DataS "BST" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Empty" []
                            ( Binary Eq
                                ( Pred IntS "size"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Node"
                            [ "x"
                            , "l"
                            , "r"
                            ]
                            ( Binary Eq
                                ( Pred IntS "size"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus
                                    ( Binary Plus ( IntLit 1 )
                                        ( Pred IntS "size"
                                            [ Var
                                                ( DataS "BST" [ VarS "a" ] ) "l"
                                            ]
                                        )
                                    )
                                    ( Pred IntS "size"
                                        [ Var
                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Empty"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "BST"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Node"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "l"
                            ( ScalarT
                                ( DatatypeT "BST"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                        ( Binary Lt ( Var AnyS "_v" ) ( Var AnyS "x" ) ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "r"
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                            ( Binary Lt ( Var AnyS "x" ) ( Var AnyS "_v" ) ) ( IntLit 0 )
                                        ] []
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "contains"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "t"
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT BoolT
                                    ( Binary Eq ( Var BoolS "_v" )
                                        ( Binary Member
                                            ( Var ( VarS "a" ) "x" )
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "BST" [ VarS "a" ] ) "t"
                                                ]
                                            )
                                        )
                                    ) ( Var IntS "I3" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "BST"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "size"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "BST"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "BST"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                )
                ( ScalarT
                    ( DatatypeT "DSet"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "arg0"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "arg0"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Empty"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Emptyset"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Node"
                        , argNames =
                            [ "x"
                            , "l"
                            , "r"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "+"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "+"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Singleton"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "elems"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "l"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "elems"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "r"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/BST-Contains.sq"
        ( line 15
        , column 1
        )
    , gInferredPotlVars = []
    , gInferSolve = False
    , gSynthesize = False
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m x [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m x [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m x [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m x [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mNode x l r[37m)[0m [37m&&[0m [1m_v[0m [37m<[0m x[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m x [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m x [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mNode x l r[37m)[0m [37m&&[0m x [37m<[0m [1m_v[0m[37m)[0m [37m&&[0m size arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m x [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode x l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0mx[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "contains"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Empty"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "BST" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "BST" [ VarS "a" ] ) "Empty" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "Node"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "l"
                                        ( ScalarT
                                            ( DatatypeT "BST"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                                    ( Binary Lt
                                                        ( Var ( VarS "a" ) "_v" )
                                                        ( Var ( VarS "a" ) "x" )
                                                    ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "r"
                                            ( ScalarT
                                                ( DatatypeT "BST"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                                        ( Binary Lt
                                                            ( Var ( VarS "a" ) "x" )
                                                            ( Var ( VarS "a" ) "_v" )
                                                        ) ( IntLit 0 )
                                                    ] []
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "BST"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "BST" [ VarS "a" ] ) "Node"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "BST" [ VarS "a" ] ) "l"
                                                        , Var
                                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Empty"
            , "Emptyset"
            , "Insert"
            , "Node"
            , "Singleton"
            , "contains"
            , "elems"
            , "size"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "BST"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Empty"
                        , "Node"
                        ]
                    , _wfMetric = Just "size"
                    , _resourcePreds = []
                    }
                )
            ,
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "BST" [ VarS "a" ]
                    ]
                )
            ,
                ( "size"
                ,
                    [ IntS
                    , DataS "BST" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "BST" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Empty" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Node"
                            [ "x"
                            , "l"
                            , "r"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( Binary Union
                                        ( SetLit ( VarS "a" )
                                            [ Var ( VarS "a" ) "x" ]
                                        )
                                        ( Pred
                                            ( SetS ( VarS "a" ) ) "elems"
                                            [ Var
                                                ( DataS "BST" [ VarS "a" ] ) "l"
                                            ]
                                        )
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "size"
                , MeasureDef
                    { _inSort = DataS "BST" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Empty" []
                            ( Binary Eq
                                ( Pred IntS "size"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Node"
                            [ "x"
                            , "l"
                            , "r"
                            ]
                            ( Binary Eq
                                ( Pred IntS "size"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus
                                    ( Binary Plus ( IntLit 1 )
                                        ( Pred IntS "size"
                                            [ Var
                                                ( DataS "BST" [ VarS "a" ] ) "l"
                                            ]
                                        )
                                    )
                                    ( Pred IntS "size"
                                        [ Var
                                            ( DataS "BST" [ VarS "a" ] ) "r"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Empty"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "BST"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Node"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "l"
                            ( ScalarT
                                ( DatatypeT "BST"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                        ( Binary Lt ( Var AnyS "_v" ) ( Var AnyS "x" ) ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "r"
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) )
                                            ( Binary Lt ( Var AnyS "x" ) ( Var AnyS "_v" ) ) ( IntLit 0 )
                                        ] []
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "contains"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "t"
                                ( ScalarT
                                    ( DatatypeT "BST"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT BoolT
                                    ( Binary Eq ( Var BoolS "_v" )
                                        ( Binary Member
                                            ( Var ( VarS "a" ) "x" )
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "BST" [ VarS "a" ] ) "t"
                                                ]
                                            )
                                        )
                                    ) ( Var IntS "I3" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "BST"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "size"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "BST"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "t"
                    ( ScalarT
                        ( DatatypeT "BST"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT BoolT
                        ( Binary Eq ( Var BoolS "_v" )
                            ( Binary Member
                                ( Var ( VarS "a" ) "x" )
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "BST" [ VarS "a" ] ) "t"
                                    ]
                                )
                            )
                        ) ( Var IntS "I3" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "t"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "t"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Empty"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "False"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Node"
                                , argNames =
                                    [ "y"
                                    , "l"
                                    , "r"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "<"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "contains"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "l"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PIf
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "<"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "y"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "contains"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "x"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "r"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "True"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/BST-Contains.sq"
        ( line 22
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "BST" [ VarS "a" ] ) "t"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m![0m[1m_v[0m [37m&&[0m t [37m==[0m [37m([0mEmpty[37m)[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0mEmpty[37m)[0m [37m==[0m [36m0[0m [37m&&[0m elems [37m([0mEmpty[37m)[0m [37m==[0m [37m[[0m[37m][0m[37m)[0m [37m==>[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m y[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0my [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m y[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0my [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mx [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx35 [37min[0m elems x36[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size x36 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems x36[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size x36 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m<[0m y[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems l[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m y[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0my [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m x[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m<[0m y[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0my [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m x [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m<[0m y [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m y [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m x[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m [1m_v[0m [37m<[0m y[37m)[0m SAT
SMT CHECK [37m![0m[37m([0my [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mx [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx43 [37min[0m elems x44[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size x44 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems x44[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size x44 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m y [37m<[0m [1m_v[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems r[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m&&[0m False [37m==[0m [37m([0mx [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode y l r[37m)[0m[37m)[0m [37m&&[0m size l [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size r [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m size t [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems l [37m==>[0m _x [37m<[0m y[37m)[0m[37m)[0m [37m&&[0m [37m([0m[1m[94mforall[0;1m[0m _x [37m.[0m _x [37min[0m elems r [37m==>[0m y [37m<[0m _x[37m)[0m[37m)[0m [37m&&[0m [37m([0msize [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[36m1[0m [37m+[0m size l[37m)[0m [37m+[0m size r [37m&&[0m elems [37m([0m[37m([0mNode y l r[37m)[0m[37m)[0m [37m==[0m [37m([0m[37m[[0my[37m][0m [37m+[0m elems l[37m)[0m [37m+[0m elems r[37m)[0m [37m==>[0m [1m_v[0m [37m==[0m [37m([0mx [37min[0m elems t[37m)[0m[37m)[0m UNSAT
contains :: <a> . x:{1**a||I0} -> t:{BST {1**a||I1}||I2} -> {Bool|_v == (x in elems t)|I3}
contains = \x . \t . 
    match t with
      Empty -> False
      Node y l r -> 
        if x < y
          then tick 1 (contains x l)
          else 
            if y < x
              then tick 1 (contains x r)
              else True

size :: arg0:{BST {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{BST {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
contains :: <a> . x:{1**a||0} -> t:{BST {1**a||1}||0} -> {Bool|_v == (x in elems t)|0} (inferred)
Goal
    { gName = "len"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "append"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] []
                                            )
                                            ( Binary And
                                                ( Binary Eq
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                                ( Binary Eq
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                            ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "append2"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I7" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I9" )
                                        )
                                        ( FunctionT "zs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I11" )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                                    ] []
                                                )
                                                ( Binary And
                                                    ( Binary Eq
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                                            ]
                                                        )
                                                        ( Binary Plus
                                                            ( Binary Plus
                                                                ( Pred IntS "len"
                                                                    [ Var
                                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                                    ]
                                                                )
                                                                ( Pred IntS "len"
                                                                    [ Var
                                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                                    ]
                                                                )
                                                            )
                                                            ( Pred IntS "len"
                                                                [ Var
                                                                    ( DataS "List" [ VarS "a" ] ) "zs"
                                                                ]
                                                            )
                                                        )
                                                    )
                                                    ( Binary Eq
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                                            ]
                                                        )
                                                        ( Binary Union
                                                            ( Binary Union
                                                                ( Pred
                                                                    ( SetS ( VarS "a" ) ) "elems"
                                                                    [ Var
                                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                                    ]
                                                                )
                                                                ( Pred
                                                                    ( SetS ( VarS "a" ) ) "elems"
                                                                    [ Var
                                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                                    ]
                                                                )
                                                            )
                                                            ( Pred
                                                                ( SetS ( VarS "a" ) ) "elems"
                                                                [ Var
                                                                    ( DataS "List" [ VarS "a" ] ) "zs"
                                                                ]
                                                            )
                                                        )
                                                    )
                                                ) ( Var IntS "I13" )
                                            ) 0
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "append"
            , "append2"
            , "elems"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ,
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( SetLit ( VarS "a" )
                                        [ Var ( VarS "a" ) "x" ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] []
                                    )
                                    ( Binary And
                                        ( Binary Eq
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Plus
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                        ( Binary Eq
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Union
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                    ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "append2"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                )
                                ( FunctionT "zs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I11" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                            ] []
                                        )
                                        ( Binary And
                                            ( Binary Eq
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    ]
                                                )
                                                ( Binary Plus
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "zs"
                                                        ]
                                                    )
                                                )
                                            )
                                            ( Binary Eq
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    ]
                                                )
                                                ( Binary Union
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "zs"
                                                        ]
                                                    )
                                                )
                                            )
                                        ) ( Var IntS "I13" )
                                    ) 0
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                )
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "arg0"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "arg0"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "0"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "+"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "1"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "len"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "xs"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Append2.sq"
        ( line 9
        , column 1
        )
    , gInferredPotlVars = []
    , gInferSolve = False
    , gSynthesize = False
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m arg0 [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0mNil[37m)[0m [37m==[0m [36m0[0m [37m&&[0m elems [37m([0mNil[37m)[0m [37m==[0m [37m[[0m[37m][0m[37m)[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x3 [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m x4 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
Goal
    { gName = "elems"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "len"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "append"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] []
                                            )
                                            ( Binary And
                                                ( Binary Eq
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                                ( Binary Eq
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                            ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "append2"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I7" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I9" )
                                        )
                                        ( FunctionT "zs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I11" )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                                    ] []
                                                )
                                                ( Binary And
                                                    ( Binary Eq
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                                            ]
                                                        )
                                                        ( Binary Plus
                                                            ( Binary Plus
                                                                ( Pred IntS "len"
                                                                    [ Var
                                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                                    ]
                                                                )
                                                                ( Pred IntS "len"
                                                                    [ Var
                                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                                    ]
                                                                )
                                                            )
                                                            ( Pred IntS "len"
                                                                [ Var
                                                                    ( DataS "List" [ VarS "a" ] ) "zs"
                                                                ]
                                                            )
                                                        )
                                                    )
                                                    ( Binary Eq
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                                            ]
                                                        )
                                                        ( Binary Union
                                                            ( Binary Union
                                                                ( Pred
                                                                    ( SetS ( VarS "a" ) ) "elems"
                                                                    [ Var
                                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                                    ]
                                                                )
                                                                ( Pred
                                                                    ( SetS ( VarS "a" ) ) "elems"
                                                                    [ Var
                                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                                    ]
                                                                )
                                                            )
                                                            ( Pred
                                                                ( SetS ( VarS "a" ) ) "elems"
                                                                [ Var
                                                                    ( DataS "List" [ VarS "a" ] ) "zs"
                                                                ]
                                                            )
                                                        )
                                                    )
                                                ) ( Var IntS "I13" )
                                            ) 0
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "append"
            , "append2"
            , "elems"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ,
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( SetLit ( VarS "a" )
                                        [ Var ( VarS "a" ) "x" ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] []
                                    )
                                    ( Binary And
                                        ( Binary Eq
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Plus
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                        ( Binary Eq
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Union
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                    ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "append2"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                )
                                ( FunctionT "zs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I11" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                            ] []
                                        )
                                        ( Binary And
                                            ( Binary Eq
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    ]
                                                )
                                                ( Binary Plus
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "zs"
                                                        ]
                                                    )
                                                )
                                            )
                                            ( Binary Eq
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    ]
                                                )
                                                ( Binary Union
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "zs"
                                                        ]
                                                    )
                                                )
                                            )
                                        ) ( Var IntS "I13" )
                                    ) 0
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                )
                ( ScalarT
                    ( DatatypeT "DSet"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "arg0"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "arg0"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Emptyset"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "+"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Singleton"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "elems"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "xs"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Append2.sq"
        ( line 13
        , column 1
        )
    , gInferredPotlVars = []
    , gInferSolve = False
    , gSynthesize = False
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "append"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList []
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "append"
            , "append2"
            , "elems"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ,
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( SetLit ( VarS "a" )
                                        [ Var ( VarS "a" ) "x" ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] []
                                    )
                                    ( Binary And
                                        ( Binary Eq
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Plus
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                        ( Binary Eq
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Union
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                    ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "append2"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                )
                                ( FunctionT "zs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I11" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                            ] []
                                        )
                                        ( Binary And
                                            ( Binary Eq
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    ]
                                                )
                                                ( Binary Plus
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "zs"
                                                        ]
                                                    )
                                                )
                                            )
                                            ( Binary Eq
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    ]
                                                )
                                                ( Binary Union
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "zs"
                                                        ]
                                                    )
                                                )
                                            )
                                        ) ( Var IntS "I13" )
                                    ) 0
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( FunctionT "ys"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I3" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            ] []
                        )
                        ( Binary And
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "ys"
                                        ]
                                    )
                                )
                            )
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "ys"
                                        ]
                                    )
                                )
                            )
                        ) ( Var IntS "I5" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "ys"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "ys"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "z"
                                    , "zs"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "z"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "append"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "zs"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Append2.sq"
        ( line 19
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m ys [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0mNil[37m)[0m [37m==[0m [36m0[0m [37m&&[0m elems [37m([0mNil[37m)[0m [37m==[0m [37m[[0m[37m][0m[37m)[0m [37m==>[0m len [1m_v[0m [37m==[0m len xs [37m+[0m len ys [37m&&[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m len [1m_v[0m [37m==[0m len xs [37m+[0m len ys[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x19 x20[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len x20 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [1m_v[0m [37m==[0m len xs [37m+[0m len ys [37m&&[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m[37m)[0m [37m&&[0m [37m([0m[37m([0m[37m([0mlen [37m([0m[37m([0mCons x19 x20[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len x20 [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m&&[0m elems [37m([0m[37m([0mCons x19 x20[37m)[0m[37m)[0m [37m==[0m [37m[[0mx19[37m][0m [37m+[0m elems x20[37m)[0m [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m z [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons z x20[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len x20 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [1m_v[0m [37m==[0m len xs [37m+[0m len ys [37m&&[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m[37m)[0m [37m&&[0m [37m([0m[37m([0m[37m([0mlen [37m([0m[37m([0mCons z x20[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len x20 [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m&&[0m elems [37m([0m[37m([0mCons z x20[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems x20[37m)[0m [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mxs [37m==[0m [37m([0mCons z zs[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mxs [37m==[0m [37m([0mCons z zs[37m)[0m [37m&&[0m len [1m_v[0m [37m==[0m [36m1[0m [37m+[0m len x20[37m)[0m [37m&&[0m len x20 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen x20 [37m==[0m len zs [37m+[0m len ys [37m&&[0m elems x20 [37m==[0m elems zs [37m+[0m elems ys[37m)[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m len [1m_v[0m [37m==[0m len xs [37m+[0m len ys[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mxs [37m==[0m [37m([0mCons z zs[37m)[0m [37m&&[0m elems [1m_v[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems x20[37m)[0m [37m&&[0m len x20 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen x20 [37m==[0m len zs [37m+[0m len ys [37m&&[0m elems x20 [37m==[0m elems zs [37m+[0m elems ys[37m)[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m UNSAT
Goal
    { gName = "append2"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "append"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] []
                                            )
                                            ( Binary And
                                                ( Binary Eq
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                                ( Binary Eq
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                            ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList []
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "append"
            , "append2"
            , "elems"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ,
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( SetLit ( VarS "a" )
                                        [ Var ( VarS "a" ) "x" ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] []
                                    )
                                    ( Binary And
                                        ( Binary Eq
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Plus
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                        ( Binary Eq
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Union
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                    ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "append2"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                )
                                ( FunctionT "zs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I11" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                            ] []
                                        )
                                        ( Binary And
                                            ( Binary Eq
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    ]
                                                )
                                                ( Binary Plus
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "zs"
                                                        ]
                                                    )
                                                )
                                            )
                                            ( Binary Eq
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    ]
                                                )
                                                ( Binary Union
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "zs"
                                                        ]
                                                    )
                                                )
                                            )
                                        ) ( Var IntS "I13" )
                                    ) 0
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I7" )
                )
                ( FunctionT "ys"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I9" )
                    )
                    ( FunctionT "zs"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                ] []
                            ) ( BoolLit True ) ( Var IntS "I11" )
                        )
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                ] []
                            )
                            ( Binary And
                                ( Binary Eq
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        ]
                                    )
                                    ( Binary Plus
                                        ( Binary Plus
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "xs"
                                                ]
                                            )
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "ys"
                                                ]
                                            )
                                        )
                                        ( Pred IntS "len"
                                            [ Var
                                                ( DataS "List" [ VarS "a" ] ) "zs"
                                            ]
                                        )
                                    )
                                )
                                ( Binary Eq
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        ]
                                    )
                                    ( Binary Union
                                        ( Binary Union
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "xs"
                                                ]
                                            )
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "ys"
                                                ]
                                            )
                                        )
                                        ( Pred
                                            ( SetS ( VarS "a" ) ) "elems"
                                            [ Var
                                                ( DataS "List" [ VarS "a" ] ) "zs"
                                            ]
                                        )
                                    )
                                )
                            ) ( Var IntS "I13" )
                        ) 0
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "ys"
                    ( Program
                        { content = PFun "zs"
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "append"
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "append"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "ys"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "zs"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PSymbol "xs"
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Append2.sq"
        ( line 26
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I6"
            , []
            )
        ,
            ( "I7"
            , []
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I11"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "zs"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I13"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "zs"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m len [1m_v[0m [37m==[0m [37m([0mlen xs [37m+[0m len ys[37m)[0m [37m+[0m len zs[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m elems [1m_v[0m [37m==[0m [37m([0melems xs [37m+[0m elems ys[37m)[0m [37m+[0m elems zs[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mlen x27 [37m>=[0m [36m0[0m [37m&&[0m len x28 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [1m_v[0m [37m==[0m [37m([0mlen xs [37m+[0m len ys[37m)[0m [37m+[0m len zs [37m&&[0m elems [1m_v[0m [37m==[0m [37m([0melems xs [37m+[0m elems ys[37m)[0m [37m+[0m elems zs[37m)[0m[37m)[0m [37m&&[0m [37m([0mlen [1m_v[0m [37m==[0m len x27 [37m+[0m len x28 [37m&&[0m elems [1m_v[0m [37m==[0m elems x27 [37m+[0m elems x28[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mlen x27 [37m>=[0m [36m0[0m [37m&&[0m len x28 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [1m_v[0m [37m==[0m [37m([0mlen xs [37m+[0m len ys[37m)[0m [37m+[0m len zs [37m&&[0m elems [1m_v[0m [37m==[0m [37m([0melems xs [37m+[0m elems ys[37m)[0m [37m+[0m elems zs[37m)[0m[37m)[0m [37m&&[0m [37m([0mlen [1m_v[0m [37m==[0m len x27 [37m+[0m len x28 [37m&&[0m elems [1m_v[0m [37m==[0m elems x27 [37m+[0m elems x28[37m)[0m[37m)[0m [37m&&[0m [37m([0mlen x27 [37m==[0m len ys [37m+[0m len zs [37m&&[0m elems x27 [37m==[0m elems ys [37m+[0m elems zs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mlen [1m_v[0m [37m==[0m len x27 [37m+[0m len xs [37m&&[0m len x27 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen x27 [37m==[0m len ys [37m+[0m len zs [37m&&[0m elems x27 [37m==[0m elems ys [37m+[0m elems zs[37m)[0m [37m==>[0m len [1m_v[0m [37m==[0m [37m([0mlen xs [37m+[0m len ys[37m)[0m [37m+[0m len zs[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0melems [1m_v[0m [37m==[0m elems x27 [37m+[0m elems xs [37m&&[0m len x27 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen x27 [37m==[0m len ys [37m+[0m len zs [37m&&[0m elems x27 [37m==[0m elems ys [37m+[0m elems zs[37m)[0m [37m==>[0m elems [1m_v[0m [37m==[0m [37m([0melems xs [37m+[0m elems ys[37m)[0m [37m+[0m elems zs[37m)[0m UNSAT
append :: <a> . xs:{List {1**a||I0}||I1} -> ys:{List {1**a||I2}||I3} -> {List {1**a||I4}|len _v == len xs + len ys && elems _v == elems xs + elems ys|I5}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

append2 :: <a> . xs:{List {1**a||I6}||I7} -> ys:{List {1**a||I8}||I9} -> zs:{List {1**a||I10}||I11} -> {List {1**a||I12}|len _v == (len xs + len ys) + len zs && elems _v == (elems xs + elems ys) + elems zs|I13}
append2 = \xs . \ys . \zs .
      append (append ys zs) xs

len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{List {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
append :: <a> . xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0} (inferred)
append2 :: <a> . xs:{List {1**a||0}||0} -> ys:{List {1**a||2}||0} -> zs:{List {1**a||1}||0} -> {List {1**a||0}|len _v == (len xs + len ys) + len zs && elems _v == (elems xs + elems ys) + elems zs|0} (inferred)
Goal
    { gName = "len"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "append"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] []
                                            )
                                            ( Binary And
                                                ( Binary Eq
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                                ( Binary Eq
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                            ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "append"
            , "elems"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ,
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( SetLit ( VarS "a" )
                                        [ Var ( VarS "a" ) "x" ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] []
                                    )
                                    ( Binary And
                                        ( Binary Eq
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Plus
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                        ( Binary Eq
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Union
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                    ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                )
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "arg0"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "arg0"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "0"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "+"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "1"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "len"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "xs"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Append.sq"
        ( line 5
        , column 1
        )
    , gInferredPotlVars = []
    , gInferSolve = False
    , gSynthesize = False
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m arg0 [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0mNil[37m)[0m [37m==[0m [36m0[0m [37m&&[0m elems [37m([0mNil[37m)[0m [37m==[0m [37m[[0m[37m][0m[37m)[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x3 [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m x4 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
Goal
    { gName = "elems"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "len"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "append"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] []
                                            )
                                            ( Binary And
                                                ( Binary Eq
                                                    ( Pred IntS "len"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Plus
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred IntS "len"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                                ( Binary Eq
                                                    ( Pred
                                                        ( SetS ( VarS "a" ) ) "elems"
                                                        [ Var
                                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                                        ]
                                                    )
                                                    ( Binary Union
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "xs"
                                                            ]
                                                        )
                                                        ( Pred
                                                            ( SetS ( VarS "a" ) ) "elems"
                                                            [ Var
                                                                ( DataS "List" [ VarS "a" ] ) "ys"
                                                            ]
                                                        )
                                                    )
                                                )
                                            ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "append"
            , "elems"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ,
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( SetLit ( VarS "a" )
                                        [ Var ( VarS "a" ) "x" ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] []
                                    )
                                    ( Binary And
                                        ( Binary Eq
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Plus
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                        ( Binary Eq
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Union
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                    ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                )
                ( ScalarT
                    ( DatatypeT "DSet"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "arg0"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "arg0"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Emptyset"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "+"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Singleton"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "elems"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "xs"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Append.sq"
        ( line 9
        , column 1
        )
    , gInferredPotlVars = []
    , gInferSolve = False
    , gSynthesize = False
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m&&[0m elems [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [37m[[0mx[37m][0m [37m+[0m elems xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "append"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "append"
            , "elems"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "elems"
                ,
                    [ SetS ( VarS "a" )
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ,
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "elems"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = SetS ( VarS "a" )
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( SetLit ( VarS "a" ) [] )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( SetLit ( VarS "a" )
                                        [ Var ( VarS "a" ) "x" ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = BoolLit True
                    }
                )
            ,
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] []
                                    )
                                    ( Binary And
                                        ( Binary Eq
                                            ( Pred IntS "len"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Plus
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred IntS "len"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                        ( Binary Eq
                                            ( Pred
                                                ( SetS ( VarS "a" ) ) "elems"
                                                [ Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                ]
                                            )
                                            ( Binary Union
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                                ( Pred
                                                    ( SetS ( VarS "a" ) ) "elems"
                                                    [ Var
                                                        ( DataS "List" [ VarS "a" ] ) "ys"
                                                    ]
                                                )
                                            )
                                        )
                                    ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "elems"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( FunctionT "ys"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I3" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            ] []
                        )
                        ( Binary And
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "ys"
                                        ]
                                    )
                                )
                            )
                            ( Binary Eq
                                ( Pred
                                    ( SetS ( VarS "a" ) ) "elems"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Union
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                    ( Pred
                                        ( SetS ( VarS "a" ) ) "elems"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "ys"
                                        ]
                                    )
                                )
                            )
                        ) ( Var IntS "I5" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "ys"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "ys"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "z"
                                    , "zs"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "z"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "append"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "zs"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Append.sq"
        ( line 15
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m ys [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0mNil[37m)[0m [37m==[0m [36m0[0m [37m&&[0m elems [37m([0mNil[37m)[0m [37m==[0m [37m[[0m[37m][0m[37m)[0m [37m==>[0m len [1m_v[0m [37m==[0m len xs [37m+[0m len ys [37m&&[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m len [1m_v[0m [37m==[0m len xs [37m+[0m len ys[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x19 x20[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len x20 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [1m_v[0m [37m==[0m len xs [37m+[0m len ys [37m&&[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m[37m)[0m [37m&&[0m [37m([0m[37m([0m[37m([0mlen [37m([0m[37m([0mCons x19 x20[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len x20 [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m&&[0m elems [37m([0m[37m([0mCons x19 x20[37m)[0m[37m)[0m [37m==[0m [37m[[0mx19[37m][0m [37m+[0m elems x20[37m)[0m [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m z [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons z x20[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len x20 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [1m_v[0m [37m==[0m len xs [37m+[0m len ys [37m&&[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m[37m)[0m [37m&&[0m [37m([0m[37m([0m[37m([0mlen [37m([0m[37m([0mCons z x20[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len x20 [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m&&[0m elems [37m([0m[37m([0mCons z x20[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems x20[37m)[0m [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mxs [37m==[0m [37m([0mCons z zs[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mxs [37m==[0m [37m([0mCons z zs[37m)[0m [37m&&[0m len [1m_v[0m [37m==[0m [36m1[0m [37m+[0m len x20[37m)[0m [37m&&[0m len x20 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen x20 [37m==[0m len zs [37m+[0m len ys [37m&&[0m elems x20 [37m==[0m elems zs [37m+[0m elems ys[37m)[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m len [1m_v[0m [37m==[0m len xs [37m+[0m len ys[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mxs [37m==[0m [37m([0mCons z zs[37m)[0m [37m&&[0m elems [1m_v[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems x20[37m)[0m [37m&&[0m len x20 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen x20 [37m==[0m len zs [37m+[0m len ys [37m&&[0m elems x20 [37m==[0m elems zs [37m+[0m elems ys[37m)[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs [37m&&[0m elems [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [37m[[0mz[37m][0m [37m+[0m elems zs[37m)[0m [37m==>[0m elems [1m_v[0m [37m==[0m elems xs [37m+[0m elems ys[37m)[0m UNSAT
append :: <a> . xs:{List {1**a||I0}||I1} -> ys:{List {1**a||I2}||I3} -> {List {1**a||I4}|len _v == len xs + len ys && elems _v == elems xs + elems ys|I5}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{List {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
append :: <a> . xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0} (inferred)
Goal
    { gName = "len"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "compress"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "compress"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "compress"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        ] []
                    ) ( BoolLit True ) ( IntLit 0 )
                )
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "arg0"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "arg0"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "0"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "+"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "1"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "len"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "xs"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Compress.sq"
        ( line 9
        , column 1
        )
    , gInferredPotlVars = []
    , gInferSolve = False
    , gSynthesize = False
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m arg0 [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len [37m([0mNil[37m)[0m [37m==[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x3 [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0marg0 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m+[0m x4 [37m&&[0m arg0 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m x4 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len arg0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len [37m([0m[37m([0mCons x xs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len xs [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
Goal
    { gName = "compress"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "compress"
            , "len"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Just "len"
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList
            [
                ( "len"
                ,
                    [ IntS
                    , DataS "List" [ VarS "a" ]
                    ]
                )
            ]
        , _measureDefs = fromList
            [
                ( "len"
                , MeasureDef
                    { _inSort = DataS "List" [ VarS "a" ]
                    , _outSort = IntS
                    , _definitions =
                        [ MeasureCase "Nil" []
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                ) ( IntLit 0 )
                            )
                        , MeasureCase "Cons"
                            [ "x"
                            , "xs"
                            ]
                            ( Binary Eq
                                ( Pred IntS "len"
                                    [ Var
                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                    ]
                                )
                                ( Binary Plus ( IntLit 1 )
                                    ( Pred IntS "len"
                                        [ Var
                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                        ]
                                    )
                                )
                            )
                        ]
                    , _constantArgs = []
                    , _postcondition = Binary Ge ( Var IntS "_v" ) ( IntLit 0 )
                    }
                )
            ]
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "compress"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "len"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT IntT
                            ( Binary Ge ( Var AnyS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I3" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "compress"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "ys"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Nil"
                                    , argNames = []
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "Cons"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "y"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "Nil"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                , Case
                                    { constructor = "Cons"
                                    , argNames =
                                        [ "z"
                                        , "zs"
                                        ]
                                    , expr = Program
                                        { content = PIf
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "=="
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "y"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "z"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Cons"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "z"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "zs"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Cons"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "y"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "z"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "zs"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Compress.sq"
        ( line 15
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m G0 [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0mNil[37m)[0m [37m==[0m [36m0[0m[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m z[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0my [37m==[0m z[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m z[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m==[0m z[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m==[0m z[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m==[0m z[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m==[0m z[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m==[0m z[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m z[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m==[0m z[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m==[0m z[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m len G0 [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len xs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len ys [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m len zs [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m [37m([0mlen [37m([0m[37m([0mCons y ys[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len ys [37m&&[0m len [37m([0m[37m([0mCons z zs[37m)[0m[37m)[0m [37m==[0m [36m1[0m [37m+[0m len zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
compress :: <a> . xs:{List {1**a||I0}||I1} -> {List {1**a||I2}||I3}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> 
      match tick 1 (compress ys) with
        Nil -> Cons y Nil
        Cons z zs -> 
          if y == z
            then Cons z zs
            else Cons y (Cons z zs)

len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
compress :: <a> . xs:{List {1**a||1}||0} -> {List {1**a||0}||0} (inferred)
Goal
    { gName = "cons2"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "cons2"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "cons2"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 2 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I2" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 2 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I2" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PTick 1
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PSymbol "Cons"
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PSymbol "x"
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PTick 1
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "Cons"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "x"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "Nil"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Cons2.sq"
        ( line 12
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
cons2 :: <a> . x:{2**a||I0} -> {List {1**a||I1}||I2}
cons2 = \x . tick 1 (Cons x
                       (tick 1 (Cons x Nil)))

cons2 :: <a> . x:{2**a||2} -> {List {1**a||0}||0} (inferred)
Goal
    { gName = "snoc"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "reverse"
            , "snoc"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "reverse"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        )
                    )
                )
            ,
                ( "snoc"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "xs"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ] [ Var IntS "F9" ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                            ] [ Var IntS "F10" ]
                        ) ( BoolLit True ) ( Var IntS "I4" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "Nil"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "snoc"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Reverse.sq"
        ( line 8
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F9"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "F10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "reverse"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "snoc"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F9" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                ] [ Var IntS "F10" ]
                                            ) ( BoolLit True ) ( Var IntS "I4" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "reverse"
            , "snoc"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "reverse"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        )
                    )
                )
            ,
                ( "snoc"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                        ] [ Var IntS "F11" ]
                    ) ( BoolLit True ) ( Var IntS "I6" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                        ] [ Var IntS "F12" ]
                    ) ( BoolLit True ) ( Var IntS "I8" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PTick 1
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "snoc"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "reverse"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Reverse.sq"
        ( line 14
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I5"
            , []
            )
        ,
            ( "I6"
            , []
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F11"
            , []
            )
        ,
            ( "F12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
snoc :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> Cons y
                     (tick 1 (snoc x ys))

reverse :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (snoc y
                           (tick 1 (reverse ys)))

snoc :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
reverse :: <a> . xs:{List {1**a||2} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
Goal
    { gName = "insert"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "insert"
            , "insertionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "insert"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "insertionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "xs"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ] [ Var IntS "F9" ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                            ] [ Var IntS "F10" ]
                        ) ( BoolLit True ) ( Var IntS "I4" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "Nil"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "<"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "insert"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "x"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "ys"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Cons"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "y"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-InsertSort-Coarse.sq"
        ( line 10
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F9"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "F10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "insertionSort"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F9" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                ] [ Var IntS "F10" ]
                                            ) ( BoolLit True ) ( Var IntS "I4" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "insert"
            , "insertionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "insert"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "insertionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                        ] [ Var IntS "F11" ]
                    ) ( BoolLit True ) ( Var IntS "I6" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                        ] [ Var IntS "F12" ]
                    ) ( BoolLit True ) ( Var IntS "I8" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PTick 1
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "insert"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "insertionSort"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-InsertSort-Coarse.sq"
        ( line 20
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I5"
            , []
            )
        ,
            ( "I6"
            , []
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F11"
            , []
            )
        ,
            ( "F12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if y < x
          then Cons y (tick 1 (insert x
                                 ys))
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

insert :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
insertionSort :: <a> . xs:{List {1**a||2} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
Goal
    { gName = "subsetSum"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "EList"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "EList" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "EList" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "EList"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ]
                                                    [ Binary Times ( IntLit 2 ) ( Pred IntS "q" [] ) ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "EList"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "EList" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "EList" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "EList" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "EList"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "EList"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ]
                                        [ Binary Times ( IntLit 2 ) ( Var AnyS "q" ) ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "EList"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "EList"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "subsetSum"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "EList"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F4" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "EList"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F4" ]
                ) ( BoolLit True ) ( Var IntS "I1" )
            )
            ( FunctionT "arg0"
                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "target"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "=="
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "target"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "0"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "hd"
                                    , "tl"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "||"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "subsetSum"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "tl"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PSymbol "-"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PSymbol "target"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "hd"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "subsetSum"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "tl"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "target"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Subset-Sum.sq"
        ( line 6
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "EList" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "EList" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F4"
            , []
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m target [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
subsetSum :: arg1:{EList {Int||I0} <F4>||I1} -> arg0:{Int||I2} -> {Bool||I3}
subsetSum = \xs . \target . 
    match xs with
      Nil -> target == 0
      Cons hd tl -> (tick 1 (subsetSum
                               tl (target - hd))) ||
                      (tick 1 (subsetSum tl target))

subsetSum :: arg1:{EList {Int||0} <2>||0} -> arg0:{Int||0} -> {Bool||0} (inferred)
Goal
    { gName = "insert"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts =
                                        [ VarS "a"
                                        , VarS "a"
                                        ]
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ]
                                            [ Pred IntS "q"
                                                [ Var ( VarS "a" ) "_0"
                                                , Var ( VarS "a" ) "_1"
                                                ]
                                            ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts =
                                        [ VarS "a"
                                        , VarS "a"
                                        ]
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True )
                                                        ( Pred IntS "q"
                                                            [ Var ( VarS "a" ) "x"
                                                            , Var ( VarS "a" ) "_v"
                                                            ]
                                                        )
                                                    ]
                                                    [ Pred IntS "q"
                                                        [ Var ( VarS "a" ) "_0"
                                                        , Var ( VarS "a" ) "_1"
                                                        ]
                                                    ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ]
                                                    [ Pred IntS "q"
                                                        [ Var ( VarS "a" ) "_0"
                                                        , Var ( VarS "a" ) "_1"
                                                        ]
                                                    ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "insert"
            , "insertionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts =
                                [ VarS "a"
                                , VarS "a"
                                ]
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts =
                            [ VarS "a"
                            , VarS "a"
                            ]
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True )
                                            ( Pred AnyS "q"
                                                [ Var AnyS "x"
                                                , Var AnyS "_v"
                                                ]
                                            )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts =
                            [ VarS "a"
                            , VarS "a"
                            ]
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "insert"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "insertionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "xs"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ] [ Var IntS "F9" ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                            ] [ Var IntS "F10" ]
                        ) ( BoolLit True ) ( Var IntS "I4" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "Nil"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "<"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "insert"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "x"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "ys"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Cons"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "y"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-InsertSort.sq"
        ( line 11
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F9"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "F10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "insertionSort"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts =
                                        [ VarS "a"
                                        , VarS "a"
                                        ]
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ]
                                            [ Pred IntS "q"
                                                [ Var ( VarS "a" ) "_0"
                                                , Var ( VarS "a" ) "_1"
                                                ]
                                            ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts =
                                        [ VarS "a"
                                        , VarS "a"
                                        ]
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True )
                                                        ( Pred IntS "q"
                                                            [ Var ( VarS "a" ) "x"
                                                            , Var ( VarS "a" ) "_v"
                                                            ]
                                                        )
                                                    ]
                                                    [ Pred IntS "q"
                                                        [ Var ( VarS "a" ) "_0"
                                                        , Var ( VarS "a" ) "_1"
                                                        ]
                                                    ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ]
                                                    [ Pred IntS "q"
                                                        [ Var ( VarS "a" ) "_0"
                                                        , Var ( VarS "a" ) "_1"
                                                        ]
                                                    ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F9" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                ] [ Var IntS "F10" ]
                                            ) ( BoolLit True ) ( Var IntS "I4" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "insert"
            , "insertionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts =
                                [ VarS "a"
                                , VarS "a"
                                ]
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts =
                            [ VarS "a"
                            , VarS "a"
                            ]
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True )
                                            ( Pred AnyS "q"
                                                [ Var AnyS "x"
                                                , Var AnyS "_v"
                                                ]
                                            )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts =
                            [ VarS "a"
                            , VarS "a"
                            ]
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "insert"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "insertionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                        ] [ Var IntS "F11" ]
                    ) ( BoolLit True ) ( Var IntS "I6" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                        ] [ Var IntS "F12" ]
                    ) ( BoolLit True ) ( Var IntS "I8" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PTick 1
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "insert"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "insertionSort"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-InsertSort.sq"
        ( line 20
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I5"
            , []
            )
        ,
            ( "I6"
            , []
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F11"
            , []
            )
        ,
            ( "F12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if y < x
          then Cons y (tick 1 (insert x
                                 ys))
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

insert :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
insertionSort :: <a> . xs:{List {1**a||2} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
Goal
    { gName = "insert"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts =
                                        [ VarS "a"
                                        , VarS "a"
                                        ]
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ]
                                            [ Pred IntS "q"
                                                [ Var ( VarS "a" ) "_0"
                                                , Var ( VarS "a" ) "_1"
                                                ]
                                            ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts =
                                        [ VarS "a"
                                        , VarS "a"
                                        ]
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True )
                                                        ( Pred IntS "q"
                                                            [ Var ( VarS "a" ) "x"
                                                            , Var ( VarS "a" ) "_v"
                                                            ]
                                                        )
                                                    ]
                                                    [ Pred IntS "q"
                                                        [ Var ( VarS "a" ) "_0"
                                                        , Var ( VarS "a" ) "_1"
                                                        ]
                                                    ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ]
                                                    [ Pred IntS "q"
                                                        [ Var ( VarS "a" ) "_0"
                                                        , Var ( VarS "a" ) "_1"
                                                        ]
                                                    ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "insert"
            , "insertionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts =
                                [ VarS "a"
                                , VarS "a"
                                ]
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts =
                            [ VarS "a"
                            , VarS "a"
                            ]
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True )
                                            ( Pred AnyS "q"
                                                [ Var AnyS "x"
                                                , Var AnyS "_v"
                                                ]
                                            )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts =
                            [ VarS "a"
                            , VarS "a"
                            ]
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "insert"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "insertionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "xs"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ] [ Var IntS "F9" ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                            ] [ Var IntS "F10" ]
                        ) ( BoolLit True ) ( Var IntS "I4" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "Nil"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "<"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "y"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "insert"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Cons"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "y"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-InsertSort-Compares.sq"
        ( line 8
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F9"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "F10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<[0m x[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "insertionSort"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts =
                                        [ VarS "a"
                                        , VarS "a"
                                        ]
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ]
                                            [ Pred IntS "q"
                                                [ Var ( VarS "a" ) "_0"
                                                , Var ( VarS "a" ) "_1"
                                                ]
                                            ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts =
                                        [ VarS "a"
                                        , VarS "a"
                                        ]
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True )
                                                        ( Pred IntS "q"
                                                            [ Var ( VarS "a" ) "x"
                                                            , Var ( VarS "a" ) "_v"
                                                            ]
                                                        )
                                                    ]
                                                    [ Pred IntS "q"
                                                        [ Var ( VarS "a" ) "_0"
                                                        , Var ( VarS "a" ) "_1"
                                                        ]
                                                    ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ]
                                                    [ Pred IntS "q"
                                                        [ Var ( VarS "a" ) "_0"
                                                        , Var ( VarS "a" ) "_1"
                                                        ]
                                                    ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F9" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                ] [ Var IntS "F10" ]
                                            ) ( BoolLit True ) ( Var IntS "I4" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "insert"
            , "insertionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts =
                                [ VarS "a"
                                , VarS "a"
                                ]
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts =
                            [ VarS "a"
                            , VarS "a"
                            ]
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True )
                                            ( Pred AnyS "q"
                                                [ Var AnyS "x"
                                                , Var AnyS "_v"
                                                ]
                                            )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts =
                            [ VarS "a"
                            , VarS "a"
                            ]
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "insert"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "insertionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                        ] [ Var IntS "F11" ]
                    ) ( BoolLit True ) ( Var IntS "I6" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                        ] [ Var IntS "F12" ]
                    ) ( BoolLit True ) ( Var IntS "I8" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PTick 1
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "insert"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "insertionSort"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-InsertSort-Compares.sq"
        ( line 19
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I5"
            , []
            )
        ,
            ( "I6"
            , []
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F11"
            , []
            )
        ,
            ( "F12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if tick 1 (y < x)
          then Cons y (insert x ys)
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

insert :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
insertionSort :: <a> . xs:{List {1**a||2} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
Goal
    { gName = "bitToInt"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList []
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                ) ( BoolLit True ) ( Var IntS "I1" )
            )
            ( FunctionT "arg0"
                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "n"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "0"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "+"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "*"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "x"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "n"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "bitToInt"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "ys"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "*"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "n"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "n"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 15
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F61"
            , []
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "bitToInt'"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList []
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg0"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                ) ( BoolLit True ) ( Var IntS "I5" )
            )
            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PApp
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PSymbol "bitToInt"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                    ( Program
                        { content = PSymbol "1"
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 21
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I4"
            , []
            )
        ,
            ( "I5"
            , []
            )
        ,
            ( "I6"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                ]
            )
        ,
            ( "F62"
            , []
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
Goal
    { gName = "sum"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList []
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg2"
            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
            ( FunctionT "arg1"
                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                ( FunctionT "arg0"
                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                    ( ScalarT
                        ( DatatypeT "Pair"
                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                        ) ( BoolLit True ) ( Var IntS "I11" )
                    ) 0
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "y"
                    ( Program
                        { content = PFun "r"
                            ( Program
                                { content = PLet "s"
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "+"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "+"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "x"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "y"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "r"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PIf
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "=="
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "s"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "0"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Pair"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "0"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "0"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PIf
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "=="
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "s"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "1"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Pair"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "1"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "0"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PIf
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "=="
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "s"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "2"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Pair"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "0"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "1"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Pair"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "1"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "1"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 24
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I7"
            , []
            )
        ,
            ( "I8"
            , [ Var IntS "arg2" ]
            )
        ,
            ( "I9"
            ,
                [ Var IntS "arg1"
                , Var IntS "arg2"
                ]
            )
        ,
            ( "I10"
            ,
                [ Var IntS "arg0"
                , Var IntS "arg1"
                , Var IntS "arg2"
                ]
            )
        ,
            ( "I11"
            ,
                [ Var IntS "arg0"
                , Var IntS "arg1"
                , Var IntS "arg2"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m s [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m0[0m[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m s[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m1[0m[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m1[0m[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m0[0m[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m s[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m2[0m[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m2[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m0[0m[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m2[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m1[0m[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m0[0m[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m2[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m1[0m[37m)[0m [37m&&[0m s [37m==[0m x23 [37m+[0m r[37m)[0m [37m&&[0m x23 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "add'"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "sum"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg2"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                ) ( BoolLit True ) ( Var IntS "I13" )
            )
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                    ) ( BoolLit True ) ( Var IntS "I15" )
                )
                ( FunctionT "arg0"
                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                        ) ( BoolLit True ) ( Var IntS "I18" )
                    ) 0
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "b1"
            ( Program
                { content = PFun "b2"
                    ( Program
                        { content = PFun "r"
                            ( Program
                                { content = PMatch
                                    ( Program
                                        { content = PSymbol "b1"
                                        , typeOf = AnyT
                                        }
                                    )
                                    [ Case
                                        { constructor = "Nil"
                                        , argNames = []
                                        , expr = Program
                                            { content = PSymbol "Nil"
                                            , typeOf = AnyT
                                            }
                                        }
                                    , Case
                                        { constructor = "Cons"
                                        , argNames =
                                            [ "x"
                                            , "xs"
                                            ]
                                        , expr = Program
                                            { content = PMatch
                                                ( Program
                                                    { content = PSymbol "b2"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                [ Case
                                                    { constructor = "Nil"
                                                    , argNames = []
                                                    , expr = Program
                                                        { content = PSymbol "Nil"
                                                        , typeOf = AnyT
                                                        }
                                                    }
                                                , Case
                                                    { constructor = "Cons"
                                                    , argNames =
                                                        [ "y"
                                                        , "ys"
                                                        ]
                                                    , expr = Program
                                                        { content = PMatch
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "sum"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "x"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "y"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "r"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            [ Case
                                                                { constructor = "Pair"
                                                                , argNames =
                                                                    [ "z"
                                                                    , "r'"
                                                                    ]
                                                                , expr = Program
                                                                    { content = PTick 1
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PApp
                                                                                        ( Program
                                                                                            { content = PSymbol "Cons"
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                        ( Program
                                                                                            { content = PSymbol "z"
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PApp
                                                                                        ( Program
                                                                                            { content = PApp
                                                                                                ( Program
                                                                                                    { content = PApp
                                                                                                        ( Program
                                                                                                            { content = PSymbol "add'"
                                                                                                            , typeOf = AnyT
                                                                                                            }
                                                                                                        )
                                                                                                        ( Program
                                                                                                            { content = PSymbol "xs"
                                                                                                            , typeOf = AnyT
                                                                                                            }
                                                                                                        )
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                                ( Program
                                                                                                    { content = PSymbol "ys"
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                        ( Program
                                                                                            { content = PSymbol "r'"
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                }
                                                            ]
                                                        , typeOf = AnyT
                                                        }
                                                    }
                                                ]
                                            , typeOf = AnyT
                                            }
                                        }
                                    ]
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 32
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I12"
            , []
            )
        ,
            ( "I13"
            , []
            )
        ,
            ( "I14"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I15"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I16"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I17"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I18"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "F63"
            , []
            )
        ,
            ( "F64"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "F65"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m z [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair z r'[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair z r'[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "add"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "add'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                            ) ( BoolLit True ) ( Var IntS "I18" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sum"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                ) ( BoolLit True ) ( Var IntS "I20" )
            )
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                    ) ( BoolLit True ) ( Var IntS "I22" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                    ) ( BoolLit True ) ( Var IntS "I24" )
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "b1"
            ( Program
                { content = PFun "b2"
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "add'"
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "b1"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PSymbol "b2"
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "0"
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 43
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I19"
            , []
            )
        ,
            ( "I20"
            , []
            )
        ,
            ( "I21"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I22"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I23"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I24"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F66"
            , []
            )
        ,
            ( "F67"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F68"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
Goal
    { gName = "mult"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "add"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                                    ) ( BoolLit True ) ( Var IntS "I20" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                        ) ( BoolLit True ) ( Var IntS "I22" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                        ) ( BoolLit True ) ( Var IntS "I24" )
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "add'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                            ) ( BoolLit True ) ( Var IntS "I18" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sum"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                ) ( BoolLit True ) ( Var IntS "I26" )
            )
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                    ) ( BoolLit True ) ( Var IntS "I28" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                    ) ( BoolLit True ) ( Var IntS "I30" )
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "b1"
            ( Program
                { content = PFun "b2"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "b1"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "Nil"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PSymbol "b2"
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Nil"
                                            , argNames = []
                                            , expr = Program
                                                { content = PLet "nm"
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "mult"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "xs"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "b2"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "add"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "b2"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Cons"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "0"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "Nil"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        , Case
                                            { constructor = "Cons"
                                            , argNames =
                                                [ "y"
                                                , "ys"
                                                ]
                                            , expr = Program
                                                { content = PLet "nm"
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "mult"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "xs"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "b2"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "add"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "b2"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Cons"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "0"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "Cons"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "y"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "ys"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 46
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I25"
            , []
            )
        ,
            ( "I26"
            , []
            )
        ,
            ( "I27"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I28"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I29"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I30"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F69"
            , []
            )
        ,
            ( "F70"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F71"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "diff"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "add"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                                    ) ( BoolLit True ) ( Var IntS "I20" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                        ) ( BoolLit True ) ( Var IntS "I22" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                        ) ( BoolLit True ) ( Var IntS "I24" )
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "mult"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                                    ) ( BoolLit True ) ( Var IntS "I26" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                        ) ( BoolLit True ) ( Var IntS "I28" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                        ) ( BoolLit True ) ( Var IntS "I30" )
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "add'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                            ) ( BoolLit True ) ( Var IntS "I18" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sum"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg2"
            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
            ( FunctionT "arg1"
                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                ( FunctionT "arg0"
                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                    ( ScalarT
                        ( DatatypeT "Pair"
                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                        ) ( BoolLit True ) ( Var IntS "I35" )
                    ) 0
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "y"
                    ( Program
                        { content = PFun "r"
                            ( Program
                                { content = PIf
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "<"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "-"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "-"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "x"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "y"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "r"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "0"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PTick 1
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Pair"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "+"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PSymbol "+"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "x"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "y"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "r"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "1"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PTick 1
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Pair"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "+"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PSymbol "+"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "x"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "y"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "r"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "0"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 60
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I31"
            , []
            )
        ,
            ( "I32"
            , [ Var IntS "arg2" ]
            )
        ,
            ( "I33"
            ,
                [ Var IntS "arg1"
                , Var IntS "arg2"
                ]
            )
        ,
            ( "I34"
            ,
                [ Var IntS "arg0"
                , Var IntS "arg1"
                , Var IntS "arg2"
                ]
            )
        ,
            ( "I35"
            ,
                [ Var IntS "arg0"
                , Var IntS "arg1"
                , Var IntS "arg2"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m x118 [37m-[0m x119[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m x118 [37m-[0m x119[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x118 [37m-[0m r [37m&&[0m x118 [37m==[0m x [37m-[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mx114 [37m<[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x130 [37m+[0m x131[37m)[0m [37m&&[0m x114 [37m==[0m x118 [37m-[0m r[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mx114 [37m<[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x130 [37m+[0m x131[37m)[0m [37m&&[0m x114 [37m==[0m x118 [37m-[0m r[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y[37m)[0m [37m&&[0m x130 [37m==[0m x [37m+[0m y[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx114 [37m<[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x130 [37m+[0m r[37m)[0m [37m&&[0m x114 [37m==[0m x118 [37m-[0m r[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y[37m)[0m [37m&&[0m x130 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx114 [37m<[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m1[0m[37m)[0m [37m&&[0m x114 [37m==[0m x118 [37m-[0m r[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mx114 [37m<[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x142 [37m+[0m x143[37m)[0m [37m&&[0m x114 [37m==[0m x118 [37m-[0m r[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mx114 [37m<[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x142 [37m+[0m x143[37m)[0m [37m&&[0m x114 [37m==[0m x118 [37m-[0m r[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y[37m)[0m [37m&&[0m x142 [37m==[0m x [37m+[0m y[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx114 [37m<[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x142 [37m+[0m r[37m)[0m [37m&&[0m x114 [37m==[0m x118 [37m-[0m r[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y[37m)[0m [37m&&[0m x142 [37m==[0m x [37m+[0m y [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx114 [37m<[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m0[0m[37m)[0m [37m&&[0m x114 [37m==[0m x118 [37m-[0m r[37m)[0m [37m&&[0m x118 [37m==[0m x [37m-[0m y [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "sub'"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "add"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                                    ) ( BoolLit True ) ( Var IntS "I20" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                        ) ( BoolLit True ) ( Var IntS "I22" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                        ) ( BoolLit True ) ( Var IntS "I24" )
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "mult"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                                    ) ( BoolLit True ) ( Var IntS "I26" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                        ) ( BoolLit True ) ( Var IntS "I28" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                        ) ( BoolLit True ) ( Var IntS "I30" )
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "add'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                            ) ( BoolLit True ) ( Var IntS "I18" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "diff"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I35" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sum"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg2"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                ) ( BoolLit True ) ( Var IntS "I37" )
            )
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                    ) ( BoolLit True ) ( Var IntS "I39" )
                )
                ( FunctionT "arg0"
                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                    ( ScalarT
                        ( DatatypeT "Tuple"
                            [ ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                ) ( BoolLit True ) ( Var IntS "I42" )
                            , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I44" )
                    ) 0
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "b1"
            ( Program
                { content = PFun "b2"
                    ( Program
                        { content = PFun "r"
                            ( Program
                                { content = PMatch
                                    ( Program
                                        { content = PSymbol "b1"
                                        , typeOf = AnyT
                                        }
                                    )
                                    [ Case
                                        { constructor = "Nil"
                                        , argNames = []
                                        , expr = Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Tuple"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "Nil"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "r"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        }
                                    , Case
                                        { constructor = "Cons"
                                        , argNames =
                                            [ "x"
                                            , "xs"
                                            ]
                                        , expr = Program
                                            { content = PMatch
                                                ( Program
                                                    { content = PSymbol "b2"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                [ Case
                                                    { constructor = "Nil"
                                                    , argNames = []
                                                    , expr = Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Tuple"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "Nil"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "r"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    }
                                                , Case
                                                    { constructor = "Cons"
                                                    , argNames =
                                                        [ "y"
                                                        , "ys"
                                                        ]
                                                    , expr = Program
                                                        { content = PMatch
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "diff"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "x"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "y"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "r"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            [ Case
                                                                { constructor = "Pair"
                                                                , argNames =
                                                                    [ "z"
                                                                    , "r'"
                                                                    ]
                                                                , expr = Program
                                                                    { content = PMatch
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PApp
                                                                                        ( Program
                                                                                            { content = PApp
                                                                                                ( Program
                                                                                                    { content = PSymbol "sub'"
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                                ( Program
                                                                                                    { content = PSymbol "xs"
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                        ( Program
                                                                                            { content = PSymbol "ys"
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PSymbol "r'"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        [ Case
                                                                            { constructor = "Tuple"
                                                                            , argNames =
                                                                                [ "zs"
                                                                                , "s"
                                                                                ]
                                                                            , expr = Program
                                                                                { content = PIf
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PApp
                                                                                                    ( Program
                                                                                                        { content = PSymbol "=="
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                    ( Program
                                                                                                        { content = PSymbol "s"
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "1"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PTick 1
                                                                                            ( Program
                                                                                                { content = PApp
                                                                                                    ( Program
                                                                                                        { content = PApp
                                                                                                            ( Program
                                                                                                                { content = PSymbol "Tuple"
                                                                                                                , typeOf = AnyT
                                                                                                                }
                                                                                                            )
                                                                                                            ( Program
                                                                                                                { content = PApp
                                                                                                                    ( Program
                                                                                                                        { content = PApp
                                                                                                                            ( Program
                                                                                                                                { content = PSymbol "Cons"
                                                                                                                                , typeOf = AnyT
                                                                                                                                }
                                                                                                                            )
                                                                                                                            ( Program
                                                                                                                                { content = PSymbol "0"
                                                                                                                                , typeOf = AnyT
                                                                                                                                }
                                                                                                                            )
                                                                                                                        , typeOf = AnyT
                                                                                                                        }
                                                                                                                    )
                                                                                                                    ( Program
                                                                                                                        { content = PSymbol "zs"
                                                                                                                        , typeOf = AnyT
                                                                                                                        }
                                                                                                                    )
                                                                                                                , typeOf = AnyT
                                                                                                                }
                                                                                                            )
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                    ( Program
                                                                                                        { content = PSymbol "s"
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PTick 1
                                                                                            ( Program
                                                                                                { content = PApp
                                                                                                    ( Program
                                                                                                        { content = PApp
                                                                                                            ( Program
                                                                                                                { content = PSymbol "Tuple"
                                                                                                                , typeOf = AnyT
                                                                                                                }
                                                                                                            )
                                                                                                            ( Program
                                                                                                                { content = PApp
                                                                                                                    ( Program
                                                                                                                        { content = PApp
                                                                                                                            ( Program
                                                                                                                                { content = PSymbol "Cons"
                                                                                                                                , typeOf = AnyT
                                                                                                                                }
                                                                                                                            )
                                                                                                                            ( Program
                                                                                                                                { content = PSymbol "z"
                                                                                                                                , typeOf = AnyT
                                                                                                                                }
                                                                                                                            )
                                                                                                                        , typeOf = AnyT
                                                                                                                        }
                                                                                                                    )
                                                                                                                    ( Program
                                                                                                                        { content = PSymbol "zs"
                                                                                                                        , typeOf = AnyT
                                                                                                                        }
                                                                                                                    )
                                                                                                                , typeOf = AnyT
                                                                                                                }
                                                                                                            )
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                    ( Program
                                                                                                        { content = PSymbol "s"
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            }
                                                                        ]
                                                                    , typeOf = AnyT
                                                                    }
                                                                }
                                                            ]
                                                        , typeOf = AnyT
                                                        }
                                                    }
                                                ]
                                            , typeOf = AnyT
                                            }
                                        }
                                    ]
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 66
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I36"
            , []
            )
        ,
            ( "I37"
            , []
            )
        ,
            ( "I38"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I39"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I40"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I41"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I42"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I43"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "I44"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "F72"
            , []
            )
        ,
            ( "F73"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ,
            ( "F74"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                , Var
                    ( DataS "List" [ IntS ] ) "arg2"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mNil[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m r [37m&&[0m b1 [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mNil[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m r [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m s [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x182 x183[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [36m0[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons [36m0[0m x183[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons [36m0[0m zs[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m s[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x190 x191[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m z[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons z x191[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0ms [37m==[0m [36m1[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m s[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair z r'[37m)[0m[37m)[0m [37m&&[0m G2 [37m==[0m [37m([0mTuple zs s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "sub"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "add"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                                    ) ( BoolLit True ) ( Var IntS "I20" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                        ) ( BoolLit True ) ( Var IntS "I22" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                        ) ( BoolLit True ) ( Var IntS "I24" )
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "mult"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                                    ) ( BoolLit True ) ( Var IntS "I26" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                        ) ( BoolLit True ) ( Var IntS "I28" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                        ) ( BoolLit True ) ( Var IntS "I30" )
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "add'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                            ) ( BoolLit True ) ( Var IntS "I18" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "diff"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I35" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sub'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                                    ) ( BoolLit True ) ( Var IntS "I37" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                        ) ( BoolLit True ) ( Var IntS "I39" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                                    ) ( BoolLit True ) ( Var IntS "I42" )
                                                , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I44" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sum"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                ) ( BoolLit True ) ( Var IntS "I46" )
            )
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                    ) ( BoolLit True ) ( Var IntS "I48" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                    ) ( BoolLit True ) ( Var IntS "I50" )
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "b1"
            ( Program
                { content = PFun "b2"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "sub'"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "b1"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "b2"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PSymbol "0"
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Tuple"
                                , argNames =
                                    [ "b"
                                    , "r"
                                    ]
                                , expr = Program
                                    { content = PSymbol "b"
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 82
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I45"
            , []
            )
        ,
            ( "I46"
            , []
            )
        ,
            ( "I47"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I48"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I49"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I50"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F75"
            , []
            )
        ,
            ( "F76"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F77"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "compare"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "add"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                                    ) ( BoolLit True ) ( Var IntS "I20" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                        ) ( BoolLit True ) ( Var IntS "I22" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                        ) ( BoolLit True ) ( Var IntS "I24" )
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "mult"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                                    ) ( BoolLit True ) ( Var IntS "I26" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                        ) ( BoolLit True ) ( Var IntS "I28" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                        ) ( BoolLit True ) ( Var IntS "I30" )
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sub"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                                    ) ( BoolLit True ) ( Var IntS "I46" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                        ) ( BoolLit True ) ( Var IntS "I48" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                        ) ( BoolLit True ) ( Var IntS "I50" )
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "add'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                            ) ( BoolLit True ) ( Var IntS "I18" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "diff"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I35" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sub'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                                    ) ( BoolLit True ) ( Var IntS "I37" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                        ) ( BoolLit True ) ( Var IntS "I39" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                                    ) ( BoolLit True ) ( Var IntS "I42" )
                                                , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I44" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sum"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                ) ( BoolLit True ) ( Var IntS "I52" )
            )
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                    ) ( BoolLit True ) ( Var IntS "I54" )
                )
                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "b1"
            ( Program
                { content = PFun "b2"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "b1"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "0"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PSymbol "b2"
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Nil"
                                            , argNames = []
                                            , expr = Program
                                                { content = PSymbol "0"
                                                , typeOf = AnyT
                                                }
                                            }
                                        , Case
                                            { constructor = "Cons"
                                            , argNames =
                                                [ "y"
                                                , "ys"
                                                ]
                                            , expr = Program
                                                { content = PLet "r"
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "compare"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "xs"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "ys"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PIf
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "=="
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "r"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "0"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PIf
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "<"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "x"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "y"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PTick 1
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "-"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "1"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PIf
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PSymbol "<"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "y"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "x"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PTick 1
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PSymbol "-"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "1"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PTick 1
                                                                                    ( Program
                                                                                        { content = PSymbol "0"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PTick 1
                                                                    ( Program
                                                                        { content = PSymbol "r"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 87
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I51"
            , []
            )
        ,
            ( "I52"
            , []
            )
        ,
            ( "I53"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I54"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I55"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F78"
            , []
            )
        ,
            ( "F79"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m r [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mr [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mr [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m True [37m==[0m [37m([0mr [37m==[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m y[37m)[0m [37m&&[0m True [37m==[0m [37m([0mr [37m==[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m b1 [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m b2 [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "leq"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "bitToInt'"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                )
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "add"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                                    ) ( BoolLit True ) ( Var IntS "I20" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                        ) ( BoolLit True ) ( Var IntS "I22" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                        ) ( BoolLit True ) ( Var IntS "I24" )
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "bitToInt"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "compare"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                                    ) ( BoolLit True ) ( Var IntS "I52" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                        ) ( BoolLit True ) ( Var IntS "I54" )
                                    )
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "mult"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                                    ) ( BoolLit True ) ( Var IntS "I26" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                        ) ( BoolLit True ) ( Var IntS "I28" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                        ) ( BoolLit True ) ( Var IntS "I30" )
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sub"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                                    ) ( BoolLit True ) ( Var IntS "I46" )
                                )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                        ) ( BoolLit True ) ( Var IntS "I48" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                        ) ( BoolLit True ) ( Var IntS "I50" )
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "add'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                            ) ( BoolLit True ) ( Var IntS "I18" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "diff"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I35" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sub'"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                                    ) ( BoolLit True ) ( Var IntS "I37" )
                                )
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                        ) ( BoolLit True ) ( Var IntS "I39" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                                    ) ( BoolLit True ) ( Var IntS "I42" )
                                                , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I44" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ,
                        ( "sum"
                        , Monotype
                            ( FunctionT "arg2"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                                ( FunctionT "arg1"
                                    ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                                    ( FunctionT "arg0"
                                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "Tuple"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I19" ) ] [ Var IntS "F66" ]
                            ) ( BoolLit True ) ( Var IntS "I20" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I21" ) ] [ Var IntS "F67" ]
                                ) ( BoolLit True ) ( Var IntS "I22" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I23" ) ] [ Var IntS "F68" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "add'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I12" ) ] [ Var IntS "F63" ]
                            ) ( BoolLit True ) ( Var IntS "I13" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I14" ) ] [ Var IntS "F64" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I16" ) )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I17" ) ] [ Var IntS "F65" ]
                                    ) ( BoolLit True ) ( Var IntS "I18" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F61" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "bitToInt'"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F62" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I6" ) ) 0
                    )
                )
            ,
                ( "compare"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I51" ) ] [ Var IntS "F78" ]
                            ) ( BoolLit True ) ( Var IntS "I52" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I53" ) ] [ Var IntS "F79" ]
                                ) ( BoolLit True ) ( Var IntS "I54" )
                            )
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I55" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "diff"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I31" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I33" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I35" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "leq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                            ) ( BoolLit True ) ( Var IntS "I57" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                                ) ( BoolLit True ) ( Var IntS "I59" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I25" ) ] [ Var IntS "F69" ]
                            ) ( BoolLit True ) ( Var IntS "I26" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I27" ) ] [ Var IntS "F70" ]
                                ) ( BoolLit True ) ( Var IntS "I28" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I29" ) ] [ Var IntS "F71" ]
                                ) ( BoolLit True ) ( Var IntS "I30" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I45" ) ] [ Var IntS "F75" ]
                            ) ( BoolLit True ) ( Var IntS "I46" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I47" ) ] [ Var IntS "F76" ]
                                ) ( BoolLit True ) ( Var IntS "I48" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I49" ) ] [ Var IntS "F77" ]
                                ) ( BoolLit True ) ( Var IntS "I50" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sub'"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I36" ) ] [ Var IntS "F72" ]
                            ) ( BoolLit True ) ( Var IntS "I37" )
                        )
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I38" ) ] [ Var IntS "F73" ]
                                ) ( BoolLit True ) ( Var IntS "I39" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I40" ) )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I41" ) ] [ Var IntS "F74" ]
                                            ) ( BoolLit True ) ( Var IntS "I42" )
                                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I43" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I44" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "sum"
                , Monotype
                    ( FunctionT "arg2"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) )
                        ( FunctionT "arg1"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I8" ) )
                            ( FunctionT "arg0"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) )
                                ( ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I10" ) ] []
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I56" ) ] [ Var IntS "F80" ]
                ) ( BoolLit True ) ( Var IntS "I57" )
            )
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I58" ) ] [ Var IntS "F81" ]
                    ) ( BoolLit True ) ( Var IntS "I59" )
                )
                ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I60" ) ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "b1"
            ( Program
                { content = PFun "b2"
                    ( Program
                        { content = PTick 1
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "<"
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "compare"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "b1"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "b2"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PSymbol "1"
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BitVec.sq"
        ( line 105
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I56"
            , []
            )
        ,
            ( "I57"
            , []
            )
        ,
            ( "I58"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I59"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I60"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F80"
            , []
            )
        ,
            ( "F81"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m==>[0m True[37m)[0m UNSAT
bitToInt :: arg1:{List {Int||I0} <F61>||I1} -> arg0:{Int||I2} -> {Int||I3}
bitToInt = \xs . \n . 
    match xs with
      Nil -> 0
      Cons x ys -> tick 1 ((x * n) +
                             (bitToInt ys (n * n)))

bitToInt' :: arg0:{List {Int||I4} <F62>||I5} -> {Int||I6}
bitToInt' = \xs . bitToInt xs 1

sum :: arg2:{Int||I7} -> arg1:{Int||I8} -> arg0:{Int||I9} -> {Pair {Int||I10}||I11}
sum = \x . \y . \r . 
      let s = (x + y) + r in
      
      if s == 0
        then Pair 0 0
        else 
          if s == 1
            then Pair 1 0
            else 
              if s == 2
                then Pair 0 1
                else Pair 1 1

add' :: arg2:{List {Int||I12} <F63>||I13} -> arg1:{List {Int||I14} <F64>||I15} -> arg0:{Int||I16} -> {List {Int||I17} <F65>||I18}
add' = \b1 . \b2 . \r . 
      match b1 with
        Nil -> Nil
        Cons x xs -> 
          match b2 with
            Nil -> Nil
            Cons y ys -> 
              match sum x y r with
                Pair z r' -> tick 1 (Cons z
                                       (add' xs ys r'))

add :: arg1:{List {Int||I19} <F66>||I20} -> arg0:{List {Int||I21} <F67>||I22} -> {List {Int||I23} <F68>||I24}
add = \b1 . \b2 . add' b1 b2 0

mult :: arg1:{List {Int||I25} <F69>||I26} -> arg0:{List {Int||I27} <F70>||I28} -> {List {Int||I29} <F71>||I30}
mult = \b1 . \b2 . 
    match b1 with
      Nil -> Nil
      Cons x xs -> 
        match b2 with
          Nil -> 
            let nm = mult xs b2 in
            add b2 (Cons 0 Nil)
          Cons y ys -> 
            let nm = mult xs b2 in
            add b2 (Cons 0 (Cons y ys))

diff :: arg2:{Int||I31} -> arg1:{Int||I32} -> arg0:{Int||I33} -> {Pair {Int||I34}||I35}
diff = \x . \y . \r . 
      if ((x - y) - r) < 0
        then tick 1 (Pair ((x + y) + r)
                       1)
        else tick 1 (Pair ((x + y) + r)
                       0)

sub' :: arg2:{List {Int||I36} <F72>||I37} -> arg1:{List {Int||I38} <F73>||I39} -> arg0:{Int||I40} -> {Tuple {List {Int||I41} <F74>||I42} {Int||I43}||I44}
sub' = \b1 . \b2 . \r . 
      match b1 with
        Nil -> Tuple Nil r
        Cons x xs -> 
          match b2 with
            Nil -> Tuple Nil r
            Cons y ys -> 
              match diff x y r with
                Pair z r' -> 
                  match sub' xs ys r' with
                    Tuple zs s -> 
                      if s == 1
                        then tick 1 (Tuple (Cons 0 zs)
                                       s)
                        else tick 1 (Tuple (Cons z zs)
                                       s)

sub :: arg1:{List {Int||I45} <F75>||I46} -> arg0:{List {Int||I47} <F76>||I48} -> {List {Int||I49} <F77>||I50}
sub = \b1 . \b2 . 
    match sub' b1 b2 0 with
      Tuple b r -> b

compare :: arg1:{List {Int||I51} <F78>||I52} -> arg0:{List {Int||I53} <F79>||I54} -> {Int||I55}
compare = \b1 . \b2 . 
    match b1 with
      Nil -> 0
      Cons x xs -> 
        match b2 with
          Nil -> 0
          Cons y ys -> 
            let r = compare xs ys in
            
            if r == 0
              then 
                if x < y
                  then tick 1 (- 1)
                  else 
                    if y < x
                      then tick 1 (- 1)
                      else tick 1 (0)
              else tick 1 (r)

leq :: arg1:{List {Int||I56} <F80>||I57} -> arg0:{List {Int||I58} <F81>||I59} -> {Bool||I60}
leq = \b1 . \b2 .
    tick 1 ((compare b1 b2) < 1)

bitToInt :: arg1:{List {Int||1} <0>||0} -> arg0:{Int||0} -> {Int||0} (inferred)
bitToInt' :: arg0:{List {Int||1} <0>||0} -> {Int||0} (inferred)
sum :: arg2:{Int||0} -> arg1:{Int||0} -> arg0:{Int||0} -> {Pair {Int||0}||0} (inferred)
add' :: arg2:{List {Int||1} <0>||0} -> arg1:{List {Int||0} <0>||0} -> arg0:{Int||0} -> {List {Int||0} <0>||0} (inferred)
add :: arg1:{List {Int||1} <0>||0} -> arg0:{List {Int||0} <0>||0} -> {List {Int||0} <0>||0} (inferred)
mult :: arg1:{List {Int||0} <0>||0} -> arg0:{List {Int||1} <0>||0} -> {List {Int||0} <0>||0} (inferred)
diff :: arg2:{Int||0} -> arg1:{Int||0} -> arg0:{Int||1} -> {Pair {Int||0}||0} (inferred)
sub' :: arg2:{List {Int||0} <0>||0} -> arg1:{List {Int||2} <0>||0} -> arg0:{Int||0} -> {Tuple {List {Int||0} <0>||0} {Int||0}||0} (inferred)
sub :: arg1:{List {Int||0} <0>||0} -> arg0:{List {Int||2} <0>||0} -> {List {Int||0} <0>||0} (inferred)
compare :: arg1:{List {Int||0} <0>||0} -> arg0:{List {Int||1} <0>||0} -> {Int||0} (inferred)
leq :: arg1:{List {Int||0} <0>||0} -> arg0:{List {Int||1} <0>||1} -> {Bool||0} (inferred)
Goal
    { gName = "r1"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "f3"
            , "g3"
            , "r1"
            , "rev"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "f3"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                    ] [ Var IntS "F30" ]
                                ) ( BoolLit True ) ( Var IntS "I17" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                        ] [ Var IntS "F31" ]
                                    ) ( BoolLit True ) ( Var IntS "I19" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                        ] [ Var IntS "F32" ]
                                    ) ( BoolLit True ) ( Var IntS "I21" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "g3"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                    ] [ Var IntS "F27" ]
                                ) ( BoolLit True ) ( Var IntS "I11" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                        ] [ Var IntS "F28" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                        ] [ Var IntS "F29" ]
                                    ) ( BoolLit True ) ( Var IntS "I15" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "r1"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F23" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F24" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F25" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F26" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] [ Var IntS "F22" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                            ] [ Var IntS "F23" ]
                        ) ( BoolLit True ) ( Var IntS "I3" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            ] [ Var IntS "F24" ]
                        ) ( BoolLit True ) ( Var IntS "I5" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "ls"
            ( Program
                { content = PFun "a"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "ls"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "a"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "r1"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "xs"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Cons"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "a"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-SizeChange.sq"
        ( line 8
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F22"
            , []
            )
        ,
            ( "F23"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F24"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mls [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m ls [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m ls [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m ls [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m ls [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mls [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "rev"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "r1"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F22" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F23" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] [ Var IntS "F24" ]
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "f3"
            , "g3"
            , "r1"
            , "rev"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "f3"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                    ] [ Var IntS "F30" ]
                                ) ( BoolLit True ) ( Var IntS "I17" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                        ] [ Var IntS "F31" ]
                                    ) ( BoolLit True ) ( Var IntS "I19" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                        ] [ Var IntS "F32" ]
                                    ) ( BoolLit True ) ( Var IntS "I21" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "g3"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                    ] [ Var IntS "F27" ]
                                ) ( BoolLit True ) ( Var IntS "I11" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                        ] [ Var IntS "F28" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                        ] [ Var IntS "F29" ]
                                    ) ( BoolLit True ) ( Var IntS "I15" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "r1"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F23" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F24" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F25" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F26" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                        ] [ Var IntS "F25" ]
                    ) ( BoolLit True ) ( Var IntS "I7" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                        ] [ Var IntS "F26" ]
                    ) ( BoolLit True ) ( Var IntS "I9" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "ls"
            ( Program
                { content = PApp
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PSymbol "r1"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "ls"
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                    ( Program
                        { content = PSymbol "Nil"
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-SizeChange.sq"
        ( line 14
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I6"
            , []
            )
        ,
            ( "I7"
            , []
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F25"
            , []
            )
        ,
            ( "F26"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "g3"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "rev"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            ] [ Var IntS "F25" ]
                                        ) ( BoolLit True ) ( Var IntS "I7" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] [ Var IntS "F26" ]
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "r1"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F22" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F23" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] [ Var IntS "F24" ]
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "f3"
            , "g3"
            , "r1"
            , "rev"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "f3"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                    ] [ Var IntS "F30" ]
                                ) ( BoolLit True ) ( Var IntS "I17" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                        ] [ Var IntS "F31" ]
                                    ) ( BoolLit True ) ( Var IntS "I19" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                        ] [ Var IntS "F32" ]
                                    ) ( BoolLit True ) ( Var IntS "I21" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "g3"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                    ] [ Var IntS "F27" ]
                                ) ( BoolLit True ) ( Var IntS "I11" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                        ] [ Var IntS "F28" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                        ] [ Var IntS "F29" ]
                                    ) ( BoolLit True ) ( Var IntS "I15" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "r1"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F23" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F24" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F25" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F26" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                        ] [ Var IntS "F27" ]
                    ) ( BoolLit True ) ( Var IntS "I11" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                            ] [ Var IntS "F28" ]
                        ) ( BoolLit True ) ( Var IntS "I13" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                            ] [ Var IntS "F29" ]
                        ) ( BoolLit True ) ( Var IntS "I15" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "c"
            ( Program
                { content = PFun "d"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "c"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "d"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "g3"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "xs"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Cons"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "d"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-SizeChange.sq"
        ( line 35
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I10"
            , []
            )
        ,
            ( "I11"
            , []
            )
        ,
            ( "I12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I13"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I14"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I15"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F27"
            , []
            )
        ,
            ( "F28"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F29"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mc [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m c [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m c [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m c [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m c [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mc [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "f3"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "rev"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            ] [ Var IntS "F25" ]
                                        ) ( BoolLit True ) ( Var IntS "I7" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] [ Var IntS "F26" ]
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "g3"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                            ] [ Var IntS "F27" ]
                                        ) ( BoolLit True ) ( Var IntS "I11" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                                ] [ Var IntS "F28" ]
                                            ) ( BoolLit True ) ( Var IntS "I13" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                                ] [ Var IntS "F29" ]
                                            ) ( BoolLit True ) ( Var IntS "I15" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "r1"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F22" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F23" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] [ Var IntS "F24" ]
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "f3"
            , "g3"
            , "r1"
            , "rev"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "f3"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                    ] [ Var IntS "F30" ]
                                ) ( BoolLit True ) ( Var IntS "I17" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                        ] [ Var IntS "F31" ]
                                    ) ( BoolLit True ) ( Var IntS "I19" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                        ] [ Var IntS "F32" ]
                                    ) ( BoolLit True ) ( Var IntS "I21" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "g3"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                    ] [ Var IntS "F27" ]
                                ) ( BoolLit True ) ( Var IntS "I11" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                        ] [ Var IntS "F28" ]
                                    ) ( BoolLit True ) ( Var IntS "I13" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                        ] [ Var IntS "F29" ]
                                    ) ( BoolLit True ) ( Var IntS "I15" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "r1"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F23" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F24" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F25" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F26" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                        ] [ Var IntS "F30" ]
                    ) ( BoolLit True ) ( Var IntS "I17" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                            ] [ Var IntS "F31" ]
                        ) ( BoolLit True ) ( Var IntS "I19" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                            ] [ Var IntS "F32" ]
                        ) ( BoolLit True ) ( Var IntS "I21" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "a"
            ( Program
                { content = PFun "b"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "b"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "g3"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "a"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "Nil"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "f3"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "Cons"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "x"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "a"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "xs"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-SizeChange.sq"
        ( line 41
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I16"
            , []
            )
        ,
            ( "I17"
            , []
            )
        ,
            ( "I18"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I19"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I20"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I21"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F30"
            , []
            )
        ,
            ( "F31"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F32"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m b [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m b [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m b [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m b [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mb [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
r1 :: <a> . arg1:{List {1**a||I0} <F22>||I1} -> arg0:{List {1**a||I2} <F23>||I3} -> {List {1**a||I4} <F24>||I5}
r1 = \ls . \a . 
    match ls with
      Nil -> a
      Cons x xs -> tick 1 (r1 xs (Cons
                                    x a))

rev :: <a> . arg0:{List {1**a||I6} <F25>||I7} -> {List {1**a||I8} <F26>||I9}
rev = \ls . r1 ls Nil

g3 :: <a> . arg1:{List {1**a||I10} <F27>||I11} -> arg0:{List {1**a||I12} <F28>||I13} -> {List {1**a||I14} <F29>||I15}
g3 = \c . \d . 
    match c with
      Nil -> d
      Cons x xs -> tick 1 (g3 xs (Cons
                                    x d))

f3 :: <a> . arg1:{List {1**a||I16} <F30>||I17} -> arg0:{List {1**a||I18} <F31>||I19} -> {List {1**a||I20} <F32>||I21}
f3 = \a . \b . 
    match b with
      Nil -> tick 1 (g3 a Nil)
      Cons x xs -> tick 1 (f3 (Cons x
                                 a) xs)

r1 :: <a> . arg1:{List {1**a||1} <0>||0} -> arg0:{List {1**a||0} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
rev :: <a> . arg0:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
g3 :: <a> . arg1:{List {1**a||1} <0>||0} -> arg0:{List {1**a||0} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
f3 :: <a> . arg1:{List {1**a||1} <0>||0} -> arg0:{List {1**a||2} <0>||1} -> {List {1**a||0} <0>||0} (inferred)
Goal
    { gName = "last"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nothing"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "Maybe" [ VarS "a" ] ) "Nothing" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Just"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Maybe" [ VarS "a" ] ) "Just"
                                                [ Var ( VarS "a" ) "arg0" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Just"
            , "Many"
            , "Nil"
            , "Nothing"
            , "One"
            , "Singleton"
            , "Tuple"
            , "at"
            , "last"
            , "lastTwo"
            , "length"
            , "lengthGo"
            , "rev"
            , "revGo"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Maybe"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Just"
                        , "Nothing"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Just"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "Maybe"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nothing"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "at"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F39" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "eq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                            ) ( BoolLit True ) ( Var IntS "I33" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I35" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "last"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F37" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "lastTwo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F38" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( DatatypeT "Tuple"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            , ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "length"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                    ] [ Var IntS "F41" ]
                                ) ( BoolLit True ) ( Var IntS "I20" )
                            )
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "lengthGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I17" )
                                )
                                ( ScalarT IntT
                                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            ) 0
                        )
                    )
                )
            ,
                ( "revGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I23" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                        ] [ Var IntS "F43" ]
                                    ) ( BoolLit True ) ( Var IntS "I25" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] [ Var IntS "F44" ]
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] [ Var IntS "F37" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( ScalarT
                    ( DatatypeT "Maybe"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I3" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "l"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nothing"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PSymbol "xs"
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Nil"
                                    , argNames = []
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "Just"
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "x"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                , Case
                                    { constructor = "Cons"
                                    , argNames =
                                        [ "y"
                                        , "ys"
                                        ]
                                    , expr = Program
                                        { content = PTick 1
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "last"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "xs"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Lists.sq"
        ( line 17
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F37"
            , []
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "lastTwo"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nothing"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "Maybe" [ VarS "a" ] ) "Nothing" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Just"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Maybe" [ VarS "a" ] ) "Just"
                                                [ Var ( VarS "a" ) "arg0" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "last"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F37" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Just"
            , "Many"
            , "Nil"
            , "Nothing"
            , "One"
            , "Singleton"
            , "Tuple"
            , "at"
            , "last"
            , "lastTwo"
            , "length"
            , "lengthGo"
            , "rev"
            , "revGo"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Maybe"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Just"
                        , "Nothing"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Just"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "Maybe"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nothing"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "at"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F39" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "eq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                            ) ( BoolLit True ) ( Var IntS "I33" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I35" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "last"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F37" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "lastTwo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F38" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( DatatypeT "Tuple"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            , ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "length"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                    ] [ Var IntS "F41" ]
                                ) ( BoolLit True ) ( Var IntS "I20" )
                            )
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "lengthGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I17" )
                                )
                                ( ScalarT IntT
                                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            ) 0
                        )
                    )
                )
            ,
                ( "revGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I23" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                        ] [ Var IntS "F43" ]
                                    ) ( BoolLit True ) ( Var IntS "I25" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] [ Var IntS "F44" ]
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                        ] [ Var IntS "F38" ]
                    ) ( BoolLit True ) ( Var IntS "I5" )
                )
                ( ScalarT
                    ( DatatypeT "Maybe"
                        [ ScalarT
                            ( DatatypeT "Tuple"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                , ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                ] []
                            ) ( BoolLit True ) ( Var IntS "I8" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I9" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "l"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nothing"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PSymbol "xs"
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Nil"
                                    , argNames = []
                                    , expr = Program
                                        { content = PSymbol "Nothing"
                                        , typeOf = AnyT
                                        }
                                    }
                                , Case
                                    { constructor = "Cons"
                                    , argNames =
                                        [ "y"
                                        , "ys"
                                        ]
                                    , expr = Program
                                        { content = PMatch
                                            ( Program
                                                { content = PSymbol "ys"
                                                , typeOf = AnyT
                                                }
                                            )
                                            [ Case
                                                { constructor = "Cons"
                                                , argNames =
                                                    [ "z"
                                                    , "zs"
                                                    ]
                                                , expr = Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "lastTwo"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "xs"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                }
                                            ]
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Lists.sq"
        ( line 26
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I4"
            , []
            )
        ,
            ( "I5"
            , []
            )
        ,
            ( "I6"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F38"
            , []
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "at"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nothing"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "Maybe" [ VarS "a" ] ) "Nothing" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Just"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Maybe" [ VarS "a" ] ) "Just"
                                                [ Var ( VarS "a" ) "arg0" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "last"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F37" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lastTwo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                            ] [ Var IntS "F38" ]
                                        ) ( BoolLit True ) ( Var IntS "I5" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Just"
            , "Many"
            , "Nil"
            , "Nothing"
            , "One"
            , "Singleton"
            , "Tuple"
            , "at"
            , "last"
            , "lastTwo"
            , "length"
            , "lengthGo"
            , "rev"
            , "revGo"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Maybe"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Just"
                        , "Nothing"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Just"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "Maybe"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nothing"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "at"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F39" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "eq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                            ) ( BoolLit True ) ( Var IntS "I33" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I35" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "last"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F37" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "lastTwo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F38" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( DatatypeT "Tuple"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            , ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "length"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                    ] [ Var IntS "F41" ]
                                ) ( BoolLit True ) ( Var IntS "I20" )
                            )
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "lengthGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I17" )
                                )
                                ( ScalarT IntT
                                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            ) 0
                        )
                    )
                )
            ,
                ( "revGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I23" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                        ] [ Var IntS "F43" ]
                                    ) ( BoolLit True ) ( Var IntS "I25" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] [ Var IntS "F44" ]
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                            ] [ Var IntS "F39" ]
                        ) ( BoolLit True ) ( Var IntS "I12" )
                    )
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I14" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "k"
            ( Program
                { content = PFun "l"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "l"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "Nothing"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "h"
                                    , "t"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "=="
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "k"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "0"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Just"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "h"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "at"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PSymbol "-"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PSymbol "k"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "1"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "t"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Lists.sq"
        ( line 37
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I10"
            , []
            )
        ,
            ( "I11"
            , [ Var IntS "arg1" ]
            )
        ,
            ( "I12"
            , [ Var IntS "arg1" ]
            )
        ,
            ( "I13"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var IntS "arg1"
                ]
            )
        ,
            ( "I14"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var IntS "arg1"
                ]
            )
        ,
            ( "F39"
            , [ Var IntS "arg1" ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m k [37m&&[0m l [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m k [37m>=[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m l [37m==[0m [37m([0mCons h t[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mk [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m h[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m k [37m>=[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mk [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x24 [37m-[0m x25[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m k [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mk [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m k [37m-[0m x25[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m k [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mk [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m k [37m-[0m [36m1[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m k [37m>=[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mk [37m==[0m [36m0[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m k [37m>=[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "lengthGo"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nothing"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "Maybe" [ VarS "a" ] ) "Nothing" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Just"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Maybe" [ VarS "a" ] ) "Just"
                                                [ Var ( VarS "a" ) "arg0" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "last"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F37" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lastTwo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                            ] [ Var IntS "F38" ]
                                        ) ( BoolLit True ) ( Var IntS "I5" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "at"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F39" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Maybe"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Just"
            , "Many"
            , "Nil"
            , "Nothing"
            , "One"
            , "Singleton"
            , "Tuple"
            , "at"
            , "last"
            , "lastTwo"
            , "length"
            , "lengthGo"
            , "rev"
            , "revGo"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Maybe"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Just"
                        , "Nothing"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Just"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "Maybe"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nothing"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "at"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F39" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "eq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                            ) ( BoolLit True ) ( Var IntS "I33" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I35" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "last"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F37" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "lastTwo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F38" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( DatatypeT "Tuple"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            , ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "length"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                    ] [ Var IntS "F41" ]
                                ) ( BoolLit True ) ( Var IntS "I20" )
                            )
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "lengthGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I17" )
                                )
                                ( ScalarT IntT
                                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            ) 0
                        )
                    )
                )
            ,
                ( "revGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I23" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                        ] [ Var IntS "F43" ]
                                    ) ( BoolLit True ) ( Var IntS "I25" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] [ Var IntS "F44" ]
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                            ] [ Var IntS "F40" ]
                        ) ( BoolLit True ) ( Var IntS "I17" )
                    )
                    ( ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "acc"
            ( Program
                { content = PFun "ls"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "ls"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "acc"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "h"
                                    , "t"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "lengthGo"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "+"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "acc"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "1"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "t"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Lists.sq"
        ( line 48
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I15"
            , []
            )
        ,
            ( "I16"
            ,
                [ Var ( DataS "Nat" [] ) "arg1" ]
            )
        ,
            ( "I17"
            ,
                [ Var ( DataS "Nat" [] ) "arg1" ]
            )
        ,
            ( "I18"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var ( DataS "Nat" [] ) "arg1"
                ]
            )
        ,
            ( "F40"
            ,
                [ Var ( DataS "Nat" [] ) "arg1" ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m acc [37m&&[0m ls [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m acc [37m>=[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mls [37m==[0m [37m([0mCons h t[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0mls [37m==[0m [37m([0mCons h t[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[1m_v[0m [37m==[0m x33 [37m+[0m x34 [37m&&[0m ls [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m acc [37m+[0m x34 [37m&&[0m ls [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m acc [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m acc [37m+[0m [36m1[0m [37m&&[0m ls [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m acc [37m>=[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0mls [37m==[0m [37m([0mCons h t[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mls [37m==[0m [37m([0mCons h t[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "length"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nothing"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "Maybe" [ VarS "a" ] ) "Nothing" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Just"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Maybe" [ VarS "a" ] ) "Just"
                                                [ Var ( VarS "a" ) "arg0" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "last"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F37" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lastTwo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                            ] [ Var IntS "F38" ]
                                        ) ( BoolLit True ) ( Var IntS "I5" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "at"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F39" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Maybe"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lengthGo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                                ] [ Var IntS "F40" ]
                                            ) ( BoolLit True ) ( Var IntS "I17" )
                                        )
                                        ( ScalarT IntT
                                            ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Just"
            , "Many"
            , "Nil"
            , "Nothing"
            , "One"
            , "Singleton"
            , "Tuple"
            , "at"
            , "last"
            , "lastTwo"
            , "length"
            , "lengthGo"
            , "rev"
            , "revGo"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Maybe"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Just"
                        , "Nothing"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Just"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "Maybe"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nothing"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "at"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F39" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "eq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                            ) ( BoolLit True ) ( Var IntS "I33" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I35" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "last"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F37" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "lastTwo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F38" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( DatatypeT "Tuple"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            , ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "length"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                    ] [ Var IntS "F41" ]
                                ) ( BoolLit True ) ( Var IntS "I20" )
                            )
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "lengthGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I17" )
                                )
                                ( ScalarT IntT
                                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            ) 0
                        )
                    )
                )
            ,
                ( "revGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I23" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                        ] [ Var IntS "F43" ]
                                    ) ( BoolLit True ) ( Var IntS "I25" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] [ Var IntS "F44" ]
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                        ] [ Var IntS "F41" ]
                    ) ( BoolLit True ) ( Var IntS "I20" )
                )
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PApp
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PSymbol "lengthGo"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "0"
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                    ( Program
                        { content = PSymbol "l"
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Lists.sq"
        ( line 54
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I19"
            , []
            )
        ,
            ( "I20"
            , []
            )
        ,
            ( "I21"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F41"
            , []
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [1m_v[0m [37m>=[0m [36m0[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [1m_v[0m [37m>=[0m [36m0[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "revGo"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nothing"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "Maybe" [ VarS "a" ] ) "Nothing" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Just"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Maybe" [ VarS "a" ] ) "Just"
                                                [ Var ( VarS "a" ) "arg0" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "last"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F37" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lastTwo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                            ] [ Var IntS "F38" ]
                                        ) ( BoolLit True ) ( Var IntS "I5" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "length"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                            ] [ Var IntS "F41" ]
                                        ) ( BoolLit True ) ( Var IntS "I20" )
                                    )
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "at"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F39" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Maybe"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lengthGo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                                ] [ Var IntS "F40" ]
                                            ) ( BoolLit True ) ( Var IntS "I17" )
                                        )
                                        ( ScalarT IntT
                                            ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Just"
            , "Many"
            , "Nil"
            , "Nothing"
            , "One"
            , "Singleton"
            , "Tuple"
            , "at"
            , "last"
            , "lastTwo"
            , "length"
            , "lengthGo"
            , "rev"
            , "revGo"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Maybe"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Just"
                        , "Nothing"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Just"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "Maybe"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nothing"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "at"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F39" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "eq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                            ) ( BoolLit True ) ( Var IntS "I33" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I35" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "last"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F37" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "lastTwo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F38" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( DatatypeT "Tuple"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            , ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "length"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                    ] [ Var IntS "F41" ]
                                ) ( BoolLit True ) ( Var IntS "I20" )
                            )
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "lengthGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I17" )
                                )
                                ( ScalarT IntT
                                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            ) 0
                        )
                    )
                )
            ,
                ( "revGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I23" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                        ] [ Var IntS "F43" ]
                                    ) ( BoolLit True ) ( Var IntS "I25" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] [ Var IntS "F44" ]
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                        ] [ Var IntS "F42" ]
                    ) ( BoolLit True ) ( Var IntS "I23" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                            ] [ Var IntS "F43" ]
                        ) ( BoolLit True ) ( Var IntS "I25" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                            ] [ Var IntS "F44" ]
                        ) ( BoolLit True ) ( Var IntS "I27" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "acc"
            ( Program
                { content = PFun "ls"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "ls"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "acc"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "h"
                                    , "t"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "revGo"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "Cons"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "h"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "acc"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "t"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Lists.sq"
        ( line 58
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I22"
            , []
            )
        ,
            ( "I23"
            , []
            )
        ,
            ( "I24"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I25"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I26"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I27"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F42"
            , []
            )
        ,
            ( "F43"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F44"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m ls [37m==[0m [37m([0mCons h t[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m ls [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m h [37m&&[0m ls [37m==[0m [37m([0mCons h t[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m ls [37m==[0m [37m([0mCons h t[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mls [37m==[0m [37m([0mCons h t[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mls [37m==[0m [37m([0mCons h t[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "rev"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nothing"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "Maybe" [ VarS "a" ] ) "Nothing" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Just"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Maybe" [ VarS "a" ] ) "Just"
                                                [ Var ( VarS "a" ) "arg0" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "last"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F37" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lastTwo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                            ] [ Var IntS "F38" ]
                                        ) ( BoolLit True ) ( Var IntS "I5" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "length"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                            ] [ Var IntS "F41" ]
                                        ) ( BoolLit True ) ( Var IntS "I20" )
                                    )
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "at"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F39" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Maybe"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lengthGo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                                ] [ Var IntS "F40" ]
                                            ) ( BoolLit True ) ( Var IntS "I17" )
                                        )
                                        ( ScalarT IntT
                                            ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "revGo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                            ] [ Var IntS "F42" ]
                                        ) ( BoolLit True ) ( Var IntS "I23" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                                ] [ Var IntS "F43" ]
                                            ) ( BoolLit True ) ( Var IntS "I25" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                                ] [ Var IntS "F44" ]
                                            ) ( BoolLit True ) ( Var IntS "I27" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Just"
            , "Many"
            , "Nil"
            , "Nothing"
            , "One"
            , "Singleton"
            , "Tuple"
            , "at"
            , "last"
            , "lastTwo"
            , "length"
            , "lengthGo"
            , "rev"
            , "revGo"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Maybe"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Just"
                        , "Nothing"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Just"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "Maybe"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nothing"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "at"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F39" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "eq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                            ) ( BoolLit True ) ( Var IntS "I33" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I35" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "last"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F37" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "lastTwo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F38" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( DatatypeT "Tuple"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            , ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "length"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                    ] [ Var IntS "F41" ]
                                ) ( BoolLit True ) ( Var IntS "I20" )
                            )
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "lengthGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I17" )
                                )
                                ( ScalarT IntT
                                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            ) 0
                        )
                    )
                )
            ,
                ( "revGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I23" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                        ] [ Var IntS "F43" ]
                                    ) ( BoolLit True ) ( Var IntS "I25" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] [ Var IntS "F44" ]
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                        ] [ Var IntS "F45" ]
                    ) ( BoolLit True ) ( Var IntS "I29" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                        ] [ Var IntS "F46" ]
                    ) ( BoolLit True ) ( Var IntS "I31" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PApp
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PSymbol "revGo"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "Nil"
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                    ( Program
                        { content = PSymbol "l"
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Lists.sq"
        ( line 64
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I28"
            , []
            )
        ,
            ( "I29"
            , []
            )
        ,
            ( "I30"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I31"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F45"
            , []
            )
        ,
            ( "F46"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "eq"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nothing"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "Maybe" [ VarS "a" ] ) "Nothing" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Just"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Maybe" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Maybe" [ VarS "a" ] ) "Just"
                                                [ Var ( VarS "a" ) "arg0" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "last"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F37" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lastTwo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                            ] [ Var IntS "F38" ]
                                        ) ( BoolLit True ) ( Var IntS "I5" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Maybe"
                                            [ ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "length"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                            ] [ Var IntS "F41" ]
                                        ) ( BoolLit True ) ( Var IntS "I20" )
                                    )
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "rev"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                            ] [ Var IntS "F45" ]
                                        ) ( BoolLit True ) ( Var IntS "I29" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                            ] [ Var IntS "F46" ]
                                        ) ( BoolLit True ) ( Var IntS "I31" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "at"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F39" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Maybe"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "lengthGo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT IntT
                                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                                ] [ Var IntS "F40" ]
                                            ) ( BoolLit True ) ( Var IntS "I17" )
                                        )
                                        ( ScalarT IntT
                                            ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "revGo"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                            ] [ Var IntS "F42" ]
                                        ) ( BoolLit True ) ( Var IntS "I23" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                                ] [ Var IntS "F43" ]
                                            ) ( BoolLit True ) ( Var IntS "I25" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                                ] [ Var IntS "F44" ]
                                            ) ( BoolLit True ) ( Var IntS "I27" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Just"
            , "Many"
            , "Nil"
            , "Nothing"
            , "One"
            , "Singleton"
            , "Tuple"
            , "at"
            , "last"
            , "lastTwo"
            , "length"
            , "lengthGo"
            , "rev"
            , "revGo"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Maybe"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Just"
                        , "Nothing"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Just"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "Maybe"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nothing"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "Maybe"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "at"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I10" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F39" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Maybe"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "eq"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                            ) ( BoolLit True ) ( Var IntS "I33" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I35" )
                            )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
                        ) 0
                    )
                )
            ,
                ( "last"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F37" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I3" )
                            ) 0
                        )
                    )
                )
            ,
                ( "lastTwo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F38" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "Maybe"
                                    [ ScalarT
                                        ( DatatypeT "Tuple"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            , ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "length"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I19" )
                                    ] [ Var IntS "F41" ]
                                ) ( BoolLit True ) ( Var IntS "I20" )
                            )
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "lengthGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I17" )
                                )
                                ( ScalarT IntT
                                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "rev"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            ) 0
                        )
                    )
                )
            ,
                ( "revGo"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I22" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I23" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I24" )
                                        ] [ Var IntS "F43" ]
                                    ) ( BoolLit True ) ( Var IntS "I25" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] [ Var IntS "F44" ]
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I32" ) ] [ Var IntS "F47" ]
                ) ( BoolLit True ) ( Var IntS "I33" )
            )
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I34" ) ] [ Var IntS "F48" ]
                    ) ( BoolLit True ) ( Var IntS "I35" )
                )
                ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I36" ) ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "l1"
            ( Program
                { content = PFun "l2"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "l1"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PSymbol "l2"
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Nil"
                                            , argNames = []
                                            , expr = Program
                                                { content = PSymbol "True"
                                                , typeOf = AnyT
                                                }
                                            }
                                        , Case
                                            { constructor = "Cons"
                                            , argNames =
                                                [ "x2"
                                                , "x2s"
                                                ]
                                            , expr = Program
                                                { content = PSymbol "False"
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x1"
                                    , "x1s"
                                    ]
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PSymbol "l2"
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Nil"
                                            , argNames = []
                                            , expr = Program
                                                { content = PSymbol "False"
                                                , typeOf = AnyT
                                                }
                                            }
                                        , Case
                                            { constructor = "Cons"
                                            , argNames =
                                                [ "x2"
                                                , "x2s"
                                                ]
                                            , expr = Program
                                                { content = PTick 1
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "&&"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "=="
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "x1"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "x2"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "eq"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "x1s"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "x2s"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Lists.sq"
        ( line 68
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I32"
            , []
            )
        ,
            ( "I33"
            , []
            )
        ,
            ( "I34"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I35"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I36"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F47"
            , []
            )
        ,
            ( "F48"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0ml1 [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0ml1 [37m==[0m [37m([0mCons x1 x1s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x1 [37m&&[0m l1 [37m==[0m [37m([0mCons x1 x1s[37m)[0m[37m)[0m [37m&&[0m l2 [37m==[0m [37m([0mCons x2 x2s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x2 [37m&&[0m l1 [37m==[0m [37m([0mCons x1 x1s[37m)[0m[37m)[0m [37m&&[0m l2 [37m==[0m [37m([0mCons x2 x2s[37m)[0m [37m==>[0m True[37m)[0m UNSAT
last :: <a> . arg0:{List {1**a||I0} <F37>||I1} -> {Maybe {1**a||I2}||I3}
last = \l . 
  match l with
    Nil -> Nothing
    Cons x xs -> 
      match xs with
        Nil -> Just x
        Cons y ys -> tick 1 (last xs)

lastTwo :: <a> . arg0:{List {1**a||I4} <F38>||I5} -> {Maybe {Tuple {1**a||I6} {1**a||I7}||I8}||I9}
lastTwo = \l . 
  match l with
    Nil -> Nothing
    Cons x xs -> 
      match xs with
        Nil -> Nothing
        Cons y ys -> 
          match ys with
            Cons z zs -> tick 1 (lastTwo xs)

at :: <a> . arg1:{Int|_v >= 0|I10} -> arg0:{List {1**a||I11} <F39>||I12} -> {Maybe {1**a||I13}||I14}
at = \k . \l . 
    match l with
      Nil -> Nothing
      Cons h t -> 
        if k == 0
          then tick 1 (Just h)
          else tick 1 (at (k - 1) t)

lengthGo :: <a> . arg1:{Int|_v >= 0|0} -> arg0:{List {1**a||I16} <F40>||I17} -> {Int|_v >= 0|0}
lengthGo = \acc . \ls . 
    match ls with
      Nil -> acc
      Cons h t -> tick 1 (lengthGo
                            (acc + 1) t)

length :: <a> . arg0:{List {1**a||I19} <F41>||I20} -> {Int|_v >= 0|0}
length = \l . lengthGo 0 l

revGo :: <a> . arg1:{List {1**a||I22} <F42>||I23} -> arg0:{List {1**a||I24} <F43>||I25} -> {List {1**a||I26} <F44>||I27}
revGo = \acc . \ls . 
    match ls with
      Nil -> acc
      Cons h t -> tick 1 (revGo (Cons
                                   h acc) t)

rev :: <a> . arg0:{List {1**a||I28} <F45>||I29} -> {List {1**a||I30} <F46>||I31}
rev = \l . revGo Nil l

eq :: arg1:{List {Int||I32} <F47>||I33} -> arg0:{List {Int||I34} <F48>||I35} -> {Bool||I36}
eq = \l1 . \l2 . 
    match l1 with
      Nil -> 
        match l2 with
          Nil -> True
          Cons x2 x2s -> False
      Cons x1 x1s -> 
        match l2 with
          Nil -> False
          Cons x2 x2s -> tick 1 ((x1 ==
                                    x2) && (eq x1s x2s))

last :: <a> . arg0:{List {1**a||0} <1>||0} -> {Maybe {1**a||0}||0} (inferred)
lastTwo :: <a> . arg0:{List {1**a||0} <1>||0} -> {Maybe {Tuple {1**a||0} {1**a||0}||0}||0} (inferred)
at :: <a> . arg1:{Int|_v >= 0|0} -> arg0:{List {1**a||1} <0>||0} -> {Maybe {1**a||0}||0} (inferred)
lengthGo :: <a> . arg1:{Int|_v >= 0|0} -> arg0:{List {1**a||1} <0>||0} -> {Int|_v >= 0|0} (inferred)
length :: <a> . arg0:{List {1**a||1} <0>||0} -> {Int|_v >= 0|0} (inferred)
revGo :: <a> . arg1:{List {1**a||0} <0>||0} -> arg0:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
rev :: <a> . arg0:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
eq :: arg1:{List {Int||0} <0>||0} -> arg0:{List {Int||1} <0>||0} -> {Bool||0} (inferred)
Goal
    { gName = "empty"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "Tuple"
            , "empty"
            , "enqueue"
            , "enqueues"
            , "enqueuesInline"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "empty"
                , ForallT "a"
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "Tuple"
                                [ ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                , ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F41" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                ] []
                            ) ( BoolLit True ) ( Var IntS "I4" )
                        )
                    )
                )
            ,
                ( "enqueue"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                ] [ Var IntS "F42" ]
                                            ) ( BoolLit True ) ( Var IntS "I7" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                ] [ Var IntS "F43" ]
                                            ) ( BoolLit True ) ( Var IntS "I9" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I10" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F44" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] [ Var IntS "F45" ]
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I15" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "enqueues"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F51" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                                ] [ Var IntS "F52" ]
                                            ) ( BoolLit True ) ( Var IntS "I31" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I32" )
                                                ] [ Var IntS "F53" ]
                                            ) ( BoolLit True ) ( Var IntS "I33" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I34" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I35" )
                                                ] [ Var IntS "F54" ]
                                            ) ( BoolLit True ) ( Var IntS "I36" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I37" )
                                                ] [ Var IntS "F55" ]
                                            ) ( BoolLit True ) ( Var IntS "I38" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I39" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "enqueuesInline"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I17" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                                ] [ Var IntS "F47" ]
                                            ) ( BoolLit True ) ( Var IntS "I19" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                                ] [ Var IntS "F48" ]
                                            ) ( BoolLit True ) ( Var IntS "I21" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I22" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I23" )
                                                ] [ Var IntS "F49" ]
                                            ) ( BoolLit True ) ( Var IntS "I24" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I25" )
                                                ] [ Var IntS "F50" ]
                                            ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( ScalarT
                ( DatatypeT "Tuple"
                    [ ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            ] [ Var IntS "F40" ]
                        ) ( BoolLit True ) ( Var IntS "I1" )
                    , ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                            ] [ Var IntS "F41" ]
                        ) ( BoolLit True ) ( Var IntS "I3" )
                    ] []
                ) ( BoolLit True ) ( Var IntS "I4" )
            )
        )
    , gImpl = Program
        { content = PApp
            ( Program
                { content = PApp
                    ( Program
                        { content = PSymbol "Tuple"
                        , typeOf = AnyT
                        }
                    )
                    ( Program
                        { content = PSymbol "Nil"
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
            ( Program
                { content = PSymbol "Nil"
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Queue.sq"
        ( line 9
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            , []
            )
        ,
            ( "I3"
            , []
            )
        ,
            ( "I4"
            , []
            )
        ,
            ( "F40"
            , []
            )
        ,
            ( "F41"
            , []
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "enqueue"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "empty"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                                ] [ Var IntS "F40" ]
                                            ) ( BoolLit True ) ( Var IntS "I1" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F41" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "Tuple"
            , "empty"
            , "enqueue"
            , "enqueues"
            , "enqueuesInline"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "empty"
                , ForallT "a"
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "Tuple"
                                [ ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                , ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F41" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                ] []
                            ) ( BoolLit True ) ( Var IntS "I4" )
                        )
                    )
                )
            ,
                ( "enqueue"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                ] [ Var IntS "F42" ]
                                            ) ( BoolLit True ) ( Var IntS "I7" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                ] [ Var IntS "F43" ]
                                            ) ( BoolLit True ) ( Var IntS "I9" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I10" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F44" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] [ Var IntS "F45" ]
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I15" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "enqueues"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F51" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                                ] [ Var IntS "F52" ]
                                            ) ( BoolLit True ) ( Var IntS "I31" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I32" )
                                                ] [ Var IntS "F53" ]
                                            ) ( BoolLit True ) ( Var IntS "I33" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I34" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I35" )
                                                ] [ Var IntS "F54" ]
                                            ) ( BoolLit True ) ( Var IntS "I36" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I37" )
                                                ] [ Var IntS "F55" ]
                                            ) ( BoolLit True ) ( Var IntS "I38" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I39" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "enqueuesInline"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I17" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                                ] [ Var IntS "F47" ]
                                            ) ( BoolLit True ) ( Var IntS "I19" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                                ] [ Var IntS "F48" ]
                                            ) ( BoolLit True ) ( Var IntS "I21" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I22" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I23" )
                                                ] [ Var IntS "F49" ]
                                            ) ( BoolLit True ) ( Var IntS "I24" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I25" )
                                                ] [ Var IntS "F50" ]
                                            ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "Tuple"
                            [ ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F42" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            , ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F43" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I10" )
                    )
                    ( ScalarT
                        ( DatatypeT "Tuple"
                            [ ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                    ] [ Var IntS "F44" ]
                                ) ( BoolLit True ) ( Var IntS "I12" )
                            , ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                    ] [ Var IntS "F45" ]
                                ) ( BoolLit True ) ( Var IntS "I14" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I15" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "q"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "q"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Tuple"
                                , argNames =
                                    [ "inq"
                                    , "outq"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Tuple"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "Cons"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "x"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "inq"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "outq"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Queue.sq"
        ( line 12
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I5"
            , []
            )
        ,
            ( "I6"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "I7"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "I8"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "I9"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "I10"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "I11"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var ( VarS "a" ) "arg1"
                ]
            )
        ,
            ( "I12"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var ( VarS "a" ) "arg1"
                ]
            )
        ,
            ( "I13"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var ( VarS "a" ) "arg1"
                ]
            )
        ,
            ( "I14"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var ( VarS "a" ) "arg1"
                ]
            )
        ,
            ( "I15"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var ( VarS "a" ) "arg1"
                ]
            )
        ,
            ( "F42"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "F43"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "F44"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var ( VarS "a" ) "arg1"
                ]
            )
        ,
            ( "F45"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var ( VarS "a" ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x11 x12[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x x12[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mq [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons x inq[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m outq [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mq [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "enqueuesInline"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "empty"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                                ] [ Var IntS "F40" ]
                                            ) ( BoolLit True ) ( Var IntS "I1" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F41" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "enqueue"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                        ] [ Var IntS "F42" ]
                                                    ) ( BoolLit True ) ( Var IntS "I7" )
                                                , ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                        ] [ Var IntS "F43" ]
                                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I10" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                        ] [ Var IntS "F44" ]
                                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                                , ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                        ] [ Var IntS "F45" ]
                                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I15" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "Tuple"
            , "empty"
            , "enqueue"
            , "enqueues"
            , "enqueuesInline"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "empty"
                , ForallT "a"
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "Tuple"
                                [ ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                , ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F41" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                ] []
                            ) ( BoolLit True ) ( Var IntS "I4" )
                        )
                    )
                )
            ,
                ( "enqueue"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                ] [ Var IntS "F42" ]
                                            ) ( BoolLit True ) ( Var IntS "I7" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                ] [ Var IntS "F43" ]
                                            ) ( BoolLit True ) ( Var IntS "I9" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I10" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F44" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] [ Var IntS "F45" ]
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I15" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "enqueues"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F51" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                                ] [ Var IntS "F52" ]
                                            ) ( BoolLit True ) ( Var IntS "I31" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I32" )
                                                ] [ Var IntS "F53" ]
                                            ) ( BoolLit True ) ( Var IntS "I33" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I34" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I35" )
                                                ] [ Var IntS "F54" ]
                                            ) ( BoolLit True ) ( Var IntS "I36" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I37" )
                                                ] [ Var IntS "F55" ]
                                            ) ( BoolLit True ) ( Var IntS "I38" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I39" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "enqueuesInline"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I17" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                                ] [ Var IntS "F47" ]
                                            ) ( BoolLit True ) ( Var IntS "I19" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                                ] [ Var IntS "F48" ]
                                            ) ( BoolLit True ) ( Var IntS "I21" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I22" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I23" )
                                                ] [ Var IntS "F49" ]
                                            ) ( BoolLit True ) ( Var IntS "I24" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I25" )
                                                ] [ Var IntS "F50" ]
                                            ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                        ] [ Var IntS "F46" ]
                    ) ( BoolLit True ) ( Var IntS "I17" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "Tuple"
                            [ ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                    ] [ Var IntS "F47" ]
                                ) ( BoolLit True ) ( Var IntS "I19" )
                            , ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                    ] [ Var IntS "F48" ]
                                ) ( BoolLit True ) ( Var IntS "I21" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I22" )
                    )
                    ( ScalarT
                        ( DatatypeT "Tuple"
                            [ ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I23" )
                                    ] [ Var IntS "F49" ]
                                ) ( BoolLit True ) ( Var IntS "I24" )
                            , ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I25" )
                                    ] [ Var IntS "F50" ]
                                ) ( BoolLit True ) ( Var IntS "I26" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I27" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PFun "q"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "l"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "q"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PSymbol "q"
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Tuple"
                                            , argNames =
                                                [ "inq"
                                                , "outq"
                                                ]
                                            , expr = Program
                                                { content = PTick 1
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "enqueuesInline"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "xs"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PTick 1
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "Tuple"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PApp
                                                                                                    ( Program
                                                                                                        { content = PSymbol "Cons"
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                    ( Program
                                                                                                        { content = PSymbol "x"
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "inq"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "outq"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Queue.sq"
        ( line 18
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I16"
            , []
            )
        ,
            ( "I17"
            , []
            )
        ,
            ( "I18"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I19"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I20"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I21"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I22"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I23"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I24"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I25"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I26"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I27"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F46"
            , []
            )
        ,
            ( "F47"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F48"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F49"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F50"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x25 x26[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x x26[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons x inq[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m outq [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m q [37m==[0m [37m([0mTuple inq outq[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "enqueues"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "empty"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                                ] [ Var IntS "F40" ]
                                            ) ( BoolLit True ) ( Var IntS "I1" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F41" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "enqueue"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                        ] [ Var IntS "F42" ]
                                                    ) ( BoolLit True ) ( Var IntS "I7" )
                                                , ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                        ] [ Var IntS "F43" ]
                                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I10" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                        ] [ Var IntS "F44" ]
                                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                                , ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                        ] [ Var IntS "F45" ]
                                                    ) ( BoolLit True ) ( Var IntS "I14" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I15" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "enqueuesInline"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                            ] [ Var IntS "F46" ]
                                        ) ( BoolLit True ) ( Var IntS "I17" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                                        ] [ Var IntS "F47" ]
                                                    ) ( BoolLit True ) ( Var IntS "I19" )
                                                , ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                                        ] [ Var IntS "F48" ]
                                                    ) ( BoolLit True ) ( Var IntS "I21" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I22" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I23" )
                                                        ] [ Var IntS "F49" ]
                                                    ) ( BoolLit True ) ( Var IntS "I24" )
                                                , ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I25" )
                                                        ] [ Var IntS "F50" ]
                                                    ) ( BoolLit True ) ( Var IntS "I26" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I27" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "Tuple"
            , "empty"
            , "enqueue"
            , "enqueues"
            , "enqueuesInline"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "empty"
                , ForallT "a"
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "Tuple"
                                [ ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                        ] [ Var IntS "F40" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                , ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F41" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                ] []
                            ) ( BoolLit True ) ( Var IntS "I4" )
                        )
                    )
                )
            ,
                ( "enqueue"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                                ] [ Var IntS "F42" ]
                                            ) ( BoolLit True ) ( Var IntS "I7" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                ] [ Var IntS "F43" ]
                                            ) ( BoolLit True ) ( Var IntS "I9" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I10" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                                ] [ Var IntS "F44" ]
                                            ) ( BoolLit True ) ( Var IntS "I12" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                                ] [ Var IntS "F45" ]
                                            ) ( BoolLit True ) ( Var IntS "I14" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I15" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "enqueues"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                                    ] [ Var IntS "F51" ]
                                ) ( BoolLit True ) ( Var IntS "I29" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                                ] [ Var IntS "F52" ]
                                            ) ( BoolLit True ) ( Var IntS "I31" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I32" )
                                                ] [ Var IntS "F53" ]
                                            ) ( BoolLit True ) ( Var IntS "I33" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I34" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I35" )
                                                ] [ Var IntS "F54" ]
                                            ) ( BoolLit True ) ( Var IntS "I36" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I37" )
                                                ] [ Var IntS "F55" ]
                                            ) ( BoolLit True ) ( Var IntS "I38" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I39" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "enqueuesInline"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I16" )
                                    ] [ Var IntS "F46" ]
                                ) ( BoolLit True ) ( Var IntS "I17" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I18" )
                                                ] [ Var IntS "F47" ]
                                            ) ( BoolLit True ) ( Var IntS "I19" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I20" )
                                                ] [ Var IntS "F48" ]
                                            ) ( BoolLit True ) ( Var IntS "I21" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I22" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tuple"
                                        [ ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I23" )
                                                ] [ Var IntS "F49" ]
                                            ) ( BoolLit True ) ( Var IntS "I24" )
                                        , ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I25" )
                                                ] [ Var IntS "F50" ]
                                            ) ( BoolLit True ) ( Var IntS "I26" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I27" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I28" )
                        ] [ Var IntS "F51" ]
                    ) ( BoolLit True ) ( Var IntS "I29" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "Tuple"
                            [ ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I30" )
                                    ] [ Var IntS "F52" ]
                                ) ( BoolLit True ) ( Var IntS "I31" )
                            , ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I32" )
                                    ] [ Var IntS "F53" ]
                                ) ( BoolLit True ) ( Var IntS "I33" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I34" )
                    )
                    ( ScalarT
                        ( DatatypeT "Tuple"
                            [ ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I35" )
                                    ] [ Var IntS "F54" ]
                                ) ( BoolLit True ) ( Var IntS "I36" )
                            , ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I37" )
                                    ] [ Var IntS "F55" ]
                                ) ( BoolLit True ) ( Var IntS "I38" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I39" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PFun "q"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "l"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "q"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "enqueues"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "xs"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "enqueue"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "q"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Queue.sq"
        ( line 27
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I28"
            , []
            )
        ,
            ( "I29"
            , []
            )
        ,
            ( "I30"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I31"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I32"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I33"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I34"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I35"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I36"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I37"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I38"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I39"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F51"
            , []
            )
        ,
            ( "F52"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F53"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F54"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F55"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ DataS "List" [ VarS "a" ]
                        , DataS "List" [ VarS "a" ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
empty :: <a> . {Tuple {List {1**a||I0} <F40>||I1} {List {1**a||I2} <F41>||I3}||I4}
empty = Tuple Nil Nil

enqueue :: <a> . arg1:{1**a||I5} -> arg0:{Tuple {List {1**a||I6} <F42>||I7} {List {1**a||I8} <F43>||I9}||I10} -> {Tuple {List {1**a||I11} <F44>||I12} {List {1**a||I13} <F45>||I14}||I15}
enqueue = \x . \q . 
    match q with
      Tuple inq outq -> tick 1 (Tuple
                                  (Cons x inq) outq)

enqueuesInline :: <a> . arg1:{List {1**a||I16} <F46>||I17} -> arg0:{Tuple {List {1**a||I18} <F47>||I19} {List {1**a||I20} <F48>||I21}||I22} -> {Tuple {List {1**a||I23} <F49>||I24} {List {1**a||I25} <F50>||I26}||I27}
enqueuesInline = \l . \q . 
    match l with
      Nil -> q
      Cons x xs -> 
        match q with
          Tuple inq outq ->
            tick 1 (enqueuesInline xs
                      (tick 1 (Tuple (Cons x inq)
                                 outq)))

enqueues :: <a> . arg1:{List {1**a||I28} <F51>||I29} -> arg0:{Tuple {List {1**a||I30} <F52>||I31} {List {1**a||I32} <F53>||I33}||I34} -> {Tuple {List {1**a||I35} <F54>||I36} {List {1**a||I37} <F55>||I38}||I39}
enqueues = \l . \q . 
    match l with
      Nil -> q
      Cons x xs -> tick 1 (enqueues xs
                             (enqueue x q))

empty :: <a> . {Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} (inferred)
enqueue :: <a> . arg1:{1**a||0} -> arg0:{Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||1} -> {Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} (inferred)
enqueuesInline :: <a> . arg1:{List {1**a||2} <0>||0} -> arg0:{Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} -> {Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} (inferred)
enqueues :: <a> . arg1:{List {1**a||2} <0>||0} -> arg0:{Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} -> {Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} (inferred)
Goal
    { gName = "addOne"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , Monotype
                            ( ScalarT ( DatatypeT "Bin" [] [] )
                                ( Binary Eq
                                    ( Var ( DataS "Bin" [] ) "_v" )
                                    ( Cons ( DataS "Bin" [] ) "One" [] )
                                ) ( IntLit 0 )
                            )
                        )
                    ,
                        ( "Zero"
                        , Monotype
                            ( ScalarT ( DatatypeT "Bin" [] [] )
                                ( Binary Eq
                                    ( Var ( DataS "Bin" [] ) "_v" )
                                    ( Cons ( DataS "Bin" [] ) "Zero" [] )
                                ) ( IntLit 0 )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "Bin"
                , DatatypeDef
                    { _typeParams = []
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Zero"
                        , "One"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "One"
                , Monotype
                    ( ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( IntLit 0 ) )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Zero"
                , Monotype
                    ( ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( IntLit 0 ) )
                )
            ,
                ( "addMany"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F11" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I7" ) ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "addOne"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F9" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I2" ) ] [ Var IntS "F10" ]
                            ) ( BoolLit True ) ( Var IntS "I3" )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg0"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F9" ]
                ) ( BoolLit True ) ( Var IntS "I1" )
            )
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I2" ) ] [ Var IntS "F10" ]
                ) ( BoolLit True ) ( Var IntS "I3" )
            ) 0
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "l"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "Cons"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "One"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PSymbol "Nil"
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "b"
                            , "bs"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PSymbol "b"
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Zero"
                                    , argNames = []
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "Cons"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "One"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "bs"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                , Case
                                    { constructor = "One"
                                    , argNames = []
                                    , expr = Program
                                        { content = PTick 1
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Cons"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "Zero"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "addOne"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "bs"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BinaryCounter.sq"
        ( line 12
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ DataS "Bin" [] ] ) "arg0"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ DataS "Bin" [] ] ) "arg0"
                ]
            )
        ,
            ( "F9"
            , []
            )
        ,
            ( "F10"
            ,
                [ Var
                    ( DataS "List" [ DataS "Bin" [] ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mOne[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mOne[37m)[0m [37m&&[0m b [37m==[0m [37m([0mZero[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons b bs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb [37m==[0m [37m([0mZero[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons b bs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mZero[37m)[0m [37m&&[0m b [37m==[0m [37m([0mOne[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons b bs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mb [37m==[0m [37m([0mOne[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons b bs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "addMany"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , Monotype
                            ( ScalarT ( DatatypeT "Bin" [] [] )
                                ( Binary Eq
                                    ( Var ( DataS "Bin" [] ) "_v" )
                                    ( Cons ( DataS "Bin" [] ) "One" [] )
                                ) ( IntLit 0 )
                            )
                        )
                    ,
                        ( "Zero"
                        , Monotype
                            ( ScalarT ( DatatypeT "Bin" [] [] )
                                ( Binary Eq
                                    ( Var ( DataS "Bin" [] ) "_v" )
                                    ( Cons ( DataS "Bin" [] ) "Zero" [] )
                                ) ( IntLit 0 )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "addOne"
                        , Monotype
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F9" ]
                                    ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I2" ) ] [ Var IntS "F10" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                ) 0
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "Bin"
                , DatatypeDef
                    { _typeParams = []
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Zero"
                        , "One"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList
            [
                ( "Nat"
                ,
                    ( []
                    , ScalarT IntT
                        ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                    )
                )
            ]
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "One"
                , Monotype
                    ( ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( IntLit 0 ) )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Zero"
                , Monotype
                    ( ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( IntLit 0 ) )
                )
            ,
                ( "addMany"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F11" ]
                            ) ( BoolLit True ) ( Var IntS "I5" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I7" ) ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "addOne"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F9" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I2" ) ] [ Var IntS "F10" ]
                            ) ( BoolLit True ) ( Var IntS "I3" )
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I4" ) ] [ Var IntS "F11" ]
                ) ( BoolLit True ) ( Var IntS "I5" )
            )
            ( FunctionT "arg0"
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( IntLit 0 )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT ( DatatypeT "Bin" [] [] ) ( BoolLit True ) ( Var IntS "I7" ) ] [ Var IntS "F12" ]
                    ) ( BoolLit True ) ( Var IntS "I8" )
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PFun "n"
                    ( Program
                        { content = PIf
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "=="
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "n"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PSymbol "0"
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "l"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "addMany"
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "addOne"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "l"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "-"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "n"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "1"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-BinaryCounter.sq"
        ( line 34
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I4"
            , []
            )
        ,
            ( "I5"
            , []
            )
        ,
            ( "I6"
            ,
                [ Var
                    ( DataS "List" [ DataS "Bin" [] ] ) "arg1"
                ]
            )
        ,
            ( "I7"
            ,
                [ Var ( DataS "Nat" [] ) "arg0"
                , Var
                    ( DataS "List" [ DataS "Bin" [] ] ) "arg1"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var ( DataS "Nat" [] ) "arg0"
                , Var
                    ( DataS "List" [ DataS "Bin" [] ] ) "arg1"
                ]
            )
        ,
            ( "F11"
            , []
            )
        ,
            ( "F12"
            ,
                [ Var ( DataS "Nat" [] ) "arg0"
                , Var
                    ( DataS "List" [ DataS "Bin" [] ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m n [37m&&[0m n [37m>=[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mn [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x28 [37m-[0m x29[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mn [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m n [37m-[0m x29[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mn [37m==[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m n [37m-[0m [36m1[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
addOne :: arg0:{List {Bin||I0} <F9>||I1} -> {List {Bin||I2} <F10>||I3}
addOne = \l . 
  match l with
    Nil -> Cons One Nil
    Cons b bs -> 
      match b with
        Zero -> Cons One bs
        One -> tick 1 (Cons Zero (addOne
                                    bs))

addMany :: arg1:{List {Bin||I4} <F11>||I5} -> arg0:{Int|_v >= 0|0} -> {List {Bin||I7} <F12>||I8}
addMany = \l . \n . 
    if n == 0
      then l
      else addMany (addOne l) (n - 1)

addOne :: arg0:{List {Bin||1} <1>||0} -> {List {Bin||1} <1>||0} (inferred)
addMany :: arg1:{List {Bin||1} <1>||0} -> arg0:{Int|_v >= 0|0} -> {List {Bin||0} <0>||0} (inferred)
Goal
    { gName = "example"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Many"
            , "Nil"
            , "One"
            , "Singleton"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "compress"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ] [ Var IntS "F9" ]
                            ) ( BoolLit True ) ( Var IntS "I4" )
                        )
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I5" ) ] [ Var IntS "F10" ]
                            ) ( BoolLit True ) ( Var IntS "I6" )
                        ) 0
                    )
                )
            ,
                ( "example"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F7" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            ] [ Var IntS "F8" ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( ScalarT
            ( DatatypeT "List"
                [ ScalarT
                    ( DatatypeT "Node"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F7" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                ] [ Var IntS "F8" ]
            ) ( BoolLit True ) ( Var IntS "I2" )
        )
    , gImpl = Program
        { content = PApp
            ( Program
                { content = PApp
                    ( Program
                        { content = PSymbol "Cons"
                        , typeOf = AnyT
                        }
                    )
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PSymbol "One"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "1"
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
            ( Program
                { content = PApp
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PSymbol "Cons"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PSymbol "Many"
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "Cons"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "One"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "2"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Cons"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Many"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "Cons"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PSymbol "One"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "3"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PSymbol "Cons"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PApp
                                                                                                    ( Program
                                                                                                        { content = PSymbol "One"
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                    ( Program
                                                                                                        { content = PSymbol "4"
                                                                                                        , typeOf = AnyT
                                                                                                        }
                                                                                                    )
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "Nil"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "One"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "5"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "Nil"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                    ( Program
                        { content = PSymbol "Nil"
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Compress.sq"
        ( line 12
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            , []
            )
        ,
            ( "F7"
            , []
            )
        ,
            ( "F8"
            , []
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mOne x5[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m1[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mOne [36m1[0m[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mMany x11[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mOne x17[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m2[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mOne [36m2[0m[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mMany x23[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mOne x29[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m3[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mOne [36m3[0m[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mOne x35[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m4[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mOne [36m4[0m[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mx23 [37m==[0m [37m([0mCons x26 x27[37m)[0m [37m&&[0m x27 [37m==[0m [37m([0mCons x32 [37m([0mNil[37m)[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mMany x23[37m)[0m[37m)[0m [37m&&[0m x26 [37m==[0m [37m([0mOne [36m3[0m[37m)[0m[37m)[0m [37m&&[0m x32 [37m==[0m [37m([0mOne [36m4[0m[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mOne x41[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m5[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mOne [36m5[0m[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mx11 [37m==[0m [37m([0mCons x14 x15[37m)[0m [37m&&[0m x15 [37m==[0m [37m([0mCons x20 x21[37m)[0m[37m)[0m [37m&&[0m x21 [37m==[0m [37m([0mCons x38 [37m([0mNil[37m)[0m[37m)[0m[37m)[0m [37m&&[0m x23 [37m==[0m [37m([0mCons x26 x27[37m)[0m[37m)[0m [37m&&[0m x27 [37m==[0m [37m([0mCons x32 [37m([0mNil[37m)[0m[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mMany x11[37m)[0m[37m)[0m [37m&&[0m x14 [37m==[0m [37m([0mOne [36m2[0m[37m)[0m[37m)[0m [37m&&[0m x20 [37m==[0m [37m([0mMany x23[37m)[0m[37m)[0m [37m&&[0m x26 [37m==[0m [37m([0mOne [36m3[0m[37m)[0m[37m)[0m [37m&&[0m x32 [37m==[0m [37m([0mOne [36m4[0m[37m)[0m[37m)[0m [37m&&[0m x38 [37m==[0m [37m([0mOne [36m5[0m[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "compress"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "example"
                        , Monotype
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F7" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    ] [ Var IntS "F8" ]
                                ) ( BoolLit True ) ( Var IntS "I2" )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Many"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( DatatypeT "Node"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "Many"
                                                    [ Var
                                                        ( DataS "List"
                                                            [ DataS "Node" [ VarS "a" ] ]
                                                        ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "One"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Node"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Node" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Node" [ VarS "a" ] ) "One"
                                                    [ Var ( VarS "a" ) "arg0" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Many"
            , "Nil"
            , "One"
            , "Singleton"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Node"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "One"
                        , "Many"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Many"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Node"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "One"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "compress"
                , Monotype
                    ( FunctionT "arg0"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ] [ Var IntS "F9" ]
                            ) ( BoolLit True ) ( Var IntS "I4" )
                        )
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I5" ) ] [ Var IntS "F10" ]
                            ) ( BoolLit True ) ( Var IntS "I6" )
                        ) 0
                    )
                )
            ,
                ( "example"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( DatatypeT "Node"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F7" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            ] [ Var IntS "F8" ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg0"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ] [ Var IntS "F9" ]
                ) ( BoolLit True ) ( Var IntS "I4" )
            )
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I5" ) ] [ Var IntS "F10" ]
                ) ( BoolLit True ) ( Var IntS "I6" )
            ) 0
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "l"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PSymbol "xs"
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Nil"
                                    , argNames = []
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "Cons"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "x"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "Nil"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                , Case
                                    { constructor = "Cons"
                                    , argNames =
                                        [ "y"
                                        , "ys"
                                        ]
                                    , expr = Program
                                        { content = PIf
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "=="
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "x"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "y"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PTick 1
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "compress"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "xs"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PTick 1
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "x"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "compress"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "xs"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/RAML-Compress.sq"
        ( line 18
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I3"
            , []
            )
        ,
            ( "I4"
            , []
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                ]
            )
        ,
            ( "I6"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                ]
            )
        ,
            ( "F9"
            , []
            )
        ,
            ( "F10"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m==[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m==[0m y[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
example :: {List {Node {Int||I0} <F7>||I1} <F8>||I2}
example = Cons (One 1) (Cons
                          (Many (Cons (One 2) (Cons (Many
                                                       (Cons (One 3) (Cons (One
                                                                              4)
                                                                        Nil)))
                                                 (Cons (One 5) Nil)))) Nil)

compress :: arg0:{List {Int||I3} <F9>||I4} -> {List {Int||I5} <F10>||I6}
compress = \l . 
  match l with
    Nil -> Nil
    Cons x xs -> 
      match xs with
        Nil -> Cons x Nil
        Cons y ys -> 
          if x == y
            then tick 1 (compress xs)
            else tick 1 (Cons x (compress
                                   xs))

example :: {List {Node {Int||0} <0>||0} <0>||0} (inferred)
compress :: arg0:{List {Int||0} <1>||0} -> {List {Int||0} <0>||0} (inferred)
Goal
    { gName = "elem"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "elem"
            , "nub"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "elem"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F8" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "nub"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F9" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F10" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ] [ Var IntS "F8" ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "False"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "=="
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "True"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "elem"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Nub.sq"
        ( line 6
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var ( VarS "a" ) "arg1"
                ]
            )
        ,
            ( "F8"
            ,
                [ Var ( VarS "a" ) "arg1" ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m==[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==[0m [37m([0mx [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "nub"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "elem"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F8" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "elem"
            , "nub"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "elem"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F8" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "nub"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] [ Var IntS "F9" ]
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F10" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                        ] [ Var IntS "F9" ]
                    ) ( BoolLit True ) ( Var IntS "I5" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                        ] [ Var IntS "F10" ]
                    ) ( BoolLit True ) ( Var IntS "I7" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PIf
                                ( Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "elem"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "ys"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "nub"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "ys"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "nub"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Nub.sq"
        ( line 15
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I4"
            , []
            )
        ,
            ( "I5"
            , []
            )
        ,
            ( "I6"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F9"
            , []
            )
        ,
            ( "F10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
elem :: <a> . arg1:{1**a||I0} -> arg0:{List {1**a||I1} <F8>||I2} -> {Bool||I3}
elem = \x . \xs . 
    match xs with
      Nil -> False
      Cons y ys -> 
        if x == y
          then True
          else tick 1 (elem x ys)

nub :: <a> . arg0:{List {1**a||I4} <F9>||I5} -> {List {1**a||I6} <F10>||I7}
nub = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> 
      if tick 1 (elem y ys)
        then tick 1 (nub ys)
        else Cons y (tick 1 (nub ys))

elem :: <a> . arg1:{1**a||0} -> arg0:{List {1**a||1} <0>||0} -> {Bool||0} (inferred)
nub :: <a> . arg0:{List {1**a||2} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
Goal
    { gName = "flatten'"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Tree" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Tree" [ VarS "a" ] ) "Leaf" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "l"
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( FunctionT "r"
                                                ( ScalarT
                                                    ( DatatypeT "Tree"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                )
                                                ( ScalarT
                                                    ( DatatypeT "Tree"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    )
                                                    ( Binary Eq
                                                        ( Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                        )
                                                        ( Cons
                                                            ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                            [ Var ( VarS "a" ) "x"
                                                            , Var
                                                                ( DataS "Tree" [ VarS "a" ] ) "l"
                                                            , Var
                                                                ( DataS "Tree" [ VarS "a" ] ) "r"
                                                            ]
                                                        )
                                                    ) ( IntLit 0 )
                                                ) 0
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Leaf"
            , "Nil"
            , "Node"
            , "Singleton"
            , "flatten"
            , "flatten'"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "Tree"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "l"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( FunctionT "r"
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ) 0
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "flatten"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F13" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F14" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 1
                        )
                    )
                )
            ,
                ( "flatten'"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F10" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F11" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F12" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 1
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "Tree"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] [ Var IntS "F10" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                            ] [ Var IntS "F11" ]
                        ) ( BoolLit True ) ( Var IntS "I3" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            ] [ Var IntS "F12" ]
                        ) ( BoolLit True ) ( Var IntS "I5" )
                    ) 1
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "t"
            ( Program
                { content = PFun "acc"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "t"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Leaf"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "acc"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Node"
                                , argNames =
                                    [ "x"
                                    , "l"
                                    , "r"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "flatten'"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "l"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "flatten'"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "r"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "acc"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Quick-Flatten.sq"
        ( line 10
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F10"
            , []
            )
        ,
            ( "F11"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mt [37m==[0m [37m([0mNode x l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m t [37m==[0m [37m([0mNode x l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m t [37m==[0m [37m([0mNode x l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m t [37m==[0m [37m([0mNode x l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mt [37m==[0m [37m([0mNode x l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode x l r[37m)[0m[37m)[0m [37m&&[0m True SAT
Goal
    { gName = "flatten"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "Tree" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "Tree" [ VarS "a" ] ) "Leaf" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "flatten'"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F10" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F11" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] [ Var IntS "F12" ]
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 1
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "l"
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( FunctionT "r"
                                                ( ScalarT
                                                    ( DatatypeT "Tree"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                        ] [ Pred IntS "q" [] ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                )
                                                ( ScalarT
                                                    ( DatatypeT "Tree"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ] [ Pred IntS "q" [] ]
                                                    )
                                                    ( Binary Eq
                                                        ( Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                        )
                                                        ( Cons
                                                            ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                            [ Var ( VarS "a" ) "x"
                                                            , Var
                                                                ( DataS "Tree" [ VarS "a" ] ) "l"
                                                            , Var
                                                                ( DataS "Tree" [ VarS "a" ] ) "r"
                                                            ]
                                                        )
                                                    ) ( IntLit 0 )
                                                ) 0
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Leaf"
            , "Nil"
            , "Node"
            , "Singleton"
            , "flatten"
            , "flatten'"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "Tree"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "l"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( FunctionT "r"
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred AnyS "q" [] ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    ) 0
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "flatten"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F13" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F14" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 1
                        )
                    )
                )
            ,
                ( "flatten'"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F10" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F11" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F12" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 1
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "Tree"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                        ] [ Var IntS "F13" ]
                    ) ( BoolLit True ) ( Var IntS "I7" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                        ] [ Var IntS "F14" ]
                    ) ( BoolLit True ) ( Var IntS "I9" )
                ) 1
            )
        )
    , gImpl = Program
        { content = PFun "t"
            ( Program
                { content = PApp
                    ( Program
                        { content = PApp
                            ( Program
                                { content = PSymbol "flatten'"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "t"
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                    ( Program
                        { content = PSymbol "Nil"
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Quick-Flatten.sq"
        ( line 16
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I6"
            , []
            )
        ,
            ( "I7"
            , []
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F13"
            , []
            )
        ,
            ( "F14"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
flatten' :: <a> . arg1:{Tree {1**a||I0} <F10>||I1} -> arg0:{List {1**a||I2} <F11>||I3} -[1]-> {List {1**a||I4} <F12>||I5}
flatten' = \t . \acc . 
    match t with
      Leaf -> acc
      Node x l r -> flatten' l (Cons x
                                  (flatten' r acc))

flatten :: <a> . arg0:{Tree {1**a||I6} <F13>||I7} -[1]-> {List {1**a||I8} <F14>||I9}
flatten = \t . flatten' t Nil

flatten' :: <a> . arg1:{Tree {1**a||2} <0>||0} -> arg0:{List {1**a||0} <0>||0} -[1]-> {List {1**a||0} <0>||0} (inferred)
flatten :: <a> . arg0:{Tree {1**a||2} <0>||1} -[1]-> {List {1**a||0} <0>||0} (inferred)
Goal
    { gName = "treeInsert"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( ForallP
                                    ( PredSig
                                        { predSigName = "p"
                                        , predSigArgSorts = [ VarS "a" ]
                                        , predSigResSort = BoolS
                                        }
                                    )
                                    ( Monotype
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ]
                                                [ Pred BoolS "p"
                                                    [ Var ( VarS "a" ) "_0" ]
                                                , Pred IntS "q" []
                                                ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Tree" [ VarS "a" ] ) "Leaf" []
                                                )
                                            ) ( IntLit 0 )
                                        )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( ForallP
                                    ( PredSig
                                        { predSigName = "p"
                                        , predSigArgSorts = [ VarS "a" ]
                                        , predSigResSort = BoolS
                                        }
                                    )
                                    ( Monotype
                                        ( FunctionT "x"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                            )
                                            ( FunctionT "l"
                                                ( ScalarT
                                                    ( DatatypeT "Tree"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ]
                                                        [ Pred BoolS "p"
                                                            [ Var ( VarS "a" ) "_0" ]
                                                        , Ite
                                                            ( Pred BoolS "p"
                                                                [ Var ( VarS "a" ) "x" ]
                                                            ) ( Pred IntS "q" [] ) ( IntLit 0 )
                                                        ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                )
                                                ( FunctionT "r"
                                                    ( ScalarT
                                                        ( DatatypeT "Tree"
                                                            [ ScalarT
                                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                            ]
                                                            [ Pred BoolS "p"
                                                                [ Var ( VarS "a" ) "_0" ]
                                                            , Ite
                                                                ( Pred BoolS "p"
                                                                    [ Var ( VarS "a" ) "x" ]
                                                                ) ( IntLit 0 ) ( Pred IntS "q" [] )
                                                            ]
                                                        ) ( BoolLit True ) ( IntLit 0 )
                                                    )
                                                    ( ScalarT
                                                        ( DatatypeT "Tree"
                                                            [ ScalarT
                                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                            ]
                                                            [ Pred BoolS "p"
                                                                [ Var ( VarS "a" ) "_0" ]
                                                            , Pred IntS "q" []
                                                            ]
                                                        )
                                                        ( Binary Eq
                                                            ( Var
                                                                ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                            )
                                                            ( Cons
                                                                ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                                [ Var ( VarS "a" ) "x"
                                                                , Var
                                                                    ( DataS "Tree" [ VarS "a" ] ) "l"
                                                                , Var
                                                                    ( DataS "Tree" [ VarS "a" ] ) "r"
                                                                ]
                                                            )
                                                        ) ( IntLit 0 )
                                                    ) 0
                                                ) 0
                                            ) 0
                                        )
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Emptyset"
            , "Insert"
            , "Leaf"
            , "Node"
            , "Singleton"
            , "treeInsert"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "p"
                            , predSigArgSorts = [ VarS "a" ]
                            , predSigResSort = BoolS
                            }
                        , PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances =
                        [ False
                        , False
                        ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds =
                        [ True
                        , True
                        ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( ForallP
                        ( PredSig
                            { predSigName = "p"
                            , predSigArgSorts = [ VarS "a" ]
                            , predSigResSort = BoolS
                            }
                        )
                        ( Monotype
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ]
                                    [ Pred AnyS "p" []
                                    , Pred AnyS "q" []
                                    ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( ForallP
                        ( PredSig
                            { predSigName = "p"
                            , predSigArgSorts = [ VarS "a" ]
                            , predSigResSort = BoolS
                            }
                        )
                        ( Monotype
                            ( FunctionT "x"
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                )
                                ( FunctionT "l"
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ]
                                            [ Pred AnyS "p" []
                                            , Ite
                                                ( Pred AnyS "p" [ Var AnyS "x" ] ) ( Var AnyS "q" ) ( IntLit 0 )
                                            ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "r"
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ]
                                                [ Pred AnyS "p" []
                                                , Ite
                                                    ( Pred AnyS "p" [ Var AnyS "x" ] ) ( IntLit 0 ) ( Var AnyS "q" )
                                                ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ]
                                                [ Pred AnyS "p" []
                                                , Pred AnyS "q" []
                                                ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "treeInsert"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "t"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ]
                                        [ Binary Lt
                                            ( Var ( VarS "a" ) "x" )
                                            ( Var ( VarS "a" ) "_0" )
                                        , Var IntS "F5"
                                        ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ]
                                        [ Binary Lt
                                            ( Var ( VarS "a" ) "x" )
                                            ( Var ( VarS "a" ) "_0" )
                                        , Var IntS "F6"
                                        ]
                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "t"
                    ( ScalarT
                        ( DatatypeT "Tree"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ]
                            [ Binary Lt
                                ( Var ( VarS "a" ) "x" )
                                ( Var ( VarS "a" ) "_0" )
                            , Var IntS "F5"
                            ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT
                        ( DatatypeT "Tree"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                            ]
                            [ Binary Lt
                                ( Var ( VarS "a" ) "x" )
                                ( Var ( VarS "a" ) "_0" )
                            , Var IntS "F6"
                            ]
                        ) ( BoolLit True ) ( Var IntS "I4" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "t"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "t"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Leaf"
                                , argNames = []
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Node"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "Leaf"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "Leaf"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Node"
                                , argNames =
                                    [ "n"
                                    , "l"
                                    , "r"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "<"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "n"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "treeInsert"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "l"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "treeInsert"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "r"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/BST-Insert.sq"
        ( line 10
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "t"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "t"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F5"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "F6"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "t"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mx [37m<[0m _0[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m _0[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m_0 [37m<[0m _0[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m_0 [37m<[0m _0[37m)[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m _0[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m _0[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m_0 [37m<[0m _0[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m_0 [37m<[0m _0[37m)[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m t [37m==[0m [37m([0mLeaf[37m)[0m [37m==>[0m x [37m<[0m _0[37m)[0m SAT
Seed [[37m![0m[37m([0mx [37m<[0m _0[37m)[0m]
MSS [[37m![0m[37m([0mx [37m<[0m _0[37m)[0m]
Seed [[37m![0m[37m([0mx [37m<[0m _0[37m)[0m,x [37m<[0m _0]
MUS [x [37m<[0m _0]
SMT CHECK [37m([0m[37m([0mx [37m<[0m _0 [37m&&[0m t [37m==[0m [37m([0mLeaf[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m t [37m==[0m [37m([0mLeaf[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mx [37m<[0m _0 [37m&&[0m t [37m==[0m [37m([0mLeaf[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m([0m[37m([0mx [37m<[0m _0 [37m&&[0m t [37m==[0m [37m([0mLeaf[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m n [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m n [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m n [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m x [37m<[0m _0[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mx [37m<[0m n[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0[37m)[0m [37m&&[0m x13 [37m<[0m _0[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0 [37m==>[0m x [37m<[0m _0[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m n [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mx [37m<[0m n[37m)[0m[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0[37m)[0m [37m&&[0m x17 [37m<[0m _0[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0 [37m==>[0m x [37m<[0m _0[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT COULDN'T FIND MODEL; CORE:
|form1: (not (and (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ 1 (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ 0 (* 0 xIntS)) 0))
          (=> true (>= (+ 0 (* 0 xIntS)) 0))
          (=> true (>= 0 0))
          (=> true
              (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) (+ 1 (* 0 tIntS) (* 0 xIntS))))
          (=> true
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                  (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))
          (=> true (>= 1 0))
          (=> true
              (= (+ (+ 0 (* 0 tIntS))
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ 0 (* 0 xIntS))
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                    0)
                 (+ (+ 0 0) (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true
              (and (>= 1 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (= 1
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ 1 (* 0 tIntS) (* 0 xIntS))))))
          (=> (= _vIntS xIntS)
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= 0
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> true
              (and (>= (+ 1 (* 0 xIntS)) 0)
                   (>= 1 0)
                   (>= 0 0)
                   (= (+ 1 (* 0 xIntS)) (+ 1 0))))
          (=> true
              (and (>= 1 0)
                   (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= 1
                      (+ (+ 1 (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> true
              (and (>= (+ 0 (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= (+ 0 (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> (= _vIntS tIntS)
              (and (>= (+ 0 (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= (+ 0 (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> true
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= 0
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= 0 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= 1 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> false (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 1 1))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ 1 (* 0 tIntS) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ 1 (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ 1 (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (= (+ (+ 0 (* 0 tIntS))
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ 0 (* 0 xIntS))
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                    0)
                 (+ (+ 0 0) (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (and (= _vIntS xIntS) (= tIntS \|Leaf[]IntS\|))
              (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 1))
          (=> (and (= _vIntS xIntS) (= tIntS \|Leaf[]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                     (+ 0 (- (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> false (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 1 1))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= _vIntS \|Leaf[]IntS\|) (= tIntS \|Leaf[]IntS\|))
              (>= 0 (+ 0 (- (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)))))
          (=> false (>= 1 1))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 9999 (ite (< xIntS xIntS) 0 0)))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> false (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 1 1))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= _vIntS \|Leaf[]IntS\|) (= tIntS \|Leaf[]IntS\|))
              (>= 0 (+ 0 (- (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)))))
          (=> false (>= 1 1))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 9999 (ite (< xIntS xIntS) 0 0)))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (and (= _vIntS \|Node[x,Leaf[],Leaf[]]IntS\|)
                   (= tIntS \|Leaf[]IntS\|))
              (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 1 1))
          (=> (= tIntS \|Leaf[]IntS\|)
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|) (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (= (+ (+ (+ 0 (* 0 lIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0
                    (* 0 nIntS)
                    (* 0 lIntS)
                    (* 0 nIntS)
                    (* 0 rIntS)
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 rIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 tIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 xIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 lIntS))
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)
                 (+ (+ (+ 0 0) 0 0 0)
                    (+ (+ 0 (* 0 lIntS))
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS xIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS tIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (and (>= (ite (< xIntS nIntS) 0 1) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 0 1) 0)
                   (= (ite (< xIntS nIntS) 0 1)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 1)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS rIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= 0
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS nIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 1) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 _vIntS)
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 1)
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 _vIntS)
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (and (>= (ite (< xIntS nIntS) 1 0) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 1 0) 0)
                   (= (ite (< xIntS nIntS) 1 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 1 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS lIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= 0
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 1 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 _vIntS)
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 1 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= _vIntS xIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))))
          (=> (and (= _vIntS xIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     0
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= _vIntS nIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))))
          (=> (and (= _vIntS nIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     0
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 x11IntS)) (* 0 x12IntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 1))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ (+ 0 (* 0 x11IntS)) (* 0 x12IntS)))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> false (>= 1 1))
          (=> false (>= 1 1))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (and (>= (ite (< xIntS nIntS) 0 1) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 1)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (and (>= (ite (< xIntS nIntS) 1 0) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 1 0) 0)
                   (= (ite (< xIntS nIntS) 1 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 1 0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (- (+ 1
                             (* 0 lIntS)
                             (* 0 nIntS)
                             (* 0 rIntS)
                             (* 0 tIntS)
                             (* 0 xIntS))
                          1)
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (- (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         1)
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (= (+ (+ (+ 0 (* 0 lIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    1
                    (* 0 nIntS)
                    (* 0 lIntS)
                    (* 0 nIntS)
                    (* 0 rIntS)
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 rIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 tIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 xIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 lIntS))
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)
                 (+ (+ (+ 0 0) 0 0 0)
                    (+ 1
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS))
                   (= _vIntS xIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  1))
          (=> (and (= true (< xIntS nIntS))
                   (= _vIntS xIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     0
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 x11IntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 1))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ (+ 0 (* 0 x11IntS)) (* 0 xIntS)))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS))
                   (= _vIntS lIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ 0 (* 0 xIntS))
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  1))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ 0 (* 0 xIntS)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (ite (< xIntS nIntS) 1 0) (+ 1 (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 1))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ (+ 0 (* 0 lIntS)) (* 0 xIntS)))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 x15IntS)) (* 0 x16IntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 1))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ (+ 0 (* 0 x15IntS)) (* 0 x16IntS)))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> false (>= 1 1))
          (=> false (>= 1 1))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (and (>= (ite (< xIntS nIntS) 0 1) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 0 1) 0)
                   (= (ite (< xIntS nIntS) 0 1)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 1)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (and (>= (ite (< xIntS nIntS) 1 0) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 1 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (- (+ 1
                             (* 0 lIntS)
                             (* 0 nIntS)
                             (* 0 rIntS)
                             (* 0 tIntS)
                             (* 0 xIntS))
                          1)
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (- (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         1)
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (= (+ (+ (+ 0 (* 0 lIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    1
                    (* 0 nIntS)
                    (* 0 lIntS)
                    (* 0 nIntS)
                    (* 0 rIntS)
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 rIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 tIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 xIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 lIntS))
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)
                 (+ (+ (+ 0 0) 0 0 0)
                    (+ 1
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS))
                   (= _vIntS xIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  1))
          (=> (and (= false (< xIntS nIntS))
                   (= _vIntS xIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     0
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 x15IntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 1))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ (+ 0 (* 0 x15IntS)) (* 0 xIntS)))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS))
                   (= _vIntS rIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ 0 (* 0 xIntS))
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  1))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ 0 (* 0 xIntS)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (ite (< xIntS nIntS) 0 1) (+ 1 (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 rIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 1))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ (+ 0 (* 0 rIntS)) (* 0 xIntS)))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> true (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))))|
treeInsert :: <a> . x:{1**a||I0} -> t:{Tree {1**a||I1} <x < _0> <F5>||I2} -> {Tree {1**a||I3} <x < _0> <F6>||I4}
treeInsert = \x . \t . 
    match t with
      Leaf -> Node x Leaf Leaf
      Node n l r -> 
        if x < n
          then tick 1 (treeInsert x l)
          else tick 1 (treeInsert x r)

treeInsert :: <a> . x:{1**a||0} -> t:{Tree {1**a||0} <x < _0> <1>||0} -> {Tree {1**a||0} <x < _0> <0>||0} (inferred)
Goal
    { gName = "member"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( ForallP
                                    ( PredSig
                                        { predSigName = "p"
                                        , predSigArgSorts = [ VarS "a" ]
                                        , predSigResSort = BoolS
                                        }
                                    )
                                    ( Monotype
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ]
                                                [ Pred BoolS "p"
                                                    [ Var ( VarS "a" ) "_0" ]
                                                , Pred IntS "q" []
                                                ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Tree" [ VarS "a" ] ) "Leaf" []
                                                )
                                            ) ( IntLit 0 )
                                        )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 3
                , fromList
                    [
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( ForallP
                                    ( PredSig
                                        { predSigName = "p"
                                        , predSigArgSorts = [ VarS "a" ]
                                        , predSigResSort = BoolS
                                        }
                                    )
                                    ( Monotype
                                        ( FunctionT "x"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                            )
                                            ( FunctionT "l"
                                                ( ScalarT
                                                    ( DatatypeT "Tree"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                        ]
                                                        [ Pred BoolS "p"
                                                            [ Var ( VarS "a" ) "_0" ]
                                                        , Ite
                                                            ( Pred BoolS "p"
                                                                [ Var ( VarS "a" ) "x" ]
                                                            ) ( Pred IntS "q" [] ) ( IntLit 0 )
                                                        ]
                                                    ) ( BoolLit True ) ( IntLit 0 )
                                                )
                                                ( FunctionT "r"
                                                    ( ScalarT
                                                        ( DatatypeT "Tree"
                                                            [ ScalarT
                                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                            ]
                                                            [ Pred BoolS "p"
                                                                [ Var ( VarS "a" ) "_0" ]
                                                            , Ite
                                                                ( Pred BoolS "p"
                                                                    [ Var ( VarS "a" ) "x" ]
                                                                ) ( IntLit 0 ) ( Pred IntS "q" [] )
                                                            ]
                                                        ) ( BoolLit True ) ( IntLit 0 )
                                                    )
                                                    ( ScalarT
                                                        ( DatatypeT "Tree"
                                                            [ ScalarT
                                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                            ]
                                                            [ Pred BoolS "p"
                                                                [ Var ( VarS "a" ) "_0" ]
                                                            , Pred IntS "q" []
                                                            ]
                                                        )
                                                        ( Binary Eq
                                                            ( Var
                                                                ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                            )
                                                            ( Cons
                                                                ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                                [ Var ( VarS "a" ) "x"
                                                                , Var
                                                                    ( DataS "Tree" [ VarS "a" ] ) "l"
                                                                , Var
                                                                    ( DataS "Tree" [ VarS "a" ] ) "r"
                                                                ]
                                                            )
                                                        ) ( IntLit 0 )
                                                    ) 0
                                                ) 0
                                            ) 0
                                        )
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Emptyset"
            , "Insert"
            , "Leaf"
            , "Node"
            , "Singleton"
            , "member"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "p"
                            , predSigArgSorts = [ VarS "a" ]
                            , predSigResSort = BoolS
                            }
                        , PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances =
                        [ False
                        , False
                        ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds =
                        [ True
                        , True
                        ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( ForallP
                        ( PredSig
                            { predSigName = "p"
                            , predSigArgSorts = [ VarS "a" ]
                            , predSigResSort = BoolS
                            }
                        )
                        ( Monotype
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ]
                                    [ Pred AnyS "p" []
                                    , Pred AnyS "q" []
                                    ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( ForallP
                        ( PredSig
                            { predSigName = "p"
                            , predSigArgSorts = [ VarS "a" ]
                            , predSigResSort = BoolS
                            }
                        )
                        ( Monotype
                            ( FunctionT "x"
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                )
                                ( FunctionT "l"
                                    ( ScalarT
                                        ( DatatypeT "Tree"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ]
                                            [ Pred AnyS "p" []
                                            , Ite
                                                ( Pred AnyS "p" [ Var AnyS "x" ] ) ( Var AnyS "q" ) ( IntLit 0 )
                                            ]
                                        ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "r"
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ]
                                                [ Pred AnyS "p" []
                                                , Ite
                                                    ( Pred AnyS "p" [ Var AnyS "x" ] ) ( IntLit 0 ) ( Var AnyS "q" )
                                                ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ]
                                                [ Pred AnyS "p" []
                                                , Pred AnyS "q" []
                                                ]
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                ) 0
                            )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "member"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "t"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ]
                                        [ Binary Lt
                                            ( Var ( VarS "a" ) "x" )
                                            ( Var ( VarS "a" ) "_0" )
                                        , Var IntS "F4"
                                        ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "t"
                    ( ScalarT
                        ( DatatypeT "Tree"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ]
                            [ Binary Lt
                                ( Var ( VarS "a" ) "x" )
                                ( Var ( VarS "a" ) "_0" )
                            , Var IntS "F4"
                            ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "t"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "t"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Leaf"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "False"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Node"
                                , argNames =
                                    [ "n"
                                    , "l"
                                    , "r"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "<"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "n"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "member"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "l"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "member"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "r"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/BST-Member.sq"
        ( line 10
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "t"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F4"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mx [37m<[0m _0[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m _0[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m_0 [37m<[0m _0[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m_0 [37m<[0m _0[37m)[0m[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m n [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m n [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m n [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0 [37m==>[0m x [37m<[0m _0[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mn [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0mx [37m<[0m [1m_v[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mn [37m<[0m [1m_v[0m [37m<==>[0m x [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0mx [37m<[0m [1m_v[0m [37m<==>[0m n [37m<[0m [1m_v[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m[37m)[0m [37m&&[0m x [37m<[0m _0 [37m==>[0m x [37m<[0m _0[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==[0m [37m([0mx [37m<[0m n[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode n l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT COULDN'T FIND MODEL; CORE:
|form1: (not (and (=> true (>= (+ 1 (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ 0 (* 0 xIntS)) 0))
          (=> true (>= (+ 0 (* 0 xIntS)) 0))
          (=> true (>= 0 0))
          (=> true
              (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) (+ 1 (* 0 tIntS) (* 0 xIntS))))
          (=> true
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                  (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))
          (=> true (>= 1 0))
          (=> true
              (= (+ (+ 0 (* 0 tIntS))
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ 0 (* 0 xIntS))
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                    0)
                 (+ (+ 0 0) (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true
              (and (>= 1 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (= 1
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ 1 (* 0 tIntS) (* 0 xIntS))))))
          (=> (= _vIntS xIntS)
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= 0
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> true
              (and (>= (+ 1 (* 0 xIntS)) 0)
                   (>= 1 0)
                   (>= 0 0)
                   (= (+ 1 (* 0 xIntS)) (+ 1 0))))
          (=> true
              (and (>= 1 0)
                   (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= 1
                      (+ (+ 1 (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> true
              (and (>= (+ 0 (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= (+ 0 (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> (= _vIntS tIntS)
              (and (>= (+ 0 (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (= (+ 0 (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))))))
          (=> true
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (= 0
                      (+ (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= 0 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= 1 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0))
          (=> true (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0))
          (=> (and (not _vBoolS) (= tIntS \|Leaf[]IntS\|))
              (>= 0 (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (= tIntS \|Leaf[]IntS\|)
              (= (+ (+ 0 (* 0 tIntS))
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ 0 (* 0 xIntS))
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                    0)
                 (+ (+ 0 0) (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)))
          (=> (= tIntS \|Leaf[]IntS\|) (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (= (+ (+ (+ 0 (* 0 lIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0
                    (* 0 nIntS)
                    (* 0 lIntS)
                    (* 0 nIntS)
                    (* 0 rIntS)
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 rIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 tIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 xIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 lIntS))
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)
                 (+ (+ (+ 0 0) 0 0 0)
                    (+ (+ 0 (* 0 lIntS))
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS xIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS tIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (and (>= (ite (< xIntS nIntS) 0 1) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 0 1) 0)
                   (= (ite (< xIntS nIntS) 0 1)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 1)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS rIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= 0
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS nIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 1) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 _vIntS)
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 1)
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 _vIntS)
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (and (>= (ite (< xIntS nIntS) 1 0) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 1 0) 0)
                   (= (ite (< xIntS nIntS) 1 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 1 0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ 1 (* 0 tIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1 (* 0 tIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0) 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 tIntS) (* 0 xIntS)) 0)
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= _vIntS lIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= 0
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (and (>= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 1 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 _vIntS)
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 1 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|) (>= 0 0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= _vIntS xIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))))
          (=> (and (= _vIntS xIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     0
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (= tIntS \|Node[n,l,r]IntS\|)
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= _vIntS nIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))))
          (=> (and (= _vIntS nIntS) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     0
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 x5IntS)) (* 0 x6IntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> false (>= 1 1))
          (=> false (>= 1 1))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (and (>= (ite (< xIntS nIntS) 0 1) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 1)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (and (>= (ite (< xIntS nIntS) 1 0) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 1 0) 0)
                   (= (ite (< xIntS nIntS) 1 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 1 0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (- (+ 1
                             (* 0 lIntS)
                             (* 0 nIntS)
                             (* 0 rIntS)
                             (* 0 tIntS)
                             (* 0 xIntS))
                          1)
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (- (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         1)
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (= (+ (+ (+ 0 (* 0 lIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    1
                    (* 0 nIntS)
                    (* 0 lIntS)
                    (* 0 nIntS)
                    (* 0 rIntS)
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 rIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 tIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 xIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 lIntS))
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)
                 (+ (+ (+ 0 0) 0 0 0)
                    (+ 1
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= true (< xIntS nIntS))
                   (= _vIntS xIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  1))
          (=> (and (= true (< xIntS nIntS))
                   (= _vIntS xIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     0
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 x5IntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS))
                   (= _vIntS lIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ 0 (* 0 xIntS))
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  1))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ 0 (* 0 xIntS)))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (ite (< xIntS nIntS) 1 0) (+ 1 (* 0 xIntS))))
          (=> (and (= true (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 x9IntS)) (* 0 x10IntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> false (>= 1 1))
          (=> false (>= 1 1))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 0 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (and (>= (ite (< xIntS nIntS) 0 1) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 0 1) 0)
                   (= (ite (< xIntS nIntS) 0 1)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 1)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (and (>= (ite (< xIntS nIntS) 1 0) 0)
                        (>= (ite (< xIntS nIntS) 0 0) 0))
                   (>= (ite (< xIntS nIntS) 0 0) 0)
                   (= (ite (< xIntS nIntS) 1 0)
                      (+ (ite (< xIntS nIntS) 0 0) (ite (< xIntS nIntS) 0 0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ 1
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ 1
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 _vIntS))
                          (* 0 lIntS)
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 _vIntS))
                         (* 0 lIntS)
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS))
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (+ (+ 0 (* 0 lIntS))
                         (* 0 nIntS)
                         (* 0 rIntS)
                         (* 0 tIntS)
                         (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 1 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0 0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (and (>= (- (+ 1
                             (* 0 lIntS)
                             (* 0 nIntS)
                             (* 0 rIntS)
                             (* 0 tIntS)
                             (* 0 xIntS))
                          1)
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (>= (+ (+ 0 (* 0 lIntS))
                          (* 0 nIntS)
                          (* 0 rIntS)
                          (* 0 tIntS)
                          (* 0 xIntS))
                       0)
                   (= (- (+ 1
                            (* 0 lIntS)
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         1)
                      (+ (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))
                         (+ (+ 0 (* 0 lIntS))
                            (* 0 nIntS)
                            (* 0 rIntS)
                            (* 0 tIntS)
                            (* 0 xIntS))))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 lIntS))
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (= (+ (+ (+ 0 (* 0 lIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    1
                    (* 0 nIntS)
                    (* 0 lIntS)
                    (* 0 nIntS)
                    (* 0 rIntS)
                    (* 0 tIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 rIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 tIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 xIntS))
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    (+ (+ 0 (* 0 lIntS))
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)
                 (+ (+ (+ 0 0) 0 0 0)
                    (+ 1
                       (* 0 lIntS)
                       (* 0 nIntS)
                       (* 0 rIntS)
                       (* 0 tIntS)
                       (* 0 xIntS))
                    0)))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  0))
          (=> (and (= false (< xIntS nIntS))
                   (= _vIntS xIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  1))
          (=> (and (= false (< xIntS nIntS))
                   (= _vIntS xIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     0
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 x9IntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS))
                   (= _vIntS rIntS)
                   (= tIntS \|Node[n,l,r]IntS\|))
              (>= 0
                  (+ (+ 0 (* 0 xIntS))
                     (- (+ (+ (+ 0 (* 0 lIntS))
                              (* 0 nIntS)
                              (* 0 rIntS)
                              (* 0 tIntS)
                              (* 0 xIntS))
                           0)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ 1
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  1))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 _vIntS))
                     (* 0 lIntS)
                     (* 0 nIntS)
                     (* 0 rIntS)
                     (* 0 tIntS)
                     (* 0 xIntS))
                  (+ (+ (+ 0 (* 0 _vIntS))
                        (* 0 lIntS)
                        (* 0 nIntS)
                        (* 0 rIntS)
                        (* 0 tIntS)
                        (* 0 xIntS))
                     (+ 0 (* 0 xIntS)))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (ite (< xIntS nIntS) 0 1) (+ 1 (* 0 xIntS))))
          (=> (and (= false (< xIntS nIntS)) (= tIntS \|Node[n,l,r]IntS\|))
              (>= (+ (+ 0 (* 0 rIntS)) (* 0 xIntS))
                  (+ (+ 0 (* 0 tIntS)) (* 0 xIntS))))
          (=> true (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))))|
member :: <a> . x:{1**a||I0} -> t:{Tree {1**a||I1} <x < _0> <F4>||I2} -> {Bool||I3}
member = \x . \t . 
    match t with
      Leaf -> False
      Node n l r -> 
        if x < n
          then tick 1 (member x l)
          else tick 1 (member x r)

member :: <a> . x:{1**a||0} -> t:{Tree {1**a||0} <x < _0> <1>||0} -> {Bool||0} (inferred)
Goal
    { gName = "replicate"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "List" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "List" [ VarS "a" ] ) "Nil" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "List" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "List" [ VarS "a" ] ) "Cons"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "List" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "replicate"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "replicate"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "n"
                            ( ScalarT IntT
                                ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I0" )
                            )
                            ( FunctionT "x"
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( Var IntS "n" ) ) ( BoolLit True ) ( Var IntS "I1" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "n"
                ( ScalarT IntT
                    ( Binary Ge ( Var IntS "_v" ) ( IntLit 0 ) ) ( Var IntS "I0" )
                )
                ( FunctionT "x"
                    ( ScalarT
                        ( TypeVarT ( fromList [] ) "a" ( Var IntS "n" ) ) ( BoolLit True ) ( Var IntS "I1" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                            ] []
                        ) ( BoolLit True ) ( Var IntS "I3" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "n"
            ( Program
                { content = PFun "x"
                    ( Program
                        { content = PIf
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "<="
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "n"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PSymbol "0"
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PSymbol "Nil"
                                , typeOf = AnyT
                                }
                            )
                            ( Program
                                { content = PApp
                                    ( Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "Cons"
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "x"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                    ( Program
                                        { content = PTick 1
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "replicate"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "-"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "n"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "1"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "x"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    )
                                , typeOf = AnyT
                                }
                            )
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "pos/List-Replicate.sq"
        ( line 6
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , [ Var IntS "n" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x"
                , Var IntS "n"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var ( VarS "a" ) "x"
                , Var IntS "n"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[37m![0m[37m([0m[1m_v[0m [37m>=[0m [36m0[0m[37m)[0m[37m)[0m SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m n [37m&&[0m n [37m>=[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mn [37m<=[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mn [37m<=[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mn [37m<=[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mn [37m<=[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x14 [37m-[0m x15[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mn [37m<=[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m n [37m-[0m x15[37m)[0m [37m&&[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mn [37m<=[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m n [37m-[0m [36m1[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m [37m==>[0m [1m_v[0m [37m>=[0m [36m0[0m[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mn [37m<=[0m [36m0[0m[37m)[0m[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mn [37m<=[0m [36m0[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m n [37m>=[0m [36m0[0m [37m==>[0m True[37m)[0m UNSAT
SMT COULDN'T FIND MODEL; CORE:
|form1: (not (and (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 xIntS)) (* 0 nIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 xIntS)) (* 0 nIntS)) 0))
          (=> (>= nIntS 0) (>= (+ 0 (* 1 nIntS)) 0))
          (=> (>= nIntS 0) (>= 0 0))
          (=> (>= nIntS 0)
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (>= nIntS 0)
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (>= nIntS 0)
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (= (+ (+ (+ 0 (* 0 nIntS)) (* 0 nIntS) (* 0 xIntS))
                    (+ (+ 0 (* 0 xIntS)) (* 0 nIntS))
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                    0)
                 (+ (+ 0 0) (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (and (>= nIntS 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0)
                   (= nIntS
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 1 nIntS)) (* 0 xIntS))))))
          (=> (and (= _vIntS xIntS) (>= nIntS 0))
              (and (>= (+ 0 (* 1 nIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 1 nIntS) (* 0 xIntS)) 0)
                   (= (+ 0 (* 1 nIntS))
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 1 nIntS) (* 0 xIntS))))))
          (=> (and (= _vIntS nIntS) (>= nIntS 0))
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)
                   (= 0
                      (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))
                         (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))))))
          (=> (>= nIntS 0)
              (and (>= 0 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= 0
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 1 nIntS) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0))
          (=> (>= nIntS 0) (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (>= nIntS 0)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0))
          (=> (and (= _vIntS nIntS) (>= nIntS 0))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))
                     (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))))))
          (=> (>= nIntS 0)
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0))
          (=> (and (= _vIntS 0) (>= nIntS 0))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))
                     (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))))))
          (=> (and (= true (<= nIntS 0)) (= _vIntS \|Nil[]IntS\|) (>= nIntS 0))
              (>= 0 (+ (+ 0 (* 0 xIntS)) (* 0 nIntS))))
          (=> false (>= 1 1))
          (=> (and (= true (<= nIntS 0)) (>= nIntS 0))
              (= (+ (+ (+ 0 (* 0 nIntS)) (* 0 nIntS) (* 0 xIntS))
                    (+ 0 (* 0 xIntS))
                    (* 1 nIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                    0)
                 (+ (+ 0 0) (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))
          (=> (and (= true (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= true (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0))
          (=> false (>= 0 (+ (+ 0 (* 0 xIntS)) (* 0 nIntS))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0)) (>= 1 1))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)
                  (+ (+ 0 (* 0 xIntS)) (* 0 nIntS))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ 1 (* 0 nIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ 1 (* 0 nIntS) (* 0 xIntS)) 0)
                   (= (+ 1 (* 0 nIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ 1 (* 0 nIntS) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ 1 (* 0 nIntS) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ 1 (* 0 nIntS) (* 0 xIntS)) 0)
                   (>= (+ (- 1) (* 1 nIntS) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS))
                      (+ (+ 1 (* 0 nIntS) (* 0 xIntS))
                         (+ (- 1) (* 1 nIntS) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 1 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (- 1) (* 1 nIntS) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ 1 (* 0 nIntS) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 1 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (= (+ (+ (+ 0 (* 0 nIntS)) (* 0 nIntS) (* 0 xIntS))
                    (+ 0 (* 0 xIntS))
                    (* 1 nIntS)
                    (* 0 xIntS)
                    (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                    0)
                 (+ (+ 0 0) (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0)))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (= _vIntS xIntS) (>= nIntS 0))
              (>= (+ 1 (* 0 nIntS) (* 0 xIntS)) 1))
          (=> (and (= false (<= nIntS 0)) (= _vIntS xIntS) (>= nIntS 0))
              (>= 0
                  (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))
                     (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))))))
          (=> false (>= 0 (+ (+ 0 (* 0 xIntS)) (* 0 nIntS))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0)) (>= 1 1))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)
                  (+ (+ 0 (* 0 xIntS)) (* 0 nIntS))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 x8IntS)) (* 0 x9IntS))
                  (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0)) (>= 1 1))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))
                     (+ (+ 0 (* 0 x8IntS)) (* 0 x9IntS)))
                  (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)))
          (=> false (>= 1 1))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (- 1) (* 1 nIntS) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (- 1) (* 1 nIntS) (* 0 xIntS)) 0)
                   (= (+ (- 1) (* 1 nIntS) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (- 1) (* 1 nIntS) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (- 1) (* 1 nIntS) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (- (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 1) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (- 1) (* 1 nIntS) (* 0 xIntS)) 0)
                   (= (- (+ (+ 0 (* 1 nIntS)) (* 0 xIntS)) 1)
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (- 1) (* 1 nIntS) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (- 1) (* 1 nIntS) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (and (= false (<= nIntS 0)) (>= nIntS 0)) (>= x10IntS 0))
              (>= (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0))
          (=> false (>= 0 (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (and (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)
                   (= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                      (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))
                         (+ (+ 0 (* 0 nIntS)) (* 0 xIntS))))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))
          (=> (and (= false (<= nIntS 0)) (= _vIntS nIntS) (>= nIntS 0))
              (>= 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0))))
          (=> false (>= 0 (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))))
          (=> (and (= false (<= nIntS 0)) (= _vIntS 1) (>= nIntS 0))
              (>= 0 (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))))
          (=> (and (= false (<= nIntS 0)) (= _vIntS (- nIntS 1)) (>= nIntS 0))
              (>= 0 (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))))
          (=> (and (and (= false (<= nIntS 0)) (= x10IntS (- nIntS 1)))
                   (>= nIntS 0))
              (>= (+ (+ 0 (* 0 x8IntS)) (* 0 x10IntS))
                  (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))))
          (=> (and (and (= false (<= nIntS 0)) (= x10IntS (- nIntS 1)))
                   (>= nIntS 0))
              (>= 1 1))
          (=> (and (and (= false (<= nIntS 0)) (= x10IntS (- nIntS 1)))
                   (>= nIntS 0))
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))
                     (+ (+ 0 (* 0 x8IntS)) (* 0 x10IntS)))
                  (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)))
          (=> (and (and (= false (<= nIntS 0)) (= x10IntS (- nIntS 1)))
                   (= _vIntS xIntS)
                   (>= nIntS 0))
              (>= (+ (- 1) (* 1 nIntS) (* 0 xIntS)) x10IntS))
          (=> (and (and (= false (<= nIntS 0)) (= x10IntS (- nIntS 1)))
                   (= _vIntS xIntS)
                   (>= nIntS 0))
              (>= 0
                  (+ (* x10IntS (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)))
                     0
                     (* 1 x10IntS)
                     (- (+ (+ (- 1) (* 1 nIntS) (* 0 xIntS)) 0)))))
          (=> (and (and (= false (<= nIntS 0)) (= x10IntS (- nIntS 1)))
                   (>= nIntS 0))
              (>= (+ (+ 0 (* 0 xIntS)) (* 0 x10IntS))
                  (+ 0 (- (+ (+ (+ 0 (* 0 nIntS)) (* 0 xIntS)) 0)))))
          (=> (and (and (= false (<= nIntS 0)) (= x10IntS (- nIntS 1)))
                   (>= nIntS 0))
              (>= 1 1))
          (=> (and (and (= false (<= nIntS 0)) (= x10IntS (- nIntS 1)))
                   (>= nIntS 0))
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS))
                     (+ (+ 0 (* 0 xIntS)) (* 0 x10IntS)))
                  (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)))
          (=> (and (= false (<= nIntS 0))
                   (= _vIntS \|Cons[x,x7]IntS\|)
                   (>= nIntS 0))
              (>= 0 (+ (+ 0 (* 0 xIntS)) (* 0 nIntS))))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0)) (>= 1 1))
          (=> (and (= false (<= nIntS 0)) (>= nIntS 0))
              (>= (+ (+ (+ 0 (* 0 _vIntS)) (* 0 nIntS) (* 0 xIntS)) 0)
                  (+ (+ 0 (* 0 xIntS)) (* 0 nIntS))))
          (=> true (and (>= 0 0) (>= 0 0) (>= 0 0) (= 0 (+ 0 0))))))|
replicate :: <a> . n:{Int|_v >= 0|I0} -> x:{n**a||I1} -> {List {1**a||I2}||I3}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (tick 1 (replicate
                             (n - 1) x))

replicate :: <a> . n:{Int|_v >= 0|0} -> x:{n**a||1 * n} -> {List {1**a||0}||0} (inferred)
Goal
    { gName = "append"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "append"
            , "attach"
            , "pairs"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F18" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "attach"
                , ForallT "a"
                    ( ForallP
                        ( PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        )
                        ( Monotype
                            ( FunctionT "x"
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                )
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] [ Var IntS "F20" ]
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( DatatypeT "Pair"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I10" )
                                            ] [ Var IntS "F21" ]
                                        ) ( BoolLit True ) ( Var IntS "I11" )
                                    ) 0
                                ) 0
                            )
                        )
                    )
                )
            ,
                ( "pairs"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I13" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Pair"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    ] [ Var IntS "F23" ]
                                ) ( BoolLit True ) ( Var IntS "I16" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] [ Var IntS "F17" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( FunctionT "ys"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                            ] [ Var IntS "F18" ]
                        ) ( BoolLit True ) ( Var IntS "I3" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            ] [ Var IntS "F19" ]
                        ) ( BoolLit True ) ( Var IntS "I5" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "ys"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "ys"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "z"
                                    , "zs"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "z"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "append"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "zs"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Pairs.sq"
        ( line 9
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F17"
            , []
            )
        ,
            ( "F18"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F19"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m z [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m True SAT
Goal
    { gName = "attach"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "append"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F17" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F18" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] [ Var IntS "F19" ]
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "append"
            , "attach"
            , "pairs"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F18" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "attach"
                , ForallT "a"
                    ( ForallP
                        ( PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        )
                        ( Monotype
                            ( FunctionT "x"
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                )
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] [ Var IntS "F20" ]
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( DatatypeT "Pair"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I10" )
                                            ] [ Var IntS "F21" ]
                                        ) ( BoolLit True ) ( Var IntS "I11" )
                                    ) 0
                                ) 0
                            )
                        )
                    )
                )
            ,
                ( "pairs"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I13" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Pair"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    ] [ Var IntS "F23" ]
                                ) ( BoolLit True ) ( Var IntS "I16" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( ForallP
            ( PredSig
                { predSigName = "q"
                , predSigArgSorts = []
                , predSigResSort = IntS
                }
            )
            ( Monotype
                ( FunctionT "x"
                    ( ScalarT
                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                    )
                    ( FunctionT "xs"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                ] [ Var IntS "F20" ]
                            ) ( BoolLit True ) ( Var IntS "I8" )
                        )
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( DatatypeT "Pair"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                        ] []
                                    ) ( BoolLit True ) ( Var IntS "I10" )
                                ] [ Var IntS "F21" ]
                            ) ( BoolLit True ) ( Var IntS "I11" )
                        ) 0
                    ) 0
                )
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "Nil"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Pair"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "attach"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Pairs.sq"
        ( line 15
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I6"
            , []
            )
        ,
            ( "I7"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I8"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I11"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F20"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "F21"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mPair x16 x17[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mPair x x17[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mPair x y[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "pairs"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "append"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F17" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F18" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] [ Var IntS "F19" ]
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "attach"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                    ] [ Var IntS "F20" ]
                                                ) ( BoolLit True ) ( Var IntS "I8" )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( DatatypeT "Pair"
                                                            [ ScalarT
                                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                                            ] []
                                                        ) ( BoolLit True ) ( Var IntS "I10" )
                                                    ] [ Var IntS "F21" ]
                                                ) ( BoolLit True ) ( Var IntS "I11" )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "append"
            , "attach"
            , "pairs"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F18" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "attach"
                , ForallT "a"
                    ( ForallP
                        ( PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        )
                        ( Monotype
                            ( FunctionT "x"
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                )
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                            ] [ Var IntS "F20" ]
                                        ) ( BoolLit True ) ( Var IntS "I8" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( DatatypeT "Pair"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                                    ] []
                                                ) ( BoolLit True ) ( Var IntS "I10" )
                                            ] [ Var IntS "F21" ]
                                        ) ( BoolLit True ) ( Var IntS "I11" )
                                    ) 0
                                ) 0
                            )
                        )
                    )
                )
            ,
                ( "pairs"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I13" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "Pair"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I15" )
                                    ] [ Var IntS "F23" ]
                                ) ( BoolLit True ) ( Var IntS "I16" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                        ] [ Var IntS "F22" ]
                    ) ( BoolLit True ) ( Var IntS "I13" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( DatatypeT "Pair"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                ] []
                            ) ( BoolLit True ) ( Var IntS "I15" )
                        ] [ Var IntS "F23" ]
                    ) ( BoolLit True ) ( Var IntS "I16" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PTick 1
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "append"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "attach"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "y"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "ys"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "pairs"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Pairs.sq"
        ( line 21
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I12"
            , []
            )
        ,
            ( "I13"
            , []
            )
        ,
            ( "I14"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I15"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I16"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F22"
            , []
            )
        ,
            ( "F23"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
append :: <a> . xs:{List {1**a||I0} <F17>||I1} -> ys:{List {1**a||I2} <F18>||I3} -> {List {1**a||I4} <F19>||I5}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

attach :: <a> . <q :: Int> . x:{1**a||I6} -> xs:{List {1**a||I7} <F20>||I8} -> {List {Pair {1**a||I9}||I10} <F21>||I11}
attach = \x . \xs . 
    match xs with
      Nil -> Nil
      Cons y ys -> Cons (Pair x y)
                     (tick 1 (attach x ys))

pairs :: <a> . xs:{List {1**a||I12} <F22>||I13} -> {List {Pair {1**a||I14}||I15} <F23>||I16}
<no file name>:1: Error:
  Insufficient resources

Goal
    { gName = "subsetSum"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "QList"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "QList" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "QList" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "QList"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "QList"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "QList" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "QList" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "QList" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "QList"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "QList"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "QList"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "QList"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "subsetSum"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "QList"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F4" ]
                            ) ( BoolLit True ) ( Var IntS "I1" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                            ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "QList"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) ] [ Var IntS "F4" ]
                ) ( BoolLit True ) ( Var IntS "I1" )
            )
            ( FunctionT "arg0"
                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I2" ) )
                ( ScalarT BoolT ( BoolLit True ) ( Var IntS "I3" ) ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "target"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "=="
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "target"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "0"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "hd"
                                    , "tl"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "||"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "subsetSum"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "tl"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PSymbol "-"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PSymbol "target"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "hd"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "subsetSum"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "tl"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "target"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Exp-Contrived.sq"
        ( line 6
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "QList" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var IntS "arg0"
                , Var
                    ( DataS "QList" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F4"
            , []
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m target [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [36m0[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
subsetSum :: arg1:{QList {Int||I0} <F4>||I1} -> arg0:{Int||I2} -> {Bool||I3}
<no file name>:1: Error:
  Insufficient resources

Goal
    { gName = "partition"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "append"
            , "partition"
            , "quickSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F18" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                        ] [ Var IntS "F20" ]
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "partition"
                , ForallT "a"
                    ( ForallP
                        ( PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        )
                        ( ForallP
                            ( PredSig
                                { predSigName = "r"
                                , predSigArgSorts = []
                                , predSigResSort = IntS
                                }
                            )
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F16" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                        ] [ Var IntS "F17" ]
                                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    )
                )
            ,
                ( "quickSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                    ] [ Var IntS "F21" ]
                                ) ( BoolLit True ) ( Var IntS "I13" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( ForallP
            ( PredSig
                { predSigName = "q"
                , predSigArgSorts = []
                , predSigResSort = IntS
                }
            )
            ( ForallP
                ( PredSig
                    { predSigName = "r"
                    , predSigArgSorts = []
                    , predSigResSort = IntS
                    }
                )
                ( Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                    ] [ Var IntS "F16" ]
                                ) ( BoolLit True ) ( Var IntS "I2" )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                            ] [ Var IntS "F17" ]
                                        ) ( BoolLit True ) ( Var IntS "I4" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I5" )
                            ) 0
                        ) 0
                    )
                )
            )
        )
    , gImpl = Program
        { content = PFun "p"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Pair"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "Nil"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "Nil"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "partition"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "p"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Pair"
                                            , argNames =
                                                [ "ls"
                                                , "gs"
                                                ]
                                            , expr = Program
                                                { content = PIf
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "<="
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "y"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "p"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Pair"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "Cons"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "y"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "ls"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "gs"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Pair"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "ls"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Cons"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "y"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "gs"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Quick-Sort-Quadratic.sq"
        ( line 10
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F16"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "F17"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mNil[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m p [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m p [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x20 x21[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<=[0m p[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons y x21[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<=[0m p[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons y ls[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<=[0m p[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m gs[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<=[0m p[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m ls[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x28 x29[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<=[0m p[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons y x29[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0my [37m<=[0m p[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<=[0m p[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons y gs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "append"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "partition"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( ForallP
                                    ( PredSig
                                        { predSigName = "r"
                                        , predSigArgSorts = []
                                        , predSigResSort = IntS
                                        }
                                    )
                                    ( Monotype
                                        ( FunctionT "x"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            )
                                            ( FunctionT "xs"
                                                ( ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                        ] [ Var IntS "F16" ]
                                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                                )
                                                ( ScalarT
                                                    ( DatatypeT "Pair"
                                                        [ ScalarT
                                                            ( DatatypeT "List"
                                                                [ ScalarT
                                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                                ] [ Var IntS "F17" ]
                                                            ) ( BoolLit True ) ( Var IntS "I4" )
                                                        ] []
                                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                                ) 0
                                            ) 0
                                        )
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "append"
            , "partition"
            , "quickSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F18" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                        ] [ Var IntS "F20" ]
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "partition"
                , ForallT "a"
                    ( ForallP
                        ( PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        )
                        ( ForallP
                            ( PredSig
                                { predSigName = "r"
                                , predSigArgSorts = []
                                , predSigResSort = IntS
                                }
                            )
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F16" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                        ] [ Var IntS "F17" ]
                                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    )
                )
            ,
                ( "quickSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                    ] [ Var IntS "F21" ]
                                ) ( BoolLit True ) ( Var IntS "I13" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                        ] [ Var IntS "F18" ]
                    ) ( BoolLit True ) ( Var IntS "I7" )
                )
                ( FunctionT "ys"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                            ] [ Var IntS "F19" ]
                        ) ( BoolLit True ) ( Var IntS "I9" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                            ] [ Var IntS "F20" ]
                        ) ( BoolLit True ) ( Var IntS "I11" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "ys"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "ys"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "z"
                                    , "zs"
                                    ]
                                , expr = Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "Cons"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "z"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "append"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "zs"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Quick-Sort-Quadratic.sq"
        ( line 21
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I6"
            , []
            )
        ,
            ( "I7"
            , []
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I11"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F18"
            , []
            )
        ,
            ( "F19"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F20"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "ys"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m z [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m True SAT
Goal
    { gName = "quickSort"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "append"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "xs"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                            ] [ Var IntS "F18" ]
                                        ) ( BoolLit True ) ( Var IntS "I7" )
                                    )
                                    ( FunctionT "ys"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                ] [ Var IntS "F19" ]
                                            ) ( BoolLit True ) ( Var IntS "I9" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                                ] [ Var IntS "F20" ]
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "partition"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( ForallP
                                    ( PredSig
                                        { predSigName = "r"
                                        , predSigArgSorts = []
                                        , predSigResSort = IntS
                                        }
                                    )
                                    ( Monotype
                                        ( FunctionT "x"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            )
                                            ( FunctionT "xs"
                                                ( ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                        ] [ Var IntS "F16" ]
                                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                                )
                                                ( ScalarT
                                                    ( DatatypeT "Pair"
                                                        [ ScalarT
                                                            ( DatatypeT "List"
                                                                [ ScalarT
                                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                                ] [ Var IntS "F17" ]
                                                            ) ( BoolLit True ) ( Var IntS "I4" )
                                                        ] []
                                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                                ) 0
                                            ) 0
                                        )
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "append"
            , "partition"
            , "quickSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "append"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F18" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( FunctionT "ys"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I10" )
                                        ] [ Var IntS "F20" ]
                                    ) ( BoolLit True ) ( Var IntS "I11" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "partition"
                , ForallT "a"
                    ( ForallP
                        ( PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        )
                        ( ForallP
                            ( PredSig
                                { predSigName = "r"
                                , predSigArgSorts = []
                                , predSigResSort = IntS
                                }
                            )
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F16" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                        ] [ Var IntS "F17" ]
                                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    )
                )
            ,
                ( "quickSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                                    ] [ Var IntS "F21" ]
                                ) ( BoolLit True ) ( Var IntS "I13" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                                    ] [ Var IntS "F22" ]
                                ) ( BoolLit True ) ( Var IntS "I15" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I12" )
                        ] [ Var IntS "F21" ]
                    ) ( BoolLit True ) ( Var IntS "I13" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I14" )
                        ] [ Var IntS "F22" ]
                    ) ( BoolLit True ) ( Var IntS "I15" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "partition"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "ys"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Pair"
                                    , argNames =
                                        [ "ls"
                                        , "gs"
                                        ]
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "append"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "quickSort"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "ls"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Cons"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "y"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "quickSort"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "gs"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Quick-Sort-Quadratic.sq"
        ( line 27
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I12"
            , []
            )
        ,
            ( "I13"
            , []
            )
        ,
            ( "I14"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I15"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F21"
            , []
            )
        ,
            ( "F22"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair ls gs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
partition :: <a> . <q :: Int> . <r :: Int> . x:{1**a||I0} -> xs:{List {1**a||I1} <F16>||I2} -> {Pair {List {1**a||I3} <F17>||I4}||I5}
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons y ys -> 
        match tick 1 (partition p
                        ys) with
          Pair ls gs -> 
            if y <= p
              then Pair (Cons y ls) gs
              else Pair ls (Cons y gs)

append :: <a> . xs:{List {1**a||I6} <F18>||I7} -> ys:{List {1**a||I8} <F19>||I9} -> {List {1**a||I10} <F20>||I11}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

quickSort :: <a> . xs:{List {1**a||I12} <F21>||I13} -> {List {1**a||I14} <F22>||I15}
<no file name>:1: Error:
  Insufficient resources

Goal
    { gName = "min"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Pair"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Pair"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Pair"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Pair"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "min"
            , "remove"
            , "selectionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "min"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F13" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "remove"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                        ] [ Var IntS "F14" ]
                                    ) ( BoolLit True ) ( Var IntS "I6" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                        ] [ Var IntS "F15" ]
                                    ) ( BoolLit True ) ( Var IntS "I8" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "selectionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                    ] [ Var IntS "F16" ]
                                ) ( BoolLit True ) ( Var IntS "I10" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I12" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                )
                ( FunctionT "xs"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                            ] [ Var IntS "F13" ]
                        ) ( BoolLit True ) ( Var IntS "I2" )
                    )
                    ( ScalarT
                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "x"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "<"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "x"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "min"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "y"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "min"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "ys"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-SelectionSort.sq"
        ( line 9
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I2"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F13"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==[0m [37m([0my [37m<[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "remove"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Pair"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Pair"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Pair"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Pair"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "min"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F13" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "min"
            , "remove"
            , "selectionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "min"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F13" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "remove"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                        ] [ Var IntS "F14" ]
                                    ) ( BoolLit True ) ( Var IntS "I6" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                        ] [ Var IntS "F15" ]
                                    ) ( BoolLit True ) ( Var IntS "I8" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "selectionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                    ] [ Var IntS "F16" ]
                                ) ( BoolLit True ) ( Var IntS "I10" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I12" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "x"
                ( ScalarT
                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                )
                ( FunctionT "xs"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                            ] [ Var IntS "F14" ]
                        ) ( BoolLit True ) ( Var IntS "I6" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                            ] [ Var IntS "F15" ]
                        ) ( BoolLit True ) ( Var IntS "I8" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "xs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "Nil"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "y"
                                    , "ys"
                                    ]
                                , expr = Program
                                    { content = PIf
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "=="
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "x"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "y"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "ys"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "y"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "remove"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "x"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "ys"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-SelectionSort.sq"
        ( line 18
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I4"
            , []
            )
        ,
            ( "I5"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I6"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ,
            ( "F14"
            ,
                [ Var ( VarS "a" ) "x" ]
            )
        ,
            ( "F15"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                , Var ( VarS "a" ) "x"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m==[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mx [37m==[0m y[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mx [37m==[0m y[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m==[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mx [37m==[0m y[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==[0m [37m([0mx [37m==[0m y[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "selectionSort"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Pair"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Pair"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Pair"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Pair"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "min"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                                ] [ Var IntS "F13" ]
                                            ) ( BoolLit True ) ( Var IntS "I2" )
                                        )
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "remove"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                                ] [ Var IntS "F14" ]
                                            ) ( BoolLit True ) ( Var IntS "I6" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                ] [ Var IntS "F15" ]
                                            ) ( BoolLit True ) ( Var IntS "I8" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "min"
            , "remove"
            , "selectionSort"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "min"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I1" )
                                        ] [ Var IntS "F13" ]
                                    ) ( BoolLit True ) ( Var IntS "I2" )
                                )
                                ( ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "remove"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                        ] [ Var IntS "F14" ]
                                    ) ( BoolLit True ) ( Var IntS "I6" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                        ] [ Var IntS "F15" ]
                                    ) ( BoolLit True ) ( Var IntS "I8" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "selectionSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                    ] [ Var IntS "F16" ]
                                ) ( BoolLit True ) ( Var IntS "I10" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I12" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                        ] [ Var IntS "F16" ]
                    ) ( BoolLit True ) ( Var IntS "I10" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                        ] [ Var IntS "F17" ]
                    ) ( BoolLit True ) ( Var IntS "I12" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "Cons"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PTick 1
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "min"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "y"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "xs"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "remove"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PTick 1
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PSymbol "min"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PSymbol "y"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "xs"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PTick 1
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "selectionSort"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "ys"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-SelectionSort.sq"
        ( line 28
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I9"
            , []
            )
        ,
            ( "I10"
            , []
            )
        ,
            ( "I11"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F16"
            , []
            )
        ,
            ( "F17"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
min :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F13>||I2} -> {1**a||I3}
min = \x . \xs . 
    match xs with
      Nil -> x
      Cons y ys -> 
        if y < x
          then tick 1 (min y ys)
          else tick 1 (min x ys)

remove :: <a> . x:{1**a||I4} -> xs:{List {1**a||I5} <F14>||I6} -> {List {1**a||I7} <F15>||I8}
remove = \x . \xs . 
    match xs with
      Nil -> Nil
      Cons y ys -> 
        if x == y
          then ys
          else Cons y (tick 1 (remove x
                                 ys))

selectionSort :: <a> . arg0:{List {1**a||I9} <F16>||I10} -> {List {1**a||I11} <F17>||I12}
<no file name>:1: Error:
  Insufficient resources

Goal
    { gName = "split"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "merge"
            , "mergeSort"
            , "split"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "merge"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                        ] [ Var IntS "F18" ]
                                    ) ( BoolLit True ) ( Var IntS "I8" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I10" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "mergeSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                    ] [ Var IntS "F20" ]
                                ) ( BoolLit True ) ( Var IntS "I12" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                    ] [ Var IntS "F21" ]
                                ) ( BoolLit True ) ( Var IntS "I14" )
                            ) 0
                        )
                    )
                )
            ,
                ( "split"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F15" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] [ Var IntS "F16" ]
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I4" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] [ Var IntS "F15" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( ScalarT
                    ( DatatypeT "Pair"
                        [ ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                ] [ Var IntS "F16" ]
                            ) ( BoolLit True ) ( Var IntS "I3" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I4" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "l"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "l"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "Pair"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "Nil"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PSymbol "Nil"
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "x"
                            , "xs"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PSymbol "xs"
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Nil"
                                    , argNames = []
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "Pair"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "x"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "Nil"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "Nil"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                , Case
                                    { constructor = "Cons"
                                    , argNames =
                                        [ "y"
                                        , "ys"
                                        ]
                                    , expr = Program
                                        { content = PMatch
                                            ( Program
                                                { content = PTick 1
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "split"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "ys"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            [ Case
                                                { constructor = "Pair"
                                                , argNames =
                                                    [ "u"
                                                    , "v"
                                                    ]
                                                , expr = Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Pair"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PSymbol "Cons"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PSymbol "x"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "u"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "Cons"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "y"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "v"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                }
                                            ]
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Merge-Sort-Quadratic.sq"
        ( line 9
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F15"
            , []
            )
        ,
            ( "F16"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m [37m([0mNil[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x12 x13[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x x13[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons x [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mNil[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x23 x24[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x x24[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons x u[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x27 x28[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons y x28[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons y v[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "merge"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "split"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F15" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Pair"
                                            [ ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                    ] [ Var IntS "F16" ]
                                                ) ( BoolLit True ) ( Var IntS "I3" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I4" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "merge"
            , "mergeSort"
            , "split"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "merge"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                        ] [ Var IntS "F18" ]
                                    ) ( BoolLit True ) ( Var IntS "I8" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I10" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "mergeSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                    ] [ Var IntS "F20" ]
                                ) ( BoolLit True ) ( Var IntS "I12" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                    ] [ Var IntS "F21" ]
                                ) ( BoolLit True ) ( Var IntS "I14" )
                            ) 0
                        )
                    )
                )
            ,
                ( "split"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F15" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] [ Var IntS "F16" ]
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I4" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                        ] [ Var IntS "F17" ]
                    ) ( BoolLit True ) ( Var IntS "I6" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                            ] [ Var IntS "F18" ]
                        ) ( BoolLit True ) ( Var IntS "I8" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                            ] [ Var IntS "F19" ]
                        ) ( BoolLit True ) ( Var IntS "I10" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "ps"
            ( Program
                { content = PFun "qs"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "ps"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "qs"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PSymbol "qs"
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Nil"
                                            , argNames = []
                                            , expr = Program
                                                { content = PSymbol "ps"
                                                , typeOf = AnyT
                                                }
                                            }
                                        , Case
                                            { constructor = "Cons"
                                            , argNames =
                                                [ "y"
                                                , "ys"
                                                ]
                                            , expr = Program
                                                { content = PIf
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "<="
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "x"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "y"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "x"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Cons"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "y"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "merge"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "xs"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "ys"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "y"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Cons"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "x"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "merge"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "xs"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "ys"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Merge-Sort-Quadratic.sq"
        ( line 20
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I5"
            , []
            )
        ,
            ( "I6"
            , []
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F17"
            , []
            )
        ,
            ( "F18"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F19"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mps [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m y[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m x[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mx [37m<=[0m y[37m)[0m[37m)[0m [37m&&[0m ps [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m qs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
Goal
    { gName = "mergeSort"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "split"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F15" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Pair"
                                            [ ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                    ] [ Var IntS "F16" ]
                                                ) ( BoolLit True ) ( Var IntS "I3" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I4" )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "merge"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                            ] [ Var IntS "F17" ]
                                        ) ( BoolLit True ) ( Var IntS "I6" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                                ] [ Var IntS "F18" ]
                                            ) ( BoolLit True ) ( Var IntS "I8" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                                ] [ Var IntS "F19" ]
                                            ) ( BoolLit True ) ( Var IntS "I10" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Pair"
            , "Singleton"
            , "merge"
            , "mergeSort"
            , "split"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "merge"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                        ] [ Var IntS "F18" ]
                                    ) ( BoolLit True ) ( Var IntS "I8" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I9" )
                                        ] [ Var IntS "F19" ]
                                    ) ( BoolLit True ) ( Var IntS "I10" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "mergeSort"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                                    ] [ Var IntS "F20" ]
                                ) ( BoolLit True ) ( Var IntS "I12" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                                    ] [ Var IntS "F21" ]
                                ) ( BoolLit True ) ( Var IntS "I14" )
                            ) 0
                        )
                    )
                )
            ,
                ( "split"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F15" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] [ Var IntS "F16" ]
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I4" )
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I11" )
                        ] [ Var IntS "F20" ]
                    ) ( BoolLit True ) ( Var IntS "I12" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I13" )
                        ] [ Var IntS "F21" ]
                    ) ( BoolLit True ) ( Var IntS "I14" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PSymbol "Nil"
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PSymbol "ys"
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Nil"
                                    , argNames = []
                                    , expr = Program
                                        { content = PSymbol "xs"
                                        , typeOf = AnyT
                                        }
                                    }
                                , Case
                                    { constructor = "Cons"
                                    , argNames =
                                        [ "z"
                                        , "zs"
                                        ]
                                    , expr = Program
                                        { content = PMatch
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "split"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "xs"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            [ Case
                                                { constructor = "Pair"
                                                , argNames =
                                                    [ "u"
                                                    , "v"
                                                    ]
                                                , expr = Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "merge"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "mergeSort"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "u"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "mergeSort"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "v"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                }
                                            ]
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Merge-Sort-Quadratic.sq"
        ( line 32
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I11"
            , []
            )
        ,
            ( "I12"
            , []
            )
        ,
            ( "I13"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I14"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F20"
            , []
            )
        ,
            ( "F21"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair u v[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons z zs[37m)[0m[37m)[0m [37m&&[0m G1 [37m==[0m [37m([0mPair u v[37m)[0m [37m==>[0m True[37m)[0m UNSAT
split :: <a> . arg0:{List {1**a||I0} <F15>||I1} -> {Pair {List {1**a||I2} <F16>||I3}||I4}
split = \l . 
  match l with
    Nil -> Pair Nil Nil
    Cons x xs -> 
      match xs with
        Nil -> Pair (Cons x Nil) Nil
        Cons y ys -> 
          match tick 1 (split ys) with
            Pair u v -> Pair (Cons x u)
                          (Cons y v)

merge :: <a> . arg1:{List {1**a||I5} <F17>||I6} -> arg0:{List {1**a||I7} <F18>||I8} -> {List {1**a||I9} <F19>||I10}
merge = \ps . \qs . 
    match ps with
      Nil -> qs
      Cons x xs -> 
        match qs with
          Nil -> ps
          Cons y ys -> 
            if x <= y
              then Cons x (Cons y (merge xs
                                     ys))
              else Cons y (Cons x (merge xs
                                     ys))

mergeSort :: <a> . arg0:{List {1**a||I11} <F20>||I12} -> {List {1**a||I13} <F21>||I14}
<no file name>:1: Error:
  Insufficient resources

Goal
    { gName = "split"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Tree" [ VarS "a" ] ) "Leaf"
                                                    [ Var ( VarS "a" ) "x" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "l"
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( FunctionT "r"
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                        [ Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "l"
                                                        , Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "r"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Leaf"
            , "Nil"
            , "Node"
            , "Pair"
            , "Singleton"
            , "split"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "l"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( FunctionT "r"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "split"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F5" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] [ Var IntS "F6" ]
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I4" )
                            ) 1
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] [ Var IntS "F5" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( ScalarT
                    ( DatatypeT "Pair"
                        [ ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                ] [ Var IntS "F6" ]
                            ) ( BoolLit True ) ( Var IntS "I3" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I4" )
                ) 1
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "Pair"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "xs"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PSymbol "xs"
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "split"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "ys"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Pair"
                                    , argNames =
                                        [ "ls"
                                        , "rs"
                                        ]
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "Pair"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "rs"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Cons"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "y"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "ls"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Merge-Sort.sq"
        ( line 15
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F5"
            , []
            )
        ,
            ( "F6"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m xs [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m rs [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x14 x15[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons y x15[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons y ls[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
split :: <a> . arg0:{List {1**a||I0} <F5>||I1} -[1]-> {Pair {List {1**a||I2} <F6>||I3}||I4}
<no file name>:1: Error:
  Insufficient resources

Goal
    { gName = "split"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Tree" [ VarS "a" ] ) "Leaf"
                                                    [ Var ( VarS "a" ) "x" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "l"
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( FunctionT "r"
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                        [ Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "l"
                                                        , Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "r"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Leaf"
            , "Nil"
            , "Node"
            , "Pair"
            , "Singleton"
            , "build"
            , "split"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "l"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( FunctionT "r"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "build"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 1
                        )
                    )
                )
            ,
                ( "split"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F9" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] [ Var IntS "F10" ]
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I4" )
                            ) 1
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] [ Var IntS "F9" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( ScalarT
                    ( DatatypeT "Pair"
                        [ ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                ] [ Var IntS "F10" ]
                            ) ( BoolLit True ) ( Var IntS "I3" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I4" )
                ) 1
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "Pair"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "xs"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PSymbol "xs"
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "split"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "ys"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Pair"
                                    , argNames =
                                        [ "ls"
                                        , "rs"
                                        ]
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "Pair"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "rs"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Cons"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PSymbol "y"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "ls"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Merge-Build.sq"
        ( line 15
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F9"
            , []
            )
        ,
            ( "F10"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m xs [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons y ys[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m rs [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x14 x15[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m y [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons y x15[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons y ls[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons y ys[37m)[0m[37m)[0m [37m&&[0m G0 [37m==[0m [37m([0mPair ls rs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "build"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Tree" [ VarS "a" ] ) "Leaf"
                                                    [ Var ( VarS "a" ) "x" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "split"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F9" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "Pair"
                                            [ ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                    ] [ Var IntS "F10" ]
                                                ) ( BoolLit True ) ( Var IntS "I3" )
                                            ] []
                                        ) ( BoolLit True ) ( Var IntS "I4" )
                                    ) 1
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "l"
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( FunctionT "r"
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                        [ Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "l"
                                                        , Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "r"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Pair"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Pair"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Pair" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Pair" [ VarS "a" ] ) "Pair"
                                                    [ Var ( VarS "a" ) "arg1"
                                                    , Var ( VarS "a" ) "arg0"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Leaf"
            , "Nil"
            , "Node"
            , "Pair"
            , "Singleton"
            , "build"
            , "split"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Pair"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Pair" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "l"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( FunctionT "r"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Pair"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "build"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                                    ] [ Var IntS "F11" ]
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            )
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                                    ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            ) 1
                        )
                    )
                )
            ,
                ( "split"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F9" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( ScalarT
                                ( DatatypeT "Pair"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                            ] [ Var IntS "F10" ]
                                        ) ( BoolLit True ) ( Var IntS "I3" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I4" )
                            ) 1
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "xs"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I5" )
                        ] [ Var IntS "F11" ]
                    ) ( BoolLit True ) ( Var IntS "I6" )
                )
                ( ScalarT
                    ( DatatypeT "Tree"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I7" )
                        ] [ Var IntS "F12" ]
                    ) ( BoolLit True ) ( Var IntS "I8" )
                ) 1
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "xs"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Nil"
                        , argNames = []
                        , expr = Program
                            { content = PErr
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Cons"
                        , argNames =
                            [ "y"
                            , "ys"
                            ]
                        , expr = Program
                            { content = PMatch
                                ( Program
                                    { content = PSymbol "ys"
                                    , typeOf = AnyT
                                    }
                                )
                                [ Case
                                    { constructor = "Nil"
                                    , argNames = []
                                    , expr = Program
                                        { content = PApp
                                            ( Program
                                                { content = PSymbol "Leaf"
                                                , typeOf = AnyT
                                                }
                                            )
                                            ( Program
                                                { content = PSymbol "y"
                                                , typeOf = AnyT
                                                }
                                            )
                                        , typeOf = AnyT
                                        }
                                    }
                                , Case
                                    { constructor = "Cons"
                                    , argNames =
                                        [ "z"
                                        , "zs"
                                        ]
                                    , expr = Program
                                        { content = PMatch
                                            ( Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PSymbol "split"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "y"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Cons"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "z"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "zs"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            )
                                            [ Case
                                                { constructor = "Pair"
                                                , argNames =
                                                    [ "l"
                                                    , "r"
                                                    ]
                                                , expr = Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "Node"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "build"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "l"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "build"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "r"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                }
                                            ]
                                        , typeOf = AnyT
                                        }
                                    }
                                ]
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Merge-Build.sq"
        ( line 23
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I5"
            , []
            )
        ,
            ( "I6"
            , []
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ,
            ( "F11"
            , []
            )
        ,
            ( "F12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "xs"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m xs [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m [37m==>[0m False[37m)[0m SAT
Seed [xs [37m==[0m xs [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m]
MSS [xs [37m==[0m xs [37m&&[0m xs [37m==[0m [37m([0mNil[37m)[0m]
split :: <a> . arg0:{List {1**a||I0} <F9>||I1} -[1]-> {Pair {List {1**a||I2} <F10>||I3}||I4}
split = \xs . 
  match xs with
    Nil -> Pair xs xs
    Cons y ys -> 
      match split ys with
        Pair ls rs -> Pair rs (Cons y
                                 ls)

build :: <a> . xs:{List {1**a||I5} <F11>||I6} -[1]-> {Tree {1**a||I7} <F12>||I8}
neg/List-Merge-Build.sq:23: Error:
  Cannot find sufficiently strong refinements
  when checking error in
  \xs . 
    match xs with
      Nil -> error

Goal
    { gName = "merge"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Tree" [ VarS "a" ] ) "Leaf"
                                                    [ Var ( VarS "a" ) "x" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "l"
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( FunctionT "r"
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                        [ Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "l"
                                                        , Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "r"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Leaf"
            , "Nil"
            , "Node"
            , "Singleton"
            , "flatten"
            , "merge"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "l"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( FunctionT "r"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "flatten"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F13" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F14" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "merge"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F10" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F11" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F12" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        ] [ Var IntS "F10" ]
                    ) ( BoolLit True ) ( Var IntS "I1" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                            ] [ Var IntS "F11" ]
                        ) ( BoolLit True ) ( Var IntS "I3" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                            ] [ Var IntS "F12" ]
                        ) ( BoolLit True ) ( Var IntS "I5" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "xs"
            ( Program
                { content = PFun "ys"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "xs"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "ys"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "xh"
                                    , "xt"
                                    ]
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PSymbol "ys"
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Nil"
                                            , argNames = []
                                            , expr = Program
                                                { content = PSymbol "xs"
                                                , typeOf = AnyT
                                                }
                                            }
                                        , Case
                                            { constructor = "Cons"
                                            , argNames =
                                                [ "yh"
                                                , "yt"
                                                ]
                                            , expr = Program
                                                { content = PIf
                                                    ( Program
                                                        { content = PTick 1
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "<"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "xh"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "yh"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "xh"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "merge"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "xt"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PSymbol "Cons"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "yh"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PSymbol "yt"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PSymbol "Cons"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "yh"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "merge"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PSymbol "Cons"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "xh"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "xt"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "yt"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Merge-Flatten.sq"
        ( line 12
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F10"
            , []
            )
        ,
            ( "F11"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ,
            ( "F12"
            ,
                [ Var
                    ( DataS "List" [ VarS "a" ] ) "arg0"
                , Var
                    ( DataS "List" [ VarS "a" ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mxs [37m==[0m [37m([0mCons xh xt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m xh [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m yh [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m xh[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m yh[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m yh[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m xh[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mxh [37m<[0m yh[37m)[0m [37m&&[0m xs [37m==[0m [37m([0mCons xh xt[37m)[0m[37m)[0m [37m&&[0m ys [37m==[0m [37m([0mCons yh yt[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "flatten"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Leaf"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] [ Pred IntS "q" [] ]
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "Tree" [ VarS "a" ] ) "Leaf"
                                                    [ Var ( VarS "a" ) "x" ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Node"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "l"
                                        ( ScalarT
                                            ( DatatypeT "Tree"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                ] [ Pred IntS "q" [] ]
                                            ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( FunctionT "r"
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tree"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tree" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tree" [ VarS "a" ] ) "Node"
                                                        [ Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "l"
                                                        , Var
                                                            ( DataS "Tree" [ VarS "a" ] ) "r"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "merge"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "arg1"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                            ] [ Var IntS "F10" ]
                                        ) ( BoolLit True ) ( Var IntS "I1" )
                                    )
                                    ( FunctionT "arg0"
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                                ] [ Var IntS "F11" ]
                                            ) ( BoolLit True ) ( Var IntS "I3" )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "List"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                                ] [ Var IntS "F12" ]
                                            ) ( BoolLit True ) ( Var IntS "I5" )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Leaf"
            , "Nil"
            , "Node"
            , "Singleton"
            , "flatten"
            , "merge"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tree"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Leaf"
                        , "Node"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Leaf"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        )
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Node"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "l"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                    ] [ Pred AnyS "q" [] ]
                                ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( FunctionT "r"
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "Tree"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "flatten"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "Tree"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                                    ] [ Var IntS "F13" ]
                                ) ( BoolLit True ) ( Var IntS "I7" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                    ] [ Var IntS "F14" ]
                                ) ( BoolLit True ) ( Var IntS "I9" )
                            ) 0
                        )
                    )
                )
            ,
                ( "merge"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    ] [ Var IntS "F10" ]
                                ) ( BoolLit True ) ( Var IntS "I1" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I2" )
                                        ] [ Var IntS "F11" ]
                                    ) ( BoolLit True ) ( Var IntS "I3" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I4" )
                                        ] [ Var IntS "F12" ]
                                    ) ( BoolLit True ) ( Var IntS "I5" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "Tree"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I6" )
                        ] [ Var IntS "F13" ]
                    ) ( BoolLit True ) ( Var IntS "I7" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                        ] [ Var IntS "F14" ]
                    ) ( BoolLit True ) ( Var IntS "I9" )
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "t"
            ( Program
                { content = PMatch
                    ( Program
                        { content = PSymbol "t"
                        , typeOf = AnyT
                        }
                    )
                    [ Case
                        { constructor = "Leaf"
                        , argNames = [ "x" ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "Cons"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "x"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PSymbol "Nil"
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    , Case
                        { constructor = "Node"
                        , argNames =
                            [ "l"
                            , "r"
                            ]
                        , expr = Program
                            { content = PApp
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "merge"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PSymbol "flatten"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PSymbol "l"
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                                ( Program
                                    { content = PApp
                                        ( Program
                                            { content = PSymbol "flatten"
                                            , typeOf = AnyT
                                            }
                                        )
                                        ( Program
                                            { content = PSymbol "r"
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                )
                            , typeOf = AnyT
                            }
                        }
                    ]
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/List-Merge-Flatten.sq"
        ( line 23
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I6"
            , []
            )
        ,
            ( "I7"
            , []
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg0"
                ]
            )
        ,
            ( "F13"
            , []
            )
        ,
            ( "F14"
            ,
                [ Var
                    ( DataS "Tree" [ VarS "a" ] ) "arg0"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m x [37m&&[0m t [37m==[0m [37m([0mLeaf x[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m t [37m==[0m [37m([0mNode l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode l r[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mt [37m==[0m [37m([0mNode l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m&&[0m t [37m==[0m [37m([0mNode l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m t [37m==[0m [37m([0mNode l r[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mt [37m==[0m [37m([0mNode l r[37m)[0m [37m==>[0m True[37m)[0m UNSAT
merge :: <a> . arg1:{List {1**a||I0} <F10>||I1} -> arg0:{List {1**a||I2} <F11>||I3} -> {List {1**a||I4} <F12>||I5}
merge = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons xh xt -> 
        match ys with
          Nil -> xs
          Cons yh yt -> 
            if tick 1 (xh < yh)
              then Cons xh (merge xt (Cons yh
                                        yt))
              else Cons yh (merge (Cons xh xt)
                              yt)

flatten :: <a> . arg0:{Tree {1**a||I6} <F13>||I7} -> {List {1**a||I8} <F14>||I9}
<no file name>:1: Error:
  Insufficient resources

Goal
    { gName = "insert"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "Tuple"
                        , ForallT "b"
                            ( ForallT "a"
                                ( Monotype
                                    ( FunctionT "arg1"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( FunctionT "arg0"
                                            ( ScalarT
                                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "Tuple"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    , ScalarT
                                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] []
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "Tuple"
                                                            [ VarS "a"
                                                            , VarS "b"
                                                            ]
                                                        ) "Tuple"
                                                        [ Var ( VarS "a" ) "arg1"
                                                        , Var ( VarS "b" ) "arg0"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            , "Tuple"
            , "insert"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ,
                ( "Tuple"
                , DatatypeDef
                    { _typeParams =
                        [ "a"
                        , "b"
                        ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors = [ "Tuple" ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "Tuple"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    , ScalarT
                                        ( TypeVarT ( fromList [] ) "b" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "insert"
                , ForallT "a"
                    ( Monotype
                        ( FunctionT "arg1"
                            ( ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                                    , ScalarT IntT ( BoolLit True ) ( Var IntS "I1" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I2" )
                            )
                            ( FunctionT "arg0"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                                        ] [ Var IntS "F13" ]
                                                    ) ( BoolLit True ) ( Var IntS "I4" )
                                                , ScalarT IntT ( BoolLit True ) ( Var IntS "I5" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I6" )
                                        ] [ Var IntS "F14" ]
                                    ) ( BoolLit True ) ( Var IntS "I7" )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( DatatypeT "Tuple"
                                                [ ScalarT
                                                    ( DatatypeT "List"
                                                        [ ScalarT
                                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                                        ] [ Var IntS "F15" ]
                                                    ) ( BoolLit True ) ( Var IntS "I9" )
                                                , ScalarT IntT ( BoolLit True ) ( Var IntS "I10" )
                                                ] []
                                            ) ( BoolLit True ) ( Var IntS "I11" )
                                        ] [ Var IntS "F16" ]
                                    ) ( BoolLit True ) ( Var IntS "I12" )
                                ) 0
                            ) 0
                        )
                    )
                )
            ]
        }
    , gSpec = ForallT "a"
        ( Monotype
            ( FunctionT "arg1"
                ( ScalarT
                    ( DatatypeT "Tuple"
                        [ ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I0" )
                        , ScalarT IntT ( BoolLit True ) ( Var IntS "I1" )
                        ] []
                    ) ( BoolLit True ) ( Var IntS "I2" )
                )
                ( FunctionT "arg0"
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I3" )
                                            ] [ Var IntS "F13" ]
                                        ) ( BoolLit True ) ( Var IntS "I4" )
                                    , ScalarT IntT ( BoolLit True ) ( Var IntS "I5" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I6" )
                            ] [ Var IntS "F14" ]
                        ) ( BoolLit True ) ( Var IntS "I7" )
                    )
                    ( ScalarT
                        ( DatatypeT "List"
                            [ ScalarT
                                ( DatatypeT "Tuple"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var IntS "I8" )
                                            ] [ Var IntS "F15" ]
                                        ) ( BoolLit True ) ( Var IntS "I9" )
                                    , ScalarT IntT ( BoolLit True ) ( Var IntS "I10" )
                                    ] []
                                ) ( BoolLit True ) ( Var IntS "I11" )
                            ] [ Var IntS "F16" ]
                        ) ( BoolLit True ) ( Var IntS "I12" )
                    ) 0
                ) 0
            )
        )
    , gImpl = Program
        { content = PFun "x"
            ( Program
                { content = PFun "l"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "x"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Tuple"
                                , argNames =
                                    [ "valX"
                                    , "keyX"
                                    ]
                                , expr = Program
                                    { content = PMatch
                                        ( Program
                                            { content = PSymbol "l"
                                            , typeOf = AnyT
                                            }
                                        )
                                        [ Case
                                            { constructor = "Nil"
                                            , argNames = []
                                            , expr = Program
                                                { content = PApp
                                                    ( Program
                                                        { content = PApp
                                                            ( Program
                                                                { content = PSymbol "Cons"
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                            ( Program
                                                                { content = PApp
                                                                    ( Program
                                                                        { content = PApp
                                                                            ( Program
                                                                                { content = PSymbol "Tuple"
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                            ( Program
                                                                                { content = PApp
                                                                                    ( Program
                                                                                        { content = PApp
                                                                                            ( Program
                                                                                                { content = PSymbol "Cons"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                            ( Program
                                                                                                { content = PSymbol "valX"
                                                                                                , typeOf = AnyT
                                                                                                }
                                                                                            )
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                    ( Program
                                                                                        { content = PSymbol "Nil"
                                                                                        , typeOf = AnyT
                                                                                        }
                                                                                    )
                                                                                , typeOf = AnyT
                                                                                }
                                                                            )
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                    ( Program
                                                                        { content = PSymbol "keyX"
                                                                        , typeOf = AnyT
                                                                        }
                                                                    )
                                                                , typeOf = AnyT
                                                                }
                                                            )
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    ( Program
                                                        { content = PSymbol "Nil"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                , typeOf = AnyT
                                                }
                                            }
                                        , Case
                                            { constructor = "Cons"
                                            , argNames =
                                                [ "l1"
                                                , "ls"
                                                ]
                                            , expr = Program
                                                { content = PMatch
                                                    ( Program
                                                        { content = PSymbol "l1"
                                                        , typeOf = AnyT
                                                        }
                                                    )
                                                    [ Case
                                                        { constructor = "Tuple"
                                                        , argNames =
                                                            [ "vals1"
                                                            , "key1"
                                                            ]
                                                        , expr = Program
                                                            { content = PIf
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PSymbol "=="
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PSymbol "key1"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "keyX"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PTick 1
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PApp
                                                                                        ( Program
                                                                                            { content = PSymbol "Cons"
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                        ( Program
                                                                                            { content = PApp
                                                                                                ( Program
                                                                                                    { content = PApp
                                                                                                        ( Program
                                                                                                            { content = PSymbol "Tuple"
                                                                                                            , typeOf = AnyT
                                                                                                            }
                                                                                                        )
                                                                                                        ( Program
                                                                                                            { content = PApp
                                                                                                                ( Program
                                                                                                                    { content = PApp
                                                                                                                        ( Program
                                                                                                                            { content = PSymbol "Cons"
                                                                                                                            , typeOf = AnyT
                                                                                                                            }
                                                                                                                        )
                                                                                                                        ( Program
                                                                                                                            { content = PSymbol "valX"
                                                                                                                            , typeOf = AnyT
                                                                                                                            }
                                                                                                                        )
                                                                                                                    , typeOf = AnyT
                                                                                                                    }
                                                                                                                )
                                                                                                                ( Program
                                                                                                                    { content = PSymbol "vals1"
                                                                                                                    , typeOf = AnyT
                                                                                                                    }
                                                                                                                )
                                                                                                            , typeOf = AnyT
                                                                                                            }
                                                                                                        )
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                                ( Program
                                                                                                    { content = PSymbol "key1"
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PSymbol "ls"
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PTick 1
                                                                        ( Program
                                                                            { content = PApp
                                                                                ( Program
                                                                                    { content = PApp
                                                                                        ( Program
                                                                                            { content = PSymbol "Cons"
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                        ( Program
                                                                                            { content = PApp
                                                                                                ( Program
                                                                                                    { content = PApp
                                                                                                        ( Program
                                                                                                            { content = PSymbol "Tuple"
                                                                                                            , typeOf = AnyT
                                                                                                            }
                                                                                                        )
                                                                                                        ( Program
                                                                                                            { content = PSymbol "vals1"
                                                                                                            , typeOf = AnyT
                                                                                                            }
                                                                                                        )
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                                ( Program
                                                                                                    { content = PSymbol "key1"
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                                ( Program
                                                                                    { content = PApp
                                                                                        ( Program
                                                                                            { content = PApp
                                                                                                ( Program
                                                                                                    { content = PSymbol "insert"
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                                ( Program
                                                                                                    { content = PSymbol "x"
                                                                                                    , typeOf = AnyT
                                                                                                    }
                                                                                                )
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                        ( Program
                                                                                            { content = PSymbol "ls"
                                                                                            , typeOf = AnyT
                                                                                            }
                                                                                        )
                                                                                    , typeOf = AnyT
                                                                                    }
                                                                                )
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        }
                                                    ]
                                                , typeOf = AnyT
                                                }
                                            }
                                        ]
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/RAML-SplitAndSort.sq"
        ( line 10
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , []
            )
        ,
            ( "I2"
            , []
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I5"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I6"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List"
                        [ DataS "Tuple"
                            [ DataS "List" [ VarS "a" ]
                            , IntS
                            ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "List"
                        [ DataS "Tuple"
                            [ DataS "List" [ VarS "a" ]
                            , IntS
                            ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I10"
            ,
                [ Var
                    ( DataS "List"
                        [ DataS "Tuple"
                            [ DataS "List" [ VarS "a" ]
                            , IntS
                            ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I11"
            ,
                [ Var
                    ( DataS "List"
                        [ DataS "Tuple"
                            [ DataS "List" [ VarS "a" ]
                            , IntS
                            ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "I12"
            ,
                [ Var
                    ( DataS "List"
                        [ DataS "Tuple"
                            [ DataS "List" [ VarS "a" ]
                            , IntS
                            ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "F13"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "F14"
            ,
                [ Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "F15"
            ,
                [ Var
                    ( DataS "List"
                        [ DataS "Tuple"
                            [ DataS "List" [ VarS "a" ]
                            , IntS
                            ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ,
            ( "F16"
            ,
                [ Var
                    ( DataS "List"
                        [ DataS "Tuple"
                            [ DataS "List" [ VarS "a" ]
                            , IntS
                            ]
                        ]
                    ) "arg0"
                , Var
                    ( DataS "Tuple"
                        [ VarS "a"
                        , IntS
                        ]
                    ) "arg1"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mx [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mx [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mx [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mx [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple x8 x9[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x12 x13[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m valX [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons valX x13[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m [37m([0mCons valX [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m x8 [37m==[0m [37m([0mCons valX [37m([0mNil[37m)[0m[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple x8 x9[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[1m_v[0m [37m==[0m keyX [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mx8 [37m==[0m [37m([0mCons valX [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple x8 keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0mTrue [37m&&[0m l [37m==[0m [37m([0mNil[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons l1 ls[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons l1 ls[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons l1 ls[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m key1 [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[1m_v[0m [37m==[0m keyX [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple x25 x26[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons x29 x30[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m valX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons valX x30[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mCons valX vals1[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m x25 [37m==[0m [37m([0mCons valX vals1[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple x25 x26[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m key1[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m x25 [37m==[0m [37m([0mCons valX vals1[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple x25 key1[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mTrue [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple x37 x38[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m vals1[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple vals1 x38[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m key1[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m [1m_v[0m [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[37m([0m[37m([0mFalse [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0m[37m([0m[37m([0m[37m([0mTrue [37m&&[0m True[37m)[0m [37m&&[0m False [37m==[0m [37m([0mkey1 [37m==[0m keyX[37m)[0m[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons l1 ls[37m)[0m[37m)[0m [37m&&[0m x [37m==[0m [37m([0mTuple valX keyX[37m)[0m[37m)[0m [37m&&[0m l1 [37m==[0m [37m([0mTuple vals1 key1[37m)[0m[37m)[0m [37m&&[0m True SAT
insert :: <a> . arg1:{Tuple {1**a||I0} {Int||I1}||I2} -> arg0:{List {Tuple {List {1**a||I3} <F13>||I4} {Int||I5}||I6} <F14>||I7} -> {List {Tuple {List {1**a||I8} <F15>||I9} {Int||I10}||I11} <F16>||I12}
<no file name>:1: Error:
  Insufficient resources

Goal
    { gName = "mult"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ]
                                                    [ Binary Times ( IntLit 2 ) ( Pred IntS "q" [] ) ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ]
                                        [ Binary Times ( IntLit 2 ) ( Var AnyS "q" ) ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "dyade"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I5" ) ] [ Var IntS "F14" ]
                            ) ( BoolLit True ) ( Var IntS "I6" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) ] [ Var IntS "F15" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) ] [ Var IntS "F16" ]
                                        ) ( BoolLit True ) ( Var IntS "I10" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I11" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I1" ) ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I2" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ] [ Var IntS "F13" ]
                                ) ( BoolLit True ) ( Var IntS "I4" )
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) )
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I1" ) ] [ Var IntS "F12" ]
                    ) ( BoolLit True ) ( Var IntS "I2" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ] [ Var IntS "F13" ]
                    ) ( BoolLit True ) ( Var IntS "I4" )
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "n"
            ( Program
                { content = PFun "l"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "l"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "Nil"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "*"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "n"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "x"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "mult"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "n"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "xs"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/RAML-Dyadic.sq"
        ( line 6
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I0"
            , []
            )
        ,
            ( "I1"
            , [ Var IntS "arg1" ]
            )
        ,
            ( "I2"
            , [ Var IntS "arg1" ]
            )
        ,
            ( "I3"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var IntS "arg1"
                ]
            )
        ,
            ( "I4"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var IntS "arg1"
                ]
            )
        ,
            ( "F12"
            , [ Var IntS "arg1" ]
            )
        ,
            ( "F13"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var IntS "arg1"
                ]
            )
        ]
    , gInferSolve = False
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0mFalse [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m x7 [37m*[0m x8[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m([0m[37m([0mTrue [37m&&[0m [1m_v[0m [37m==[0m n [37m*[0m x8[37m)[0m [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m[37m)[0m [37m&&[0m True SAT
SMT CHECK [37m![0m[37m([0m[1m_v[0m [37m==[0m n [37m*[0m x [37m&&[0m l [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
Goal
    { gName = "dyade"
    , gEnvironment = Environment
        { _symbols = fromList
            [
                ( 0
                , fromList
                    [
                        ( "Emptyset"
                        , ForallT "a"
                            ( Monotype
                                ( ScalarT
                                    ( DatatypeT "DSet"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] []
                                    )
                                    ( Binary Eq
                                        ( Var
                                            ( DataS "DSet" [ VarS "a" ] ) "_v"
                                        )
                                        ( Cons
                                            ( DataS "DSet" [ VarS "a" ] ) "Emptyset" []
                                        )
                                    ) ( IntLit 0 )
                                )
                            )
                        )
                    ,
                        ( "Nil"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] [ Pred IntS "q" [] ]
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "List" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "List" [ VarS "a" ] ) "Nil" []
                                            )
                                        ) ( IntLit 0 )
                                    )
                                )
                            )
                        )
                    ]
                )
            ,
                ( 1
                , fromList
                    [
                        ( "Singleton"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "DSet"
                                            [ ScalarT
                                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                            ] []
                                        )
                                        ( Binary Eq
                                            ( Var
                                                ( DataS "DSet" [ VarS "a" ] ) "_v"
                                            )
                                            ( Cons
                                                ( DataS "DSet" [ VarS "a" ] ) "Singleton"
                                                [ Var ( VarS "a" ) "x" ]
                                            )
                                        ) ( IntLit 0 )
                                    ) 0
                                )
                            )
                        )
                    ]
                )
            ,
                ( 2
                , fromList
                    [
                        ( "Cons"
                        , ForallT "a"
                            ( ForallP
                                ( PredSig
                                    { predSigName = "q"
                                    , predSigArgSorts = []
                                    , predSigResSort = IntS
                                    }
                                )
                                ( Monotype
                                    ( FunctionT "x"
                                        ( ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Pred IntS "q" [] )
                                        )
                                        ( FunctionT "xs"
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ]
                                                    [ Binary Times ( IntLit 2 ) ( Pred IntS "q" [] ) ]
                                                ) ( BoolLit True ) ( IntLit 0 )
                                            )
                                            ( ScalarT
                                                ( DatatypeT "List"
                                                    [ ScalarT
                                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                    ] [ Pred IntS "q" [] ]
                                                )
                                                ( Binary Eq
                                                    ( Var
                                                        ( DataS "List" [ VarS "a" ] ) "_v"
                                                    )
                                                    ( Cons
                                                        ( DataS "List" [ VarS "a" ] ) "Cons"
                                                        [ Var ( VarS "a" ) "x"
                                                        , Var
                                                            ( DataS "List" [ VarS "a" ] ) "xs"
                                                        ]
                                                    )
                                                ) ( IntLit 0 )
                                            ) 0
                                        ) 0
                                    )
                                )
                            )
                        )
                    ,
                        ( "Insert"
                        , ForallT "a"
                            ( Monotype
                                ( FunctionT "x"
                                    ( ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    )
                                    ( FunctionT "xs"
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            ) ( BoolLit True ) ( IntLit 0 )
                                        )
                                        ( ScalarT
                                            ( DatatypeT "DSet"
                                                [ ScalarT
                                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                                ] []
                                            )
                                            ( Binary Eq
                                                ( Var
                                                    ( DataS "DSet" [ VarS "a" ] ) "_v"
                                                )
                                                ( Cons
                                                    ( DataS "DSet" [ VarS "a" ] ) "Insert"
                                                    [ Var ( VarS "a" ) "x"
                                                    , Var
                                                        ( DataS "DSet" [ VarS "a" ] ) "xs"
                                                    ]
                                                )
                                            ) ( IntLit 0 )
                                        ) 0
                                    ) 0
                                )
                            )
                        )
                    ,
                        ( "mult"
                        , Monotype
                            ( FunctionT "arg1"
                                ( ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) )
                                ( FunctionT "arg0"
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I1" ) ] [ Var IntS "F12" ]
                                        ) ( BoolLit True ) ( Var IntS "I2" )
                                    )
                                    ( ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ] [ Var IntS "F13" ]
                                        ) ( BoolLit True ) ( Var IntS "I4" )
                                    ) 0
                                ) 0
                            )
                        )
                    ]
                )
            ]
        , _ghostSymbols = fromList
            [ "Cons"
            , "Emptyset"
            , "Insert"
            , "Nil"
            , "Singleton"
            ]
        , _freePotential = IntLit 0
        , _condFreePotential = []
        , _boundTypeVars = []
        , _boundPredicates = []
        , _assumptions = fromList []
        , _shapeConstraints = fromList []
        , _usedScrutinees = []
        , _unfoldedVars = fromList []
        , _letBound = fromList []
        , _measureConstArgs = fromList []
        , _constants = fromList []
        , _datatypes = fromList
            [
                ( "DSet"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams = []
                    , _predVariances = []
                    , _constructors =
                        [ "Emptyset"
                        , "Singleton"
                        , "Insert"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = []
                    }
                )
            ,
                ( "List"
                , DatatypeDef
                    { _typeParams = [ "a" ]
                    , _predParams =
                        [ PredSig
                            { predSigName = "q"
                            , predSigArgSorts = []
                            , predSigResSort = IntS
                            }
                        ]
                    , _predVariances = [ False ]
                    , _constructors =
                        [ "Nil"
                        , "Cons"
                        ]
                    , _wfMetric = Nothing
                    , _resourcePreds = [ True ]
                    }
                )
            ]
        , _globalPredicates = fromList []
        , _measureDefs = fromList []
        , _resourceMeasures = fromList []
        , _typeSynonyms = fromList []
        , _unresolvedConstants = fromList
            [
                ( "Cons"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( FunctionT "x"
                            ( ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( Var AnyS "q" )
                            )
                            ( FunctionT "xs"
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ]
                                        [ Binary Times ( IntLit 2 ) ( Var AnyS "q" ) ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                )
                                ( ScalarT
                                    ( DatatypeT "List"
                                        [ ScalarT
                                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                        ] [ Pred AnyS "q" [] ]
                                    ) ( BoolLit True ) ( IntLit 0 )
                                ) 0
                            ) 0
                        )
                    )
                )
            ,
                ( "Emptyset"
                , Monotype
                    ( ScalarT
                        ( DatatypeT "DSet"
                            [ ScalarT
                                ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                            ] []
                        ) ( BoolLit True ) ( IntLit 0 )
                    )
                )
            ,
                ( "Insert"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( FunctionT "xs"
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            )
                            ( ScalarT
                                ( DatatypeT "DSet"
                                    [ ScalarT
                                        ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                    ] []
                                ) ( BoolLit True ) ( IntLit 0 )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "Nil"
                , ForallP
                    ( PredSig
                        { predSigName = "q"
                        , predSigArgSorts = []
                        , predSigResSort = IntS
                        }
                    )
                    ( Monotype
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] [ Pred AnyS "q" [] ]
                            ) ( BoolLit True ) ( IntLit 0 )
                        )
                    )
                )
            ,
                ( "Singleton"
                , Monotype
                    ( FunctionT "x"
                        ( ScalarT
                            ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                        )
                        ( ScalarT
                            ( DatatypeT "DSet"
                                [ ScalarT
                                    ( TypeVarT ( fromList [] ) "a" ( IntLit 1 ) ) ( BoolLit True ) ( IntLit 0 )
                                ] []
                            ) ( BoolLit True ) ( IntLit 0 )
                        ) 0
                    )
                )
            ,
                ( "dyade"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I5" ) ] [ Var IntS "F14" ]
                            ) ( BoolLit True ) ( Var IntS "I6" )
                        )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) ] [ Var IntS "F15" ]
                                ) ( BoolLit True ) ( Var IntS "I8" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT
                                        ( DatatypeT "List"
                                            [ ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) ] [ Var IntS "F16" ]
                                        ) ( BoolLit True ) ( Var IntS "I10" )
                                    ] [ Var IntS "F17" ]
                                ) ( BoolLit True ) ( Var IntS "I11" )
                            ) 0
                        ) 0
                    )
                )
            ,
                ( "mult"
                , Monotype
                    ( FunctionT "arg1"
                        ( ScalarT IntT ( BoolLit True ) ( Var IntS "I0" ) )
                        ( FunctionT "arg0"
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I1" ) ] [ Var IntS "F12" ]
                                ) ( BoolLit True ) ( Var IntS "I2" )
                            )
                            ( ScalarT
                                ( DatatypeT "List"
                                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I3" ) ] [ Var IntS "F13" ]
                                ) ( BoolLit True ) ( Var IntS "I4" )
                            ) 0
                        ) 0
                    )
                )
            ]
        }
    , gSpec = Monotype
        ( FunctionT "arg1"
            ( ScalarT
                ( DatatypeT "List"
                    [ ScalarT IntT ( BoolLit True ) ( Var IntS "I5" ) ] [ Var IntS "F14" ]
                ) ( BoolLit True ) ( Var IntS "I6" )
            )
            ( FunctionT "arg0"
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT IntT ( BoolLit True ) ( Var IntS "I7" ) ] [ Var IntS "F15" ]
                    ) ( BoolLit True ) ( Var IntS "I8" )
                )
                ( ScalarT
                    ( DatatypeT "List"
                        [ ScalarT
                            ( DatatypeT "List"
                                [ ScalarT IntT ( BoolLit True ) ( Var IntS "I9" ) ] [ Var IntS "F16" ]
                            ) ( BoolLit True ) ( Var IntS "I10" )
                        ] [ Var IntS "F17" ]
                    ) ( BoolLit True ) ( Var IntS "I11" )
                ) 0
            ) 0
        )
    , gImpl = Program
        { content = PFun "l1"
            ( Program
                { content = PFun "l2"
                    ( Program
                        { content = PMatch
                            ( Program
                                { content = PSymbol "l1"
                                , typeOf = AnyT
                                }
                            )
                            [ Case
                                { constructor = "Nil"
                                , argNames = []
                                , expr = Program
                                    { content = PSymbol "Nil"
                                    , typeOf = AnyT
                                    }
                                }
                            , Case
                                { constructor = "Cons"
                                , argNames =
                                    [ "x"
                                    , "xs"
                                    ]
                                , expr = Program
                                    { content = PTick 1
                                        ( Program
                                            { content = PApp
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PSymbol "Cons"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PApp
                                                                        ( Program
                                                                            { content = PSymbol "mult"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                        ( Program
                                                                            { content = PSymbol "x"
                                                                            , typeOf = AnyT
                                                                            }
                                                                        )
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "l2"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                                ( Program
                                                    { content = PApp
                                                        ( Program
                                                            { content = PApp
                                                                ( Program
                                                                    { content = PSymbol "dyade"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                                ( Program
                                                                    { content = PSymbol "xs"
                                                                    , typeOf = AnyT
                                                                    }
                                                                )
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                        ( Program
                                                            { content = PSymbol "l2"
                                                            , typeOf = AnyT
                                                            }
                                                        )
                                                    , typeOf = AnyT
                                                    }
                                                )
                                            , typeOf = AnyT
                                            }
                                        )
                                    , typeOf = AnyT
                                    }
                                }
                            ]
                        , typeOf = AnyT
                        }
                    )
                , typeOf = AnyT
                }
            )
        , typeOf = AnyT
        }
    , gDepth = 0
    , gSourcePos = "neg/RAML-Dyadic.sq"
        ( line 12
        , column 1
        )
    , gInferredPotlVars =
        [
            ( "I5"
            , []
            )
        ,
            ( "I6"
            , []
            )
        ,
            ( "I7"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I8"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I9"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I10"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "I11"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F14"
            , []
            )
        ,
            ( "F15"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F16"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ,
            ( "F17"
            ,
                [ Var
                    ( DataS "List" [ IntS ] ) "arg0"
                , Var
                    ( DataS "List" [ IntS ] ) "arg1"
                ]
            )
        ]
    , gInferSolve = True
    , gSynthesize = True
    }
SMT CHECK [37m![0m[37m([0mTrue [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
SMT CHECK [37m![0m[37m([0ml1 [37m==[0m [37m([0mCons x xs[37m)[0m [37m==>[0m True[37m)[0m UNSAT
mult :: arg1:{Int||I0} -> arg0:{List {Int||I1} <F12>||I2} -> {List {Int||I3} <F13>||I4}
mult = \n . \l . 
    match l with
      Nil -> Nil
      Cons x xs -> tick 1 (Cons (n *
                                   x) (mult n xs))

dyade :: arg1:{List {Int||I5} <F14>||I6} -> arg0:{List {Int||I7} <F15>||I8} -> {List {List {Int||I9} <F16>||I10} <F17>||I11}
<no file name>:1: Error:
  Insufficient resources

