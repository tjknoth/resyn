Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
size :: arg0:{BST {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{BST {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
contains :: <a> . x:{1**a||I0} -> t:{BST {1**a||I1}||I2} -> {Bool|_v == (x in elems t)|I3}
contains :: <a> . x:{1**a||0} -> t:{BST {1**a||1}||0} -> {Bool|_v == (x in elems t)|0} (inferred)
contains = \x . \t . 
    match t with
      Empty -> False
      Node y l r -> 
        if x < y
          then tick 1 (contains x l)
          else 
            if y < x
              then tick 1 (contains x r)
              else True

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{List {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
append :: <a> . xs:{List {1**a||I0}||I1} -> ys:{List {1**a||I2}||I3} -> {List {1**a||I4}|len _v == len xs + len ys && elems _v == elems xs + elems ys|I5}
append :: <a> . xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0} (inferred)
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

append2 :: <a> . xs:{List {1**a||I6}||I7} -> ys:{List {1**a||I8}||I9} -> zs:{List {1**a||I10}||I11} -> {List {1**a||I12}|len _v == (len xs + len ys) + len zs && elems _v == (elems xs + elems ys) + elems zs|I13}
append2 :: <a> . xs:{List {1**a||0}||0} -> ys:{List {1**a||2}||0} -> zs:{List {1**a||1}||0} -> {List {1**a||0}|len _v == (len xs + len ys) + len zs && elems _v == (elems xs + elems ys) + elems zs|0} (inferred)
append2 = \xs . \ys . \zs .
      append (append ys zs) xs

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{List {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
append :: <a> . xs:{List {1**a||I0}||I1} -> ys:{List {1**a||I2}||I3} -> {List {1**a||I4}|len _v == len xs + len ys && elems _v == elems xs + elems ys|I5}
append :: <a> . xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0} (inferred)
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
compress :: <a> . xs:{List {1**a||I0}||I1} -> {List {1**a||I2}||I3}
compress :: <a> . xs:{List {1**a||1}||0} -> {List {1**a||0}||0} (inferred)
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> 
      match tick 1 (compress ys) with
        Nil -> Cons y Nil
        Cons z zs -> 
          if y == z
            then Cons z zs
            else Cons y (Cons z zs)

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
cons2 :: <a> . x:{2**a||I0} -> {List {1**a||I1}||I2}
cons2 :: <a> . x:{2**a||2} -> {List {1**a||0}||0} (inferred)
cons2 = \x . tick 1 (Cons x
                       (tick 1 (Cons x Nil)))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
snoc :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
snoc :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> Cons y
                     (tick 1 (snoc x ys))

reverse :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
reverse :: <a> . xs:{List {1**a||2} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (snoc y
                           (tick 1 (reverse ys)))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if y < x
          then Cons y (tick 1 (insert x
                                 ys))
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort :: <a> . xs:{List {1**a||2} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
subsetSum :: arg1:{EList {Int||I0} <F4>||I1} -> arg0:{Int||I2} -> {Bool||I3}
subsetSum :: arg1:{EList {Int||0} <2>||0} -> arg0:{Int||0} -> {Bool||0} (inferred)
subsetSum = \xs . \target . 
    match xs with
      Nil -> target == 0
      Cons hd tl -> (tick 1 (subsetSum
                               tl (target - hd))) ||
                      (tick 1 (subsetSum tl target))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <1>||0} -> {List {1**a||0} <1>||0} (inferred)
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if y < x
          then Cons y (tick 1 (insert x
                                 ys))
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort :: <a> . xs:{List {1**a||2} <1>||0} -> {List {1**a||0} <1>||0} (inferred)
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <1>||0} -> {List {1**a||0} <1>||0} (inferred)
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if tick 1 (y < x)
          then Cons y (insert x ys)
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort :: <a> . xs:{List {1**a||2} <1>||0} -> {List {1**a||0} <1>||0} (inferred)
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
elem :: <a> . arg1:{1**a||I0} -> arg0:{List {1**a||I1} <F8>||I2} -> {Bool||I3}
elem :: <a> . arg1:{1**a||0} -> arg0:{List {1**a||1} <0>||0} -> {Bool||0} (inferred)
elem = \x . \xs . 
    match xs with
      Nil -> False
      Cons y ys -> 
        if x == y
          then True
          else tick 1 (elem x ys)

nub :: <a> . arg0:{List {1**a||I4} <F9>||I5} -> {List {1**a||I6} <F10>||I7}
nub :: <a> . arg0:{List {1**a||2} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
nub = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> 
      if tick 1 (elem y ys)
        then tick 1 (nub ys)
        else Cons y (tick 1 (nub ys))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
min :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F13>||I2} -> {1**a||I3}
min :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {1**a||0} (inferred)
min = \x . \xs . 
    match xs with
      Nil -> x
      Cons y ys -> 
        if y < x
          then tick 1 (min y ys)
          else tick 1 (min x ys)

remove :: <a> . x:{1**a||I4} -> xs:{List {1**a||I5} <F14>||I6} -> {List {1**a||I7} <F15>||I8}
remove :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
remove = \x . \xs . 
    match xs with
      Nil -> Nil
      Cons y ys -> 
        if x == y
          then ys
          else Cons y (tick 1 (remove x
                                 ys))

selectionSort :: <a> . arg0:{List {1**a||I9} <F16>||I10} -> {List {1**a||I11} <F17>||I12}
selectionSort :: <a> . arg0:{List {1**a||6} <3>||0} -> {List {1**a||0} <0>||0} (inferred)
selectionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> Cons (tick 1 (min y
                                 xs)) (tick 1 (remove
                                                 (tick 1 (min y xs))
                                                 (tick 1 (selectionSort ys))))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
split :: <a> . arg0:{List {1**a||I0} <F15>||I1} -> {Pair {List {1**a||I2} <1>||I3}||I4}
split :: <a> . arg0:{List {1**a||0} <1>||0} -> {Pair {List {1**a||0} <1>||0}||0} (inferred)
split = \l . 
  match l with
    Nil -> Pair Nil Nil
    Cons x xs -> 
      match xs with
        Nil -> Pair (Cons x Nil) Nil
        Cons y ys -> 
          match tick 1 (split ys) with
            Pair u v -> Pair (Cons x u)
                          (Cons y v)

merge :: <a> . arg1:{List {1**a||I5} <F16>||I6} -> arg0:{List {1**a||I7} <F17>||I8} -> {List {1**a||I9} <F18>||I10}
merge :: <a> . arg1:{List {1**a||0} <0>||0} -> arg0:{List {1**a||0} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
merge = \ps . \qs . 
    match ps with
      Nil -> qs
      Cons x xs -> 
        match qs with
          Nil -> ps
          Cons y ys -> 
            if x <= y
              then Cons x (Cons y (merge xs
                                     ys))
              else Cons y (Cons x (merge xs
                                     ys))

mergeSort :: <a> . arg0:{List {1**a||I11} <F19>||I12} -> {List {1**a||I13} <F20>||I14}
mergeSort :: <a> . arg0:{List {1**a||0} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
mergeSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> 
      match ys with
        Nil -> xs
        Cons z zs -> 
          match split xs with
            Pair u v -> merge (mergeSort u)
                          (mergeSort v)

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
subsetSum :: arg1:{EList {Int||I0} <F4>||I1} -> arg0:{Int||I2} -> {Bool||I3}
subsetSum :: arg1:{EList {Int||0} <2>||0} -> arg0:{Int||0} -> {Bool||0} (inferred)
subsetSum = \xs . \target . 
    match xs with
      Nil -> target == 0
      Cons hd tl -> (tick 1 (subsetSum
                               tl (target - hd))) ||
                      (tick 1 (subsetSum tl target))

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
split :: <a> . arg0:{List {1**a||I0} <F9>||I1} -[1]-> {Pair {List {1**a||I2} <0>||I3}||I4}
split :: <a> . arg0:{List {1**a||1} <0>||0} -[1]-> {Pair {List {1**a||0} <0>||0}||0} (inferred)
split = \xs . 
  match xs with
    Nil -> Pair xs xs
    Cons y ys -> 
      match split ys with
        Pair ls rs -> Pair rs (Cons y
                                 ls)

build :: <a> . xs:{List {1**a||I5} <F10>||I6} -[1]-> {Tree {1**a||I7} <F11>||I8}
pos/List-Merge-Build.sq:23: Error:
  Cannot find sufficiently strong refinements
  when checking error in
  \xs . 
    match xs with
      Nil -> error

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
merge :: <a> . arg1:{List {1**a||I0} <F10>||I1} -> arg0:{List {1**a||I2} <F11>||I3} -> {List {1**a||I4} <F12>||I5}
merge :: <a> . arg1:{List {1**a||1} <0>||0} -> arg0:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
merge = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons xh xt -> 
        match ys with
          Nil -> xs
          Cons yh yt -> 
            if tick 1 (xh < yh)
              then Cons xh (merge xt (Cons yh
                                        yt))
              else Cons yh (merge (Cons xh xt)
                              yt)

flatten :: <a> . arg0:{Tree {1**a||I6} <F13>||I7} -> {List {1**a||I8} <F14>||I9}
flatten :: <a> . arg0:{Tree {1**a||0} <1>||0} -> {List {1**a||0} <0>||0} (inferred)
flatten = \t . 
  match t with
    Leaf x -> Cons x Nil
    Node l r -> merge (flatten l)
                  (flatten r)

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
partition :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F10>||I2} -[1]-> {Pair {List {1**a||I3} <0>||I4}||I5}
partition :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -[1]-> {Pair {List {1**a||0} <0>||0}||0} (inferred)
partition = \x . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons y ys -> 
        match partition x ys with
          Pair u v -> 
            if y < x
              then Pair (Cons y u) v
              else Pair u (Cons y v)

build :: <a> . arg0:{List {1**a||I6} <F11>||I7} -[1]-> {Tree {1**a||I8} <F12>||I9}
<no file name>:1: Error:
  Insufficient resources

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
flatten' :: <a> . arg1:{Tree {1**a||I0} <F10>||I1} -> arg0:{List {1**a||I2} <F11>||I3} -[1]-> {List {1**a||I4} <F12>||I5}
flatten' :: <a> . arg1:{Tree {1**a||2} <0>||0} -> arg0:{List {1**a||0} <0>||0} -[1]-> {List {1**a||0} <0>||0} (inferred)
flatten' = \t . \acc . 
    match t with
      Leaf -> acc
      Node x l r -> flatten' l (Cons x
                                  (flatten' r acc))

flatten :: <a> . arg0:{Tree {1**a||I6} <F13>||I7} -[1]-> {List {1**a||I8} <F14>||I9}
flatten :: <a> . arg0:{Tree {1**a||2} <0>||1} -[1]-> {List {1**a||0} <0>||0} (inferred)
flatten = \t . flatten' t Nil

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
append :: <a> . xs:{List {1**a||I0} <F17>||I1} -> ys:{List {1**a||I2} <F18>||I3} -> {List {1**a||I4} <F19>||I5}
append :: <a> . xs:{List {1**a||1} <0>||0} -> ys:{List {1**a||0} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

attach :: <a> . <q :: Int> . x:{1**a||I6} -> xs:{List {1**a||I7} <F20>||I8} -> {List {Pair {1**a||I9}||I10} <F21>||I11}
attach :: <a> . <q :: Int> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {List {Pair {1**a||0}||0} <0>||0} (inferred)
attach = \x . \xs . 
    match xs with
      Nil -> Nil
      Cons y ys -> Cons (Pair x y)
                     (tick 1 (attach x ys))

pairs :: <a> . xs:{List {1**a||I12} <F22>||I13} -> {List {Pair {1**a||I14}||I15} <F23>||I16}
<no file name>:1: Error:
  Insufficient resources

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
replicate :: <a> . n:{Int|_v >= 0|0} -> x:{1**a||I1} -> {List {1**a||I2}|len _v == n|I3}
<no file name>:1: Error:
  Insufficient resources

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
treeInsert :: <a> . x:{1**a||I0} -> t:{Tree {1**a||I1} <x < _0> <F5>||I2} -> {Tree {1**a||I3} <x < _0> <F6>||I4}
resyn: Can't infer dependent resources
CallStack (from HasCallStack):
  error, called at src/Synquid/Solver/Resource.hs:262:14 in resyn-0.1-4MhUEoTXxhG3lBXQ6fCuOn:Synquid.Solver.Resource
Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
resyn: neg/List-Quick-Sort-Quadratic.sq: openFile: does not exist (No such file or directory)
