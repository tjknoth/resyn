size :: arg0:{BST {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{BST {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
contains :: <a> . x:{1**a||I0} -> t:{BST {1**a||I1}||I2} -> {Bool|_v == (x in elems t)|I3}
contains :: <a> . x:{1**a||0} -> t:{BST {1**a||1}||0} -> {Bool|_v == (x in elems t)|0} (inferred)
contains = \x . \t . 
    match t with
      Empty -> False
      Node y l r -> 
        if x < y
          then tick 1 (contains x l)
          else 
            if y < x
              then tick 1 (contains x r)
              else True

len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{List {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
append :: <a> . xs:{List {1**a||I0}||I1} -> ys:{List {1**a||I2}||I3} -> {List {1**a||I4}|len _v == len xs + len ys && elems _v == elems xs + elems ys|I5}
append :: <a> . xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0} (inferred)
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

append2 :: <a> . xs:{List {1**a||I6}||I7} -> ys:{List {1**a||I8}||I9} -> zs:{List {1**a||I10}||I11} -> {List {1**a||I12}|len _v == (len xs + len ys) + len zs && elems _v == (elems xs + elems ys) + elems zs|I13}
append2 :: <a> . xs:{List {1**a||0}||0} -> ys:{List {1**a||2}||0} -> zs:{List {1**a||1}||0} -> {List {1**a||0}|len _v == (len xs + len ys) + len zs && elems _v == (elems xs + elems ys) + elems zs|0} (inferred)
append2 = \xs . \ys . \zs .
      append (append ys zs) xs

len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
elems :: arg0:{List {1**a||0}||0} -> {DSet {1**a||0}||0} (inferred)
append :: <a> . xs:{List {1**a||I0}||I1} -> ys:{List {1**a||I2}||I3} -> {List {1**a||I4}|len _v == len xs + len ys && elems _v == elems xs + elems ys|I5}
append :: <a> . xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0} (inferred)
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
compress :: <a> . xs:{List {1**a||I0}||I1} -> {List {1**a||I2}||I3}
compress :: <a> . xs:{List {1**a||1}||0} -> {List {1**a||0}||0} (inferred)
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> 
      match tick 1 (compress ys) with
        Nil -> Cons y Nil
        Cons z zs -> 
          if y == z
            then Cons z zs
            else Cons y (Cons z zs)

cons2 :: <a> . x:{2**a||I0} -> {List {1**a||I1}||I2}
cons2 :: <a> . x:{2**a||2} -> {List {1**a||0}||0} (inferred)
cons2 = \x . tick 1 (Cons x
                       (tick 1 (Cons x Nil)))

snoc :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
snoc :: <a> . x:{1**a||0} -> xs:{List {1**a||2} <0>||0} -> {List {1**a||0} <0>||(- 1)} (inferred)
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> Cons y
                     (tick 1 (snoc x ys))

reverse :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
reverse :: <a> . xs:{List {1**a||3} <2>||0} -> {List {1**a||0} <0>||(- 1)} (inferred)
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (snoc y
                           (tick 1 (reverse ys)))

insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert :: <a> . x:{1**a||0} -> xs:{List {1**a||2} <0>||0} -> {List {1**a||0} <0>||(- 1)} (inferred)
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if y < x
          then Cons y (tick 1 (insert x
                                 ys))
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort :: <a> . xs:{List {1**a||3} <2>||0} -> {List {1**a||0} <0>||(- 1)} (inferred)
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

subsetSum :: arg1:{EList {Int||I0} <F4>||I1} -> arg0:{Int||I2} -> {Bool||I3}
subsetSum :: arg1:{EList {Int||0} <2>||0} -> arg0:{Int||0} -> {Bool||0} (inferred)
subsetSum = \xs . \target . 
    match xs with
      Nil -> target == 0
      Cons hd tl -> (tick 1 (subsetSum
                               tl (target - hd))) ||
                      (tick 1 (subsetSum tl target))

insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert :: <a> . x:{1**a||1} -> xs:{List {1**a||2} <1>||1} -> {List {1**a||1} <1>||0} (inferred)
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if y < x
          then Cons y (tick 1 (insert x
                                 ys))
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort :: <a> . xs:{List {1**a||4} <1>||0} -> {List {1**a||1} <1>||0} (inferred)
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

insert :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F9>||I2} -> {List {1**a||I3} <F10>||I4}
insert :: <a> . x:{1**a||1} -> xs:{List {1**a||2} <1>||1} -> {List {1**a||1} <1>||0} (inferred)
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons y ys -> 
        if tick 1 (y < x)
          then Cons y (insert x ys)
          else Cons x (Cons y ys)

insertionSort :: <a> . xs:{List {1**a||I5} <F11>||I6} -> {List {1**a||I7} <F12>||I8}
insertionSort :: <a> . xs:{List {1**a||4} <1>||0} -> {List {1**a||1} <1>||0} (inferred)
insertionSort = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> tick 1 (insert y
                           (tick 1 (insertionSort ys)))

bitToInt :: arg1:{List {Int||I0} <F61>||I1} -> arg0:{Int||I2} -> {Int||I3}
bitToInt :: arg1:{List {Int||1} <0>||0} -> arg0:{Int||0} -> {Int||0} (inferred)
bitToInt = \xs . \n . 
    match xs with
      Nil -> 0
      Cons x ys -> tick 1 ((x * n) +
                             (bitToInt ys (n * n)))

bitToInt' :: arg0:{List {Int||I4} <F62>||I5} -> {Int||I6}
bitToInt' :: arg0:{List {Int||1} <0>||0} -> {Int||0} (inferred)
bitToInt' = \xs . bitToInt xs 1

sum :: arg2:{Int||I7} -> arg1:{Int||I8} -> arg0:{Int||I9} -> {Pair {Int||I10}||I11}
sum :: arg2:{Int||0} -> arg1:{Int||0} -> arg0:{Int||0} -> {Pair {Int||0}||0} (inferred)
sum = \x . \y . \r . 
      let s = (x + y) + r in
      
      if s == 0
        then Pair 0 0
        else 
          if s == 1
            then Pair 1 0
            else 
              if s == 2
                then Pair 0 1
                else Pair 1 1

add' :: arg2:{List {Int||I12} <F63>||I13} -> arg1:{List {Int||I14} <F64>||I15} -> arg0:{Int||I16} -> {List {Int||I17} <F65>||I18}
add' :: arg2:{List {Int||2} <0>||0} -> arg1:{List {Int||0} <0>||0} -> arg0:{Int||0} -> {List {Int||0} <0>||(- 1)} (inferred)
add' = \b1 . \b2 . \r . 
      match b1 with
        Nil -> Nil
        Cons x xs -> 
          match b2 with
            Nil -> Nil
            Cons y ys -> 
              match sum x y r with
                Pair z r' -> tick 1 (Cons z
                                       (add' xs ys r'))

add :: arg1:{List {Int||I19} <F66>||I20} -> arg0:{List {Int||I21} <F67>||I22} -> {List {Int||I23} <F68>||I24}
add :: arg1:{List {Int||2} <0>||0} -> arg0:{List {Int||0} <0>||0} -> {List {Int||0} <0>||(- 1)} (inferred)
add = \b1 . \b2 . add' b1 b2 0

mult :: arg1:{List {Int||I25} <F69>||I26} -> arg0:{List {Int||I27} <F70>||I28} -> {List {Int||I29} <F71>||I30}
mult :: arg1:{List {Int||0} <0>||0} -> arg0:{List {Int||2} <0>||1} -> {List {Int||0} <0>||(- 1)} (inferred)
mult = \b1 . \b2 . 
    match b1 with
      Nil -> Nil
      Cons x xs -> 
        match b2 with
          Nil -> 
            let nm = mult xs b2 in
            add b2 (Cons 0 Nil)
          Cons y ys -> 
            let nm = mult xs b2 in
            add b2 (Cons 0 (Cons y ys))

diff :: arg2:{Int||I31} -> arg1:{Int||I32} -> arg0:{Int||I33} -> {Pair {Int||I34}||I35}
diff :: arg2:{Int||0} -> arg1:{Int||0} -> arg0:{Int||1} -> {Pair {Int||0}||0} (inferred)
diff = \x . \y . \r . 
      if ((x - y) - r) < 0
        then tick 1 (Pair ((x + y) + r)
                       1)
        else tick 1 (Pair ((x + y) + r)
                       0)

sub' :: arg2:{List {Int||I36} <F72>||I37} -> arg1:{List {Int||I38} <F73>||I39} -> arg0:{Int||I40} -> {Tuple {List {Int||I41} <0>||I42} {Int||I43}||I44}
sub' :: arg2:{List {Int||2} <0>||0} -> arg1:{List {Int||0} <0>||0} -> arg0:{Int||0} -> {Tuple {List {Int||0} <0>||0} {Int||0}||0} (inferred)
sub' = \b1 . \b2 . \r . 
      match b1 with
        Nil -> Tuple Nil r
        Cons x xs -> 
          match b2 with
            Nil -> Tuple Nil r
            Cons y ys -> 
              match diff x y r with
                Pair z r' -> 
                  match sub' xs ys r' with
                    Tuple zs s -> 
                      if s == 1
                        then tick 1 (Tuple (Cons 0 zs)
                                       s)
                        else tick 1 (Tuple (Cons z zs)
                                       s)

sub :: arg1:{List {Int||I45} <F74>||I46} -> arg0:{List {Int||I47} <F75>||I48} -> {List {Int||I49} <F76>||I50}
sub :: arg1:{List {Int||2} <0>||0} -> arg0:{List {Int||0} <0>||0} -> {List {Int||0} <0>||0} (inferred)
sub = \b1 . \b2 . 
    match sub' b1 b2 0 with
      Tuple b r -> b

compare :: arg1:{List {Int||I51} <F77>||I52} -> arg0:{List {Int||I53} <F78>||I54} -> {Int||I55}
compare :: arg1:{List {Int||1} <0>||0} -> arg0:{List {Int||0} <0>||0} -> {Int||0} (inferred)
compare = \b1 . \b2 . 
    match b1 with
      Nil -> 0
      Cons x xs -> 
        match b2 with
          Nil -> 0
          Cons y ys -> 
            let r = compare xs ys in
            
            if r == 0
              then 
                if x < y
                  then tick 1 (- 1)
                  else 
                    if y < x
                      then tick 1 (- 1)
                      else tick 1 (0)
              else tick 1 (r)

leq :: arg1:{List {Int||I56} <F79>||I57} -> arg0:{List {Int||I58} <F80>||I59} -> {Bool||I60}
leq :: arg1:{List {Int||1} <0>||1} -> arg0:{List {Int||0} <0>||0} -> {Bool||0} (inferred)
leq = \b1 . \b2 .
    tick 1 ((compare b1 b2) < 1)

r1 :: <a> . arg1:{List {1**a||I0} <F22>||I1} -> arg0:{List {1**a||I2} <F23>||I3} -> {List {1**a||I4} <F24>||I5}
r1 :: <a> . arg1:{List {1**a||1} <0>||0} -> arg0:{List {1**a||0} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
r1 = \ls . \a . 
    match ls with
      Nil -> a
      Cons x xs -> tick 1 (r1 xs (Cons
                                    x a))

rev :: <a> . arg0:{List {1**a||I6} <F25>||I7} -> {List {1**a||I8} <F26>||I9}
rev :: <a> . arg0:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
rev = \ls . r1 ls Nil

g3 :: <a> . arg1:{List {1**a||I10} <F27>||I11} -> arg0:{List {1**a||I12} <F28>||I13} -> {List {1**a||I14} <F29>||I15}
g3 :: <a> . arg1:{List {1**a||1} <0>||0} -> arg0:{List {1**a||0} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
g3 = \c . \d . 
    match c with
      Nil -> d
      Cons x xs -> tick 1 (g3 xs (Cons
                                    x d))

f3 :: <a> . arg1:{List {1**a||I16} <F30>||I17} -> arg0:{List {1**a||I18} <F31>||I19} -> {List {1**a||I20} <F32>||I21}
f3 :: <a> . arg1:{List {1**a||1} <0>||0} -> arg0:{List {1**a||2} <0>||1} -> {List {1**a||0} <0>||0} (inferred)
f3 = \a . \b . 
    match b with
      Nil -> tick 1 (g3 a Nil)
      Cons x xs -> tick 1 (f3 (Cons x
                                 a) xs)

last :: <a> . arg0:{List {1**a||I0} <F37>||I1} -> {Maybe {1**a||I2}||I3}
last :: <a> . arg0:{List {1**a||1} <0>||0} -> {Maybe {1**a||0}||0} (inferred)
last = \l . 
  match l with
    Nil -> Nothing
    Cons x xs -> 
      match xs with
        Nil -> Just x
        Cons y ys -> tick 1 (last xs)

lastTwo :: <a> . arg0:{List {1**a||I4} <F38>||I5} -> {Maybe {Tuple {1**a||I6} {1**a||I7}||I8}||I9}
lastTwo :: <a> . arg0:{List {1**a||1} <0>||0} -> {Maybe {Tuple {1**a||0} {1**a||0}||0}||0} (inferred)
lastTwo = \l . 
  match l with
    Nil -> Nothing
    Cons x xs -> 
      match xs with
        Nil -> Nothing
        Cons y ys -> 
          match ys with
            Cons z zs -> tick 1 (lastTwo xs)

at :: <a> . arg1:{Int|_v >= 0|I10} -> arg0:{List {1**a||I11} <F39>||I12} -> {Maybe {1**a||I13}||I14}
at :: <a> . arg1:{Int|_v >= 0|0} -> arg0:{List {1**a||1} <0>||0} -> {Maybe {1**a||0}||0} (inferred)
at = \k . \l . 
    match l with
      Nil -> Nothing
      Cons h t -> 
        if k == 0
          then tick 1 (Just h)
          else tick 1 (at (k - 1) t)

lengthGo :: <a> . arg1:{Int|_v >= 0|0} -> arg0:{List {1**a||I16} <F40>||I17} -> {Int|_v >= 0|0}
lengthGo :: <a> . arg1:{Int|_v >= 0|0} -> arg0:{List {1**a||1} <0>||0} -> {Int|_v >= 0|0} (inferred)
lengthGo = \acc . \ls . 
    match ls with
      Nil -> acc
      Cons h t -> tick 1 (lengthGo
                            (acc + 1) t)

length :: <a> . arg0:{List {1**a||I19} <F41>||I20} -> {Int|_v >= 0|0}
length :: <a> . arg0:{List {1**a||1} <0>||0} -> {Int|_v >= 0|0} (inferred)
length = \l . lengthGo 0 l

revGo :: <a> . arg1:{List {1**a||I22} <F42>||I23} -> arg0:{List {1**a||I24} <F43>||I25} -> {List {1**a||I26} <F44>||I27}
revGo :: <a> . arg1:{List {1**a||0} <0>||0} -> arg0:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
revGo = \acc . \ls . 
    match ls with
      Nil -> acc
      Cons h t -> tick 1 (revGo (Cons
                                   h acc) t)

rev :: <a> . arg0:{List {1**a||I28} <F45>||I29} -> {List {1**a||I30} <F46>||I31}
rev :: <a> . arg0:{List {1**a||1} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
rev = \l . revGo Nil l

eq :: arg1:{List {Int||I32} <F47>||I33} -> arg0:{List {Int||I34} <F48>||I35} -> {Bool||I36}
eq :: arg1:{List {Int||0} <0>||0} -> arg0:{List {Int||1} <0>||0} -> {Bool||0} (inferred)
eq = \l1 . \l2 . 
    match l1 with
      Nil -> 
        match l2 with
          Nil -> True
          Cons x2 x2s -> False
      Cons x1 x1s -> 
        match l2 with
          Nil -> False
          Cons x2 x2s -> tick 1 ((x1 ==
                                    x2) && (eq x1s x2s))

elem :: <a> . arg1:{1**a||I0} -> arg0:{List {1**a||I1} <F8>||I2} -> {Bool||I3}
elem :: <a> . arg1:{1**a||0} -> arg0:{List {1**a||1} <0>||0} -> {Bool||0} (inferred)
elem = \x . \xs . 
    match xs with
      Nil -> False
      Cons y ys -> 
        if x == y
          then True
          else tick 1 (elem x ys)

nub :: <a> . arg0:{List {1**a||I4} <F9>||I5} -> {List {1**a||I6} <F10>||I7}
nub :: <a> . arg0:{List {1**a||3} <1>||0} -> {List {1**a||0} <0>||(- 1)} (inferred)
nub = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> 
      if tick 1 (elem y ys)
        then tick 1 (nub ys)
        else Cons y (tick 1 (nub ys))

flatten' :: <a> . arg1:{Tree {1**a||I0} <F10>||I1} -> arg0:{List {1**a||I2} <F11>||I3} -[1]-> {List {1**a||I4} <F12>||I5}
flatten' :: <a> . arg1:{Tree {1**a||2} <0>||0} -> arg0:{List {1**a||0} <0>||0} -[1]-> {List {1**a||0} <0>||0} (inferred)
flatten' = \t . \acc . 
    match t with
      Leaf -> acc
      Node x l r -> flatten' l (Cons x
                                  (flatten' r acc))

flatten :: <a> . arg0:{Tree {1**a||I6} <F13>||I7} -[1]-> {List {1**a||I8} <F14>||I9}
flatten :: <a> . arg0:{Tree {1**a||2} <0>||1} -[1]-> {List {1**a||0} <0>||0} (inferred)
flatten = \t . flatten' t Nil

treeInsert :: <a> . x:{1**a||I0} -> t:{Tree {1**a||I1} <x < _0> <F5>||I2} -> {Tree {1**a||I3} <x < _0> <F6>||I4}
resyn: Can't infer dependent resources
CallStack (from HasCallStack):
  error, called at src/Synquid/Solver/Resource.hs:263:14 in resyn-1.1.0-8QeZfrsHXnc2fqq2WRk651:Synquid.Solver.Resource
resyn: neg/BST-Member.sq: openFile: does not exist (No such file or directory)
append :: <a> . xs:{List {1**a||I0} <F17>||I1} -> ys:{List {1**a||I2} <F18>||I3} -> {List {1**a||I4} <F19>||I5}
append :: <a> . xs:{List {1**a||1} <0>||0} -> ys:{List {1**a||0} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

attach :: <a> . <q :: Int> . x:{1**a||I6} -> xs:{List {1**a||I7} <F20>||I8} -> {List {Pair {1**a||I9}||I10} <F21>||I11}
<no file name>:1: Error:
  Insufficient resources

subsetSum :: arg1:{QList {Int||I0} <F4>||I1} -> arg0:{Int||I2} -> {Bool||I3}
<no file name>:1: Error:
  Insufficient resources

len :: arg0:{List {1**a||0}||0} -> {Int|_v >= 0|0} (inferred)
replicate :: <a> . n:{Int|_v >= 0|0} -> x:{1**a||I1} -> {List {1**a||I2}|len _v == n|I3}
<no file name>:1: Error:
  Insufficient resources

partition :: <a> . <q :: Int> . <r :: Int> . x:{1**a||I0} -> xs:{List {1**a||I1} <F16>||I2} -> {Pair {List {1**a||I3} <q>||I4}||I5}
partition :: <a> . <q :: Int> . <r :: Int> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {Pair {List {1**a||0} <q>||0}||(- 1)} (inferred)
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons y ys -> 
        match tick 1 (partition p
                        ys) with
          Pair ls gs -> 
            if y <= p
              then Pair (Cons y ls) gs
              else Pair ls (Cons y gs)

append :: <a> . xs:{List {1**a||I6} <F17>||I7} -> ys:{List {1**a||I8} <F18>||I9} -> {List {1**a||I10} <F19>||I11}
append :: <a> . xs:{List {1**a||1} <0>||0} -> ys:{List {1**a||0} <0>||0} -> {List {1**a||0} <0>||0} (inferred)
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z
                     (tick 1 (append zs ys))

quickSort :: <a> . xs:{List {1**a||I12} <F20>||I13} -> {List {1**a||I14} <F21>||I15}
<no file name>:1: Error:
  Insufficient resources

min :: <a> . x:{1**a||I0} -> xs:{List {1**a||I1} <F13>||I2} -> {1**a||I3}
min :: <a> . x:{1**a||0} -> xs:{List {1**a||1} <0>||0} -> {1**a||0} (inferred)
min = \x . \xs . 
    match xs with
      Nil -> x
      Cons y ys -> 
        if y < x
          then tick 1 (min y ys)
          else tick 1 (min x ys)

remove :: <a> . x:{1**a||I4} -> xs:{List {1**a||I5} <F14>||I6} -> {List {1**a||I7} <F15>||I8}
remove :: <a> . x:{1**a||0} -> xs:{List {1**a||2} <0>||0} -> {List {1**a||0} <0>||(- 1)} (inferred)
remove = \x . \xs . 
    match xs with
      Nil -> Nil
      Cons y ys -> 
        if x == y
          then ys
          else Cons y (tick 1 (remove x
                                 ys))

selectionSort :: <a> . arg0:{List {1**a||I9} <F16>||I10} -> {List {1**a||I11} <F17>||I12}
<no file name>:1: Error:
  Insufficient resources

split :: <a> . arg0:{List {1**a||I0} <F15>||I1} -> {Pair {List {1**a||I2} <1>||I3}||I4}
split :: <a> . arg0:{List {1**a||0} <1>||0} -> {Pair {List {1**a||0} <1>||0}||(- 1)} (inferred)
split = \l . 
  match l with
    Nil -> Pair Nil Nil
    Cons x xs -> 
      match xs with
        Nil -> Pair (Cons x Nil) Nil
        Cons y ys -> 
          match tick 1 (split ys) with
            Pair u v -> Pair (Cons x u)
                          (Cons y v)

merge :: <a> . arg1:{List {1**a||I5} <F16>||I6} -> arg0:{List {1**a||I7} <F17>||I8} -> {List {1**a||I9} <F18>||I10}
<no file name>:1: Error:
  Insufficient resources

split :: <a> . arg0:{List {1**a||I0} <F5>||I1} -[1]-> {Pair {List {1**a||I2} <0>||I3}||I4}
<no file name>:1: Error:
  Insufficient resources

split :: <a> . arg0:{List {1**a||I0} <F9>||I1} -[1]-> {Pair {List {1**a||I2} <0>||I3}||I4}
<no file name>:1: Error:
  Insufficient resources

merge :: <a> . arg1:{List {1**a||I0} <F10>||I1} -> arg0:{List {1**a||I2} <F11>||I3} -> {List {1**a||I4} <F12>||I5}
<no file name>:1: Error:
  Insufficient resources

empty :: <a> . {Tuple {List {1**a||I0} <0>||I1} {List {1**a||I2} <0>||I3}||I4}
empty :: <a> . {Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} (inferred)
empty = Tuple Nil Nil

enqueue :: <a> . arg1:{1**a||I5} -> arg0:{Tuple {List {1**a||I6} <0>||I7} {List {1**a||I8} <0>||I9}||I10} -> {Tuple {List {1**a||I11} <0>||I12} {List {1**a||I13} <0>||I14}||I15}
enqueue :: <a> . arg1:{1**a||0} -> arg0:{Tuple {List {1**a||0} <0>||1} {List {1**a||0} <0>||0}||0} -> {Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} (inferred)
enqueue = \x . \q . 
    match q with
      Tuple inq outq -> tick 1 (Tuple
                                  (Cons x inq) outq)

enqueuesInline :: <a> . arg1:{List {1**a||I16} <F40>||I17} -> arg0:{Tuple {List {1**a||I18} <0>||I19} {List {1**a||I20} <0>||I21}||I22} -> {Tuple {List {1**a||I23} <0>||I24} {List {1**a||I25} <0>||I26}||I27}
enqueuesInline :: <a> . arg1:{List {1**a||2} <0>||0} -> arg0:{Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} -> {Tuple {List {1**a||0} <0>||0} {List {1**a||0} <0>||0}||0} (inferred)
enqueuesInline = \l . \q . 
    match l with
      Nil -> q
      Cons x xs -> 
        match q with
          Tuple inq outq ->
            tick 1 (enqueuesInline xs
                      (tick 1 (Tuple (Cons x inq)
                                 outq)))

enqueues :: <a> . arg1:{List {1**a||I28} <F41>||I29} -> arg0:{Tuple {List {1**a||I30} <0>||I31} {List {1**a||I32} <0>||I33}||I34} -> {Tuple {List {1**a||I35} <0>||I36} {List {1**a||I37} <0>||I38}||I39}
<no file name>:1: Error:
  Insufficient resources

addOne :: arg0:{List {Bin||I0} <F9>||I1} -> {List {Bin||I2} <F10>||I3}
addOne :: arg0:{List {Bin||2} <0>||0} -> {List {Bin||0} <0>||(- 1)} (inferred)
addOne = \l . 
  match l with
    Nil -> Cons One Nil
    Cons b bs -> 
      match b with
        Zero -> Cons One bs
        One -> tick 1 (Cons Zero (addOne
                                    bs))

addMany :: arg1:{List {Bin||I4} <F11>||I5} -> arg0:{Int|_v >= 0|0} -> {List {Bin||I7} <F12>||I8}
<no file name>:1: Error:
  Insufficient resources

insert :: <a> . arg1:{Tuple {1**a||I0} {Int||I1}||I2} -> arg0:{List {Tuple {List {1**a||I3} <0>||I4} {Int||I5}||I6} <F13>||I7} -> {List {Tuple {List {1**a||I8} <0>||I9} {Int||I10}||I11} <F14>||I12}
<no file name>:1: Error:
  Insufficient resources

mult :: arg1:{Int||I0} -> arg0:{List {Int||I1} <F12>||I2} -> {List {Int||I3} <F13>||I4}
mult :: arg1:{Int||0} -> arg0:{List {Int||0} <2>||0} -> {List {Int||0} <0>||(- 1)} (inferred)
mult = \n . \l . 
    match l with
      Nil -> Nil
      Cons x xs -> tick 1 (Cons (n *
                                   x) (mult n xs))

dyade :: arg1:{List {Int||I5} <F14>||I6} -> arg0:{List {Int||I7} <F15>||I8} -> {List {List {Int||I9} <0>||I10} <F16>||I11}
<no file name>:1: Error:
  Insufficient resources

example :: {List {Node {Int||I0} <0>||I1} <F7>||I2}
example :: {List {Node {Int||0} <0>||0} <0>||(- 1)} (inferred)
example = Cons (One 1) (Cons
                          (Many (Cons (One 2) (Cons (Many
                                                       (Cons (One 3) (Cons (One
                                                                              4)
                                                                        Nil)))
                                                 (Cons (One 5) Nil)))) Nil)

compress :: arg0:{List {Int||I3} <F8>||I4} -> {List {Int||I5} <F9>||I6}
<no file name>:1: Error:
  Insufficient resources

