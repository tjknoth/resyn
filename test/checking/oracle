Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
append :: xs:{List {1**a||0}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys|0}
./List-Append.sq:10: Error:
  Found inconsistent refinements
  when checking consistency of type annotation
  {List {1**a||0}|len _v > len xs|0}
  with
  {List {1**a||p2}|len _v >= 0 && len _v < len xs|-(fp18 + 0)}
  in
  \xs . \ys . 
      match xs with
        Cons z zs -> Cons z (append
                               (?? :: {List {1**a||0}|len _v > len xs|0})
                               ??)

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
replicate :: n1:{Nat||0} -> x:{1**a||0} -> {List {1**a||0}|len _v == n1|0}
replicate = \n . \x . 
    let n' = n - 1 in
    
    if n == 0
      then Nil
      else Cons x (replicate n' x)

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
toNat :: xs:{List {Int||0}||0} -> {List {Nat||0}|len _v == len xs|0}
toNat = 
let f = \x . 
    if x < 0
      then - x
      else x in
\xs . map f xs

Stack has not been tested with GHC versions above 8.6, and using 8.8.2, this may fail
Stack has not been tested with Cabal versions above 2.4, but version 3.0.1.0 was found, this may fail
empty :: {AVL {1**a||0}|height _v == 0 && keys _v == []|0}
empty = Leaf

singleton :: x:{1**a||0} -> {AVL {1**a||0}|height _v == 1 && keys _v == [x]|0}
singleton = \x . Node x Leaf
                   Leaf 1

getHeight :: t:{AVL {1**a||0}||0} -> {Int|_v == height t|0}
getHeight = \t . 
  match t with
    Leaf -> 0
    Node x l r h -> h

getBalFac :: t:{AVL {1**a||0}||0} -> {Int|_v == balFac t|0}
getBalFac = \t . 
  match t with
    Leaf -> 0
    Node x l r h -> (getHeight l) -
                      (getHeight r)

mkNode :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|abs (height _v - height l) <= 1|0} -> {AVL {1**a||0}|height _v == 1 + max (height l) (height r) && keys _v == ([x] + keys l) + keys r|0}
mkNode = \x . \l . \r . 
      if (getHeight l) >= (getHeight
                             r)
        then Node x l r (1 + (getHeight
                                l))
        else Node x l r (1 + (getHeight
                                r))

balL0 :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}|balFac _v == 0|0} -> r:{AVL {1**a|_v > x|0}|height l - height _v == 2|0} -> {AVL {1**a||0}|height _v == 1 + height l && keys _v == ([x] + keys l) + keys r|0}
balL0 = \x . \l . \r . 
      match l with
        Leaf -> error
        Node lx ll lr lh -> mkNode lx ll
                              (mkNode x lr r)

balLL :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}|balFac _v > 0|0} -> r:{AVL {1**a|_v > x|0}|height l - height _v == 2|0} -> {AVL {1**a||0}|height _v == height l && keys _v == ([x] + keys l) + keys r|0}
balLL = \x . \l . \r . 
      match l with
        Leaf -> error
        Node lx ll lr lh -> mkNode lx ll
                              (mkNode x lr r)

balLR :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}|balFac _v < 0|0} -> r:{AVL {1**a|_v > x|0}|height l - height _v == 2|0} -> {AVL {1**a||0}|height _v == height l && keys _v == ([x] + keys l) + keys r|0}
balLR = \x . \l . \r . 
      match l with
        Leaf -> error
        Node lx ll lr lh -> 
          match lr with
            Leaf -> error
            Node lrx lrl lrr lrh -> mkNode
                                      lrx (mkNode lx ll lrl) (mkNode x
                                                                lrr r)

balR0 :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|height _v - height l == 2 && balFac _v == 0|0} -> {AVL {1**a||0}|height _v == 1 + height r && keys _v == ([x] + keys l) + keys r|0}
balR0 = \x . \l . \r . 
      match r with
        Leaf -> error
        Node rx rl rr rh -> mkNode rx
                              (mkNode x l rl) rr

balRL :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|height _v - height l == 2 && balFac _v > 0|0} -> {AVL {1**a||0}|height _v == height r && keys _v == ([x] + keys l) + keys r|0}
balRL = \x . \l . \r . 
      match r with
        Leaf -> error
        Node rx rl rr rh -> 
          match rl with
            Leaf -> error
            Node rlx rll rlr rlh -> mkNode
                                      rlx (mkNode x l rll) (mkNode rx
                                                              rlr rr)

balRR :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|height _v - height l == 2 && balFac _v < 0|0} -> {AVL {1**a||0}|height _v == height r && keys _v == ([x] + keys l) + keys r|0}
balRR = \x . \l . \r . 
      match r with
        Leaf -> error
        Node rx rl rr rh -> mkNode rx
                              (mkNode x l rl) rr

insert :: y:{1**a||0} -> t:{AVL {1**a||0}||0} -> {AVL {1**a||0}|(height t <= height _v && height _v <= height t + 1) && keys _v == [y] + keys t|0}
insert = \y . \t . 
    match t with
      Leaf -> singleton y
      Node x l r h -> 
        if y < x
          then insL y x l r
          else 
            if y > x
              then insR y x l r
              else t

insL :: y:{1**a||0} -> x:{1**a|y < _v|0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|abs (height _v - height l) <= 1|0} -> {AVL {1**a||0}|eqOrOneLess (1 + max (height l) (height r)) (height _v) && keys _v == ([x, y] + keys l) + keys r|0}
insL = \y . \x . \l . \r . 
        let l' = insert y l in
        
        let isLeftBig = ((getHeight l')
                           - (getHeight r)) == 2 in
        
        if isLeftBig && ((getBalFac l')
                           > 0)
          then balLL x l' r
          else 
            if isLeftBig && ((getBalFac l')
                               < 0)
              then balLR x l' r
              else 
                if isLeftBig
                  then balL0 x l' r
                  else mkNode x l' r

insR :: y:{1**a||0} -> x:{1**a|_v < y|0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|abs (height _v - height l) <= 1|0} -> {AVL {1**a||0}|eqOrOneLess (1 + max (height l) (height r)) (height _v) && keys _v == ([x, y] + keys l) + keys r|0}
insR = \y . \x . \l . \r . 
        let r' = insert y r in
        
        let isRightBig = ((getHeight r')
                            - (getHeight l)) == 2 in
        
        if isRightBig && ((getBalFac r')
                            > 0)
          then balRL x l r'
          else 
            if isRightBig && ((getBalFac r')
                                < 0)
              then balRR x l r'
              else 
                if isRightBig
                  then balR0 x l r'
                  else mkNode x l r'

