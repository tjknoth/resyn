data IList a where 
  Nil :: IList a
  Cons :: x: a -> xs: IList {a | x <= _v} -> IList a

measure numgt :: x: a -> IList a -> {Int | _v >= 0} where 
  Nil -> 0
  Cons y ys -> 
    if y >= x 
      then 1 + numgt x ys 
      else numgt x ys

measure elems :: IList a -> Set a where 
  Nil -> []
  Cons x xs -> [x] + elems xs

termination measure len :: IList a -> {Int | _v >= 0} where 
  Nil -> 0 
  Cons x xs -> 1 + len xs

insert :: x: a -> xs: {IList a| |numgt x _v} -[1]-> {IList a | (elems _v == elems xs + [x]) && (numgt x _v == 1 + numgt x xs)}
--insert :: x: a -> xs: IList {a| |1} -[1]-> {List a | elems _v == elems xs + [x]}
insert = \x. \xs. 
  match xs with 
    Nil -> Cons x Nil 
    Cons y ys -> 
      if y < x 
        then Cons y (insert x ys)
        else Cons x (Cons y ys)

{-
insert' :: x: a -> xs: List {a| | if _v < x then 1 else 0} -> {List a | elems _v == elems xs + [x]}
insert' = \x. \xs.
  match xs with 
    Nil -> Cons x Nil
    Cons y ys ->
      if y < x 
        then Cons y (insert x ys)
        else Cons x (Cons y ys)
-}
