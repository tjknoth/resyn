-- Simple model of list memory semantics:
--   Constructing an element of a list requires enough heap space 
--   for the polymorphic type and a pointer to the next one.
--   We assume Nil requires no memory
data List a <q :: a -> Int> where
  Nil :: List a <q>
  Cons :: x: {a| |q _v} -> xs: List a <q> -> List a <q>

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs 

-- Linear-memory implementation
compress :: xs: List a <{1}> -[1]-> List a <{0}>
compress = \xs.
  match xs with
    Nil -> Nil 
    Cons y ys -> 
      match compress ys with 
        Nil -> Cons y Nil 
        Cons z zs -> 
          if y == z
            then Cons z zs
            else Cons y (Cons z zs)
