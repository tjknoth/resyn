data List a <q1 :: Int> <q2 :: Int> where
  Nil :: List a <q1> <q2>
  Cons :: x: {a| |q1} -> xs: List a <{q1 + q2}> <q2> -> List a <q1> <q2>

insert :: x: a -> xs: List a <{1}> <{0}> -> List a <{0}> <{0}>
insert = \x. \xs.
  match xs with 
    Nil        -> Cons x Nil
    Cons y ys  -> if y < x
                    then Cons y (insert x ys)
                    else Cons x (Cons y ys)

insertionSort :: <q::Int>.xs: List a <{1+q}> <{1}> -[1]-> List a <{q}> <{0}>
insertionSort = \xs.
  match xs with
    Nil -> Nil
    Cons y ys -> insert y (insertionSort ys)

