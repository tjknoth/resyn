-- Simple model of list memory semantics:
--   Constructing an element of a list requires enough heap space 
--   for the polymorphic type and a pointer to the next one.
--   We assume Nil requires no memory

{-data List a <p :: a -> Int> where
  Nil :: {List a <p> | len _v == 0 && elems _v == []}
  Cons :: x:{a| |p _v} -> xs: List a <p> -> {List a <p>| len _v = 1 + len xs && elems _v = [x] + elems xs}
-}
data List a <q :: a -> Int> where
  Nil :: List a <q> 
  Cons :: x:{a| |q _v} -> xs: List a <q> -> List a <q>

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  
  
measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs  

-- append xs ys requires memory proportional to the length of xs
append :: xs: List a <{1}> -> ys: List a <{0}> -> {List a <{0}>| len _v == len xs + len ys && elems _v == elems xs + elems ys}
append = \xs. \ys.
  match xs with
    Nil -> ys
    Cons z zs -> Cons z (append zs ys)

-- append xs ys requires memory proportional to the length of xs
append2 :: xs: List a <{2}> -> ys: List a <{1}> -> zs: List a <{0}> -> {List a <{0}> | len _v == len xs + len ys + len zs && elems _v == elems xs + elems ys + elems zs}
append2 = \xs. \ys. \zs. 
  append xs (append ys zs) 
