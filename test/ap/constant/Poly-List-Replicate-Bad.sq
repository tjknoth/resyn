qualifier {x <= y, x != y}

type Nat = {Int | _v >= 0}

-- Need predicates to specify replicate with refinement types
inc :: x: Int -> {Int | _v == x + 1}
dec :: x: Int -> {Int | _v == x - 1}

-- Simple model of list memory semantics:
--   Constructing an element of a list requires enough heap space 
--   for the polymorphic type and a pointer to the next one.
--   We assume Nil requires no memory
data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

-- Needs enough memory for n copies of x; given insufficient copies of n 
replicate :: n: Nat -> x: {a| |n - 1} -[1]-> {List a | len _v == n}
replicate = \n. \x.
  if n <= 0
    then Nil
    else Cons x (replicate (dec n) x)
