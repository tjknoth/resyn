data List a <q1 :: Int> <q2 :: Int> where
  Nil :: List a <q1> <q2>
  Cons :: x: {a | | q1} -> xs: List a <{q1 + q2}> <q2> -> List a <q1> <q2>

data Pair a where
  Pair :: a -> a -> Pair a

{-
append :: xs: PairList a -> ys: PairList a 
  -> {PairList a | fstElems _v == fstElems xs + fstElems ys && sndElems _v == sndElems xs + sndElems ys}
  
attach :: x: a -> xs: List {a | x < _v} <{0}> <{0}> 
  -> {PairList a | (fstElems _v == if elems xs == [] then [] else [x]) && sndElems _v == elems xs}
attach = \x . \xs.
  match xs with
    Nil -> PNil
    Cons y ys -> PCons x y (attach x ys)
-}

append :: <q :: Int>.xs: List a <{1 + q}> <{0}> -> ys: List a <{q}> <{0}>
  -> List a <{0}> <{0}>
  
attach :: <q :: Int>.x: a -> xs: List a <{1+q}> <{0}> 
  -> List (Pair a) <{q}> <{0}>
attach = \x . \xs.
  match xs with
    Nil -> Nil
    Cons y ys -> Cons (Pair x y) (attach x ys)

pairs :: <q :: Int>.xs: List a <{1+q}> <{2}> -[1]-> List (Pair a) <{q}> <{0}>
pairs = \xs .
  match xs with
    Nil -> Nil
    Cons y ys -> append (attach y ys) (pairs ys)
