data List a <q1 :: a -> Int> <q2 :: a -> a -> Int> where
  Nil :: List a <q1> <q2>
  Cons :: x:{a | | q1 _v} -> xs: List a <{q1 + (q2 x)}> <q2> -> List <q1> <q2>

insert :: x: a -> xs: List a <{\y.(ITE (y>x) 1 0)}> <{0}> -[1]-> List a <{0}> <{0}> 
insert = \x. \xs.
  match xs with
    Nil -> Cons x Nil
    Cons y ys -> 
      if y < x
        then Cons y (insert x ys)
        else Cons x (Cons y ys)

insertionSort :: xs: List a <{1}> <{\x.\y.(ITE (y>x) 1 0)}> -[1]-> List a <{0}> <{0}>
insertionSort = \xs.
  match xs with 
    Nil -> Nil
    Cons y ys -> insert y (insertionSort ys)
