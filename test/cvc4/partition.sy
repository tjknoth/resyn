(set-logic LIA)

(synth-fun f ((x Int) (y Int)) Int)
(synth-fun g ((x Int) (y Int)) Int)
(synth-fun h ((x Int) (y Int)) Int)

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (g x y) (h x y))))
(constraint (=> (> x y) (>= (g x y) 1)))
(constraint (=> (<= x y) (< (g x y) 1)))
(constraint (>= (f x y) 0))
(constraint (>= (g x y) 0))
(constraint (>= (h x y) 0))

(check-synth)

; exists f,g,h :: Int -> Int -> Int.
; forall x, y :: Int.
; f(x,y) = ite(x > y, 1, 0) &&
; f(x, y) = g(x, y) + h(x, y) &&
; x > y => (g(x, y) >= 1) &&
; f(x, y) >= 0 && g(x, y) >= 0 && h(x, y) >= 0
