data Pair a b where
  Pair :: a -> b -> Pair a b

data List a <q :: Int> where
  Nil  :: List a <q>
  Cons :: a -> List {a | | q} <q> -> List a <q>
 
min :: x:a -> xs: List {a | | 1} <{0}> -> a
min = \x. \xs. 
  match xs with
    Nil       -> x
    Cons y ys -> 
      if y < x 
        then tick 1 (min y ys)
        else tick 1 (min x ys)

remove :: x:a -> xs: List {a| |1} <{0}> -> List a <{0}>
remove = \x. \xs.
  match xs with
    Nil       -> Nil
    Cons y ys -> 
      if x == y 
        then ys
        else Cons y (tick 1 (remove x ys))

-- TODO: simplify bound?
selectionSort :: List {a | | 6} <{3}> -> List a <{0}> 
selectionSort = \xs. 
  match xs with 
    Nil       -> Nil 
    Cons y ys -> Cons (tick 1 (min y xs)) (tick 1 (remove (tick 1 (min y xs)) (tick 1 (selectionSort ys))))
