add :: x:{Nat||0} -> y:{Nat||0} -> {Int|_v == x + y|0}
add = \x . \y . 
    if x <= 0
      then y
      else add (dec x) (inc y)

null :: xs:{List {1**a||0}||0} -> {Bool|_v == (len xs == 0)|0}
null = \xs . 
  match xs with
    Nil -> true
    Cons x3 x4 -> false

elem :: x:{1**a||0} -> xs:{List {1**a||0}||0} -> {Bool|_v == (x in elems xs)|0}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x3 x4 -> 
        if x3 == x
          then true
          else elem x x4

stutter :: xs:{List {1**a||0}||0} -> {List {1**a||0}|len _v == 2 * len xs|0}
stutter = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> Cons x3 (Cons x3
                             (stutter x4))

replicate :: n:{Nat||0} -> x:{1**a||0} -> {List {1**a||0}|len _v == n|0}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

append :: xs:{List {1**a||0}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons x7 x8 -> Cons x7 (append x8
                               ys)

concat :: xss:{ListOfLists {1**a||0}||0} -> {List {1**a||0}|len _v == sumLen xss|0}
concat = \xss . 
  match xss with
    Nil2 -> Nil
    Cons2 x3 x4 -> append x3 (concat
                                x4)

take :: n:{Nat||0} -> xs:{List {1**a||0}|len _v >= n|0} -> {List {1**a||0}|len _v == n|0}
take = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x3 x4 -> Cons x3 (take (dec
                                         n) x4)
      else Nil

drop :: n:{Nat||0} -> xs:{List {1**a||0}|len _v >= n|0} -> {List {1**a||0}|len _v == len xs - n|0}
drop = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x3 x4 -> drop (dec n) x4
      else xs

delete :: x:{1**a||0} -> xs:{List {1**a||0}||0} -> {List {1**a||0}|elems _v == elems xs - [x]|0}
delete = \x . \xs . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        if x3 == x
          then delete x x4
          else Cons x3 (delete x x4)

map :: f:(arg0:{1**a||0} -> {1**b||0}) -> xs:{List {1**a||0}||0} -> {List {1**b||0}|len _v == len xs|0}
map = \f . \xs . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> Cons (f x3) (map f
                                   x4)

zipWith :: f:(arg1:{1**a||0} -> arg0:{1**b||0} -> {1**c||0}) -> xs:{List {1**a||0}||0} -> ys:{List {1**b||0}|len _v == len xs|0} -> {List {1**c||0}|len _v == len xs|0}
zipWith = \f . \xs . \ys . 
      match xs with
        Nil -> Nil
        Cons x3 x4 -> 
          match ys with
            Nil -> error
            Cons x7 x8 -> Cons (f x3 x7)
                            (zipWith f x4 x8)

zip :: xs:{List {1**a||0}||0} -> ys:{List {1**b||0}|len _v == len xs|0} -> {List {Pair {1**a||0} {1**b||0}||0}|len _v == len xs|0}
zip = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        match ys with
          Nil -> error
          Cons x7 x8 -> Cons (Pair x3 x7)
                          (zip x4 x8)

toNat :: xs:{List {Int||0}||0} -> {List {Nat||0}|len _v == len xs|0}
toNat = \xs . 
  let f0 = \x2 . 
      if x2 <= 0
        then neg x2
        else x2 in
  map f0 xs

product :: xs:{List {1**a||0}||0} -> ys:{List {1**b||0}||0} -> {List {Pair {1**a||0} {1**b||0}||0}|len _v == len xs * len ys|0}
product = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        let f0 = \x12 . Pair x3 x12 in
        append (map f0 ys) (product x4
                              ys)

extractMin :: xs:{List {1**a||0}|len _v > 0|0} -> {MinPair {1**a||0}|elems xs == [min _v] + elems (rest _v) && len xs == 1 + len (rest _v)|0}
extractMin = \xs . 
  match xs with
    Nil -> error
    Cons x3 x4 -> 
      match x4 with
        Nil -> MinPair x3 Nil
        Cons x10 x11 -> 
          match extractMin x4 with
            MinPair x16 x17 -> 
              if x3 <= x16
                then MinPair x3 (Cons x16 x17)
                else MinPair x16 (Cons x3 x17)

member :: x:{1**a||0} -> xs:{List {1**a||0}||0} -> {Bool|_v == (x in elems xs)|0}
member = \x . \xs . 
    match xs with
      Nil -> false
      Cons x3 x4 -> 
        if x3 == x
          then true
          else member x x4

coincidence :: xs:{List {1**a||0}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|elems _v == elems xs * elems ys|0}
coincidence = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        if member x3 ys
          then Cons x3 (coincidence x4 ys)
          else coincidence x4 ys

foldr :: <p :: List (a) -> b -> Bool> . f:(xs:{List {1**a||0}||0} -> x:{1**a||0} -> acc:{1**b|p xs _v|0} -> {1**b|p ((Cons x xs)) _v|0}) -> seed:{1**b|p (Nil) _v|0} -> ys:{List {1**a||0}||0} -> {1**b|p ys _v|0}
foldr = \f . \seed . \ys . 
      match ys with
        Nil -> seed
        Cons x3 x4 -> f x4 x3 (foldr f
                                 seed x4)

length :: xs:{List {1**a||0}||0} -> {Int|_v == len xs|0}
length = \xs . 
  let f0 = \x2 . \x3 . \x4 . inc
                               x4 in
  foldr f0 zero xs

append :: xs:{List {1**a||0}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys|0}
append = \xs . \ys . 
    let f0 = \x2 . \x3 . \x4 . Cons
                                 x3 x4 in
    foldr f0 xs ys

ith :: <p :: Int -> a -> Bool> . xs:{List {1**a||0} <p>||0} -> i:{Int|0 <= _v && _v < len xs|0} -> {1**a|p i _v|0}
ith = \xs . \i . 
    match xs with
      Nil -> error
      Cons x3 x4 -> 
        if 0 == i
          then x3
          else ith x4 (dec i)

elemIndex :: <p :: Int -> a -> Bool> . x:{1**a||0} -> xs:{List {1**a||0} <p>|x in elems _v|0} -> {Int|p _v x|0}
elemIndex = \x . \xs . 
    match xs with
      Nil -> error
      Cons x3 x4 -> 
        if x3 == x
          then zero
          else inc (elemIndex x x4)

snoc :: <p :: a -> a -> Bool> . x:{1**a||0} -> xs:{List {1**a|p _v x|0} <p>||0} -> {List {1**a||0} <p>|len _v == len xs + 1 && elems _v == elems xs + [x]|0}
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons x5 x6 -> Cons x5 (snoc x
                               x6)

reverse :: <p :: a -> a -> Bool> . xs:{List {1**a||0} <p>||0} -> {List {1**a||0} <p _1 _0>|len _v == len xs && elems _v == elems xs|0}
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> snoc x3 (reverse
                             x4)

insert :: x:{1**a||0} -> xs:{UList {1**a||0}||0} -> {UList {1**a||0}|elems _v == elems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons x5 x6 -> 
        if x5 == x
          then xs
          else Cons x5 (insert x x6)

delete :: x:{1**a||0} -> xs:{UList {1**a||0}||0} -> {UList {1**a||0}|elems _v == elems xs - [x]|0}
delete = \x . \xs . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        if x3 == x
          then x4
          else Cons x3 (delete x x4)

range :: size:{Nat||0} -> lo:{Int||0} -> {UList {Int|lo <= _v && _v <= lo + size|0}|len _v == size|0}
range = \size . \lo . 
    if size <= 0
      then Nil
      else Cons lo (range (dec size)
                      (inc lo))

elem :: x:{1**a||0} -> xs:{List {1**a||0}||0} -> {Bool|_v == (x in elems xs)|0}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x3 x4 -> 
        if x3 == x
          then true
          else elem x x4

nub' :: xs:{List {1**a||0}||0} -> acc:{UList {1**a||0}||0} -> {UList {1**a||0}|elems _v == elems acc + elems xs|0}
nub' = \xs . \acc . 
    match xs with
      Nil -> acc
      Cons x3 x4 -> 
        if elem x3 acc
          then nub' x4 acc
          else 
            if elem x3 x4
              then nub' x4 acc
              else 
                match acc with
                  Nil -> Cons x3 (nub' x4 Nil)
                  Cons x37 x38 -> Cons x3 (nub' x4
                                             acc)

nub :: xs:{List {1**a||0}||0} -> {UList {1**a||0}|elems _v == elems xs|0}
nub = \xs . nub' xs Nil

compress :: xs:{List {1**a||0}||0} -> {CList {1**a||0}|elems _v == elems xs|0}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> 
      match compress x4 with
        Nil -> Cons x3 Nil
        Cons x11 x12 -> 
          if x3 == x11
            then compress x4
            else Cons x3 (Cons x11 x12)

insert :: x:{1**a||0} -> xs:{IList {1**a||0}||0} -> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (insert x5 x6)

insertSort :: xs:{List {1**a||0}||0} -> {IList {1**a||0}|ielems _v == elems xs|0}
insertSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> insert x3
                    (insertSort x4)

sort :: xs:{List {1**a||0}||0} -> {IncList {1**a||0}|elems _v == elems xs && len _v == len xs|0}
sort = \xs . 
  let f0 = \x2 . \x3 . \x4 . 
          match x4 with
            Nil -> Cons x3 Nil
            Cons x13 x14 -> 
              if x3 <= x13
                then Cons x3 (Cons x13 x14)
                else Cons x13 (f0 x14 x3 x14) in
  foldr f0 Nil xs

split :: xs:{List {1**a||0}||0} -> {Pair {List {1**a||0}|abs (len xs - len _v * 2) <= 1|0} {List {1**a||0}||0}|len xs == len (fst _v) + len (snd _v) && elems xs == elems (fst _v) + elems (snd _v)|0}
split = \xs . 
  match xs with
    Nil -> Pair Nil xs
    Cons x5 x6 -> 
      match x6 with
        Nil -> Pair Nil xs
        Cons x12 x13 -> 
          match split x13 with
            Pair x18 x19 -> Pair (Cons x12
                                    x18) (Cons x5 x19)

merge :: xs:{IList {1**a||0}||0} -> ys:{IList {1**a||0}||0} -> {IList {1**a||0}|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys|0}
merge = \xs . \ys . 
    match ys with
      INil -> xs
      ICons x4 x5 -> 
        match xs with
          INil -> ys
          ICons x8 x9 -> 
            if x4 <= x8
              then ICons x4 (merge (ICons x8
                                      x9) x5)
              else ICons x8 (merge x9 (ICons
                                         x4 x5))

mergeSort :: xs:{List {1**a||0}||0} -> {IList {1**a||0}|ilen _v == len xs && ielems _v == elems xs|0}
mergeSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match x4 with
        Nil -> ICons x3 INil
        Cons x10 x11 -> 
          match split xs with
            Pair x16 x17 -> merge (mergeSort
                                     x16) (mergeSort x17)

partition :: p:{1**a||0} -> xs:{List {1**a||0}||0} -> {Pair {List {1**a|_v <= p|0}||0} {List {1**a|_v > p|0}||0}|len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs|0}
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons x5 x6 -> 
        match partition p x6 with
          Pair x12 x13 -> 
            if x5 <= p
              then Pair (Cons x5 x12) x13
              else Pair x12 (Cons x5 x13)

pivotAppend :: p:{1**a||0} -> xs:{IList {1**a|_v <= p|0}||0} -> ys:{IList {1**a|_v > p|0}||0} -> {IList {1**a||0}|ilen _v == (ilen xs + ilen ys) + 1 && ielems _v == (ielems xs + ielems ys) + [p]|0}
pivotAppend = \p . \xs . \ys . 
      match xs with
        INil -> ICons p ys
        ICons x5 x6 -> ICons x5
                         (pivotAppend p x6 ys)

quickSort :: xs:{List {1**a||0}||0} -> {IList {1**a||0}|ilen _v == len xs && ielems _v == elems xs|0}
quickSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match partition x3 x4 with
        Pair x10 x11 -> pivotAppend x3
                          (quickSort x10) (quickSort x11)

elem :: x:{1**a||0} -> t:{Tree {1**a||0}||0} -> {Bool|_v == (x in telems t)|0}
elem = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if x4 == x
          then not false
          else or (elem x x5) (elem x x6)

flatten :: t:{Tree {1**a||0}||0} -> {List {1**a||0}|len _v == size t|0}
flatten = \t . 
  match t with
    Empty -> Nil
    Node x4 x5 x6 -> Cons x4 (append
                                (flatten x5) (flatten x6))

member :: x:{1**a||0} -> t:{BST {1**a||0}||0} -> {Bool|_v == (x in telems t)|0}
member = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if (x <= x4) && (x4 <= x)
          then true
          else 
            if x <= x4
              then member x x5
              else member x x6

insert :: x:{1**a||0} -> t:{BST {1**a||0}||0} -> {BST {1**a||0}|telems _v == telems t + [x]|0}
insert = \x . \t . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x x9)
              else Node x7 (insert x x8) x9

extractMin :: t:{BST {1**a||0}|size _v > 0|0} -> {MinPair {1**a||0}|telems t == [min _v] + telems (rest _v)|0}
extractMin = \t . 
  match t with
    Empty -> error
    Node x4 x5 x6 -> 
      match x5 with
        Empty -> MinPair x4 x6
        Node x13 x14 x15 -> 
          match extractMin x5 with
            MinPair x20 x21 -> MinPair x20
                                 (Node x4 x21 x6)

delete :: t:{BST {1**a||0}||0} -> x:{1**a||0} -> {BST {1**a||0}|telems _v == telems t - [x]|0}
delete = \t . \x . 
    match t with
      Empty -> Empty
      Node x4 x5 x6 -> 
        if (x4 != x) && (x4 <= x)
          then Node x4 x5 (delete x6 x)
          else 
            if x4 != x
              then Node x4 (delete x5 x) x6
              else 
                match x5 with
                  Empty -> x6
                  Node x21 x22 x23 -> Node x21 x22
                                        (delete (Node x x23 x6) x4)

insert :: x:{1**a||0} -> t:{BST {1**a||0}||0} -> {BST {1**a||0}|telems _v == telems t + [x]|0}
insert = \x . \t . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x x9)
              else Node x7 (insert x x8) x9

toBST :: xs:{List {1**a||0}||0} -> {BST {1**a||0}|telems _v == elems xs|0}
toBST = \xs . 
  match xs with
    Nil -> Empty
    Cons x3 x4 -> insert x3 (toBST
                               x4)

pivotAppend :: p:{1**a||0} -> xs:{IList {1**a|_v < p|0}||0} -> ys:{IList {1**a|_v > p|0}||0} -> {IList {1**a||0}|ilen _v == (ilen xs + ilen ys) + 1 && ielems _v == (ielems xs + ielems ys) + [p]|0}
pivotAppend = \p . \xs . \ys . 
      match xs with
        INil -> ICons p ys
        ICons x5 x6 -> ICons x5
                         (pivotAppend p x6 ys)

flatten :: t:{BST {1**a||0}||0} -> {IList {1**a||0}|ielems _v == telems t|0}
flatten = \t . 
  match t with
    Empty -> INil
    Node x4 x5 x6 -> pivotAppend x4
                       (flatten x5) (flatten x6)

sort :: xs:{List {1**a||0}||0} -> {IList {1**a||0}|ielems _v == elems xs|0}
sort = \xs . flatten (toBST xs)

member :: x:{1**a||0} -> t:{Heap {1**a||0}||0} -> {Bool|_v == (x in elems t)|0}
member = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if (x4 != x) && (x <= x4)
          then false
          else 
            if x <= x4
              then not false
              else or (member x x5) (member x
                                       x6)

insert :: t:{Heap {1**a||0}||0} -> x:{1**a||0} -> {Heap {1**a||0}|elems _v == elems t + [x]|0}
insert = \t . \x . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x9 x)
              else Node x x8 (insert x9 x7)

transform :: x:{AST||0} -> {PAST|result2 _v == result x|0}
transform = \x . 
  match x with
    Zero -> IntNode zero
    One -> IntNode one
    Two -> IntNode two
    PlusNode x7 x8 -> OpNode zero
                        (transform x7) (transform x8)
    MinusNode x16 x17 -> OpNode one
                           (transform x16) (transform x17)
    ProductNode x25 x26 -> OpNode
                             two (transform x25) (transform
                                                    x26)

mkAddressBook :: adds:{List {Address||0}||0} -> {AddressBook|size _v == len adds|0}
mkAddressBook = \adds . 
  match adds with
    Nil -> AddressBook Nil Nil
    Cons x5 x6 -> 
      match mkAddressBook x6 with
        AddressBook x11 x12 -> 
          if getPriv x5
            then AddressBook x11 (Cons x5
                                    x12)
            else AddressBook (Cons x5 x11)
                   x12

mergeAddressBooks :: a:{AddressBook||0} -> b:{AddressBook||0} -> {AddressBook|size _v == size a + size b|0}
mergeAddressBooks = \a . \b . 
    match a with
      AddressBook x3 x4 -> 
        match b with
          AddressBook x8 x9 -> AddressBook
                                 (append x3 x8) (append x4 x9)

replicate :: n:{Nat|_v <= 2|0} -> x:{1**a||0} -> {List {1**a||0}|((n == 0 ==> _v == (Nil)) && (n == 1 ==> _v == (Cons x (Nil)))) && (n == 2 ==> _v == (Cons x ((Cons x (Nil)))))|0}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

max2 :: x:{Int||0} -> y:{Int||0} -> {Int|_v >= x && _v >= y|0}
max2 = \x . \y . 
    if x >= y
      then x
      else y

max3 :: x:{Int||0} -> y:{Int||0} -> z:{Int||0} -> {Int|(_v >= x && _v >= y) && _v >= z|0}
max3 = \x . \y . \z . 
      if (x >= y) && (x >= z)
        then x
        else 
          if y >= z
            then y
            else z

max4 :: w:{Int||0} -> x:{Int||0} -> y:{Int||0} -> z:{Int||0} -> {Int|((_v >= w && _v >= x) && _v >= y) && _v >= z|0}
max4 = \w . \x . \y . \z . 
        if ((w >= x) && (w >= y)) && (w
                                        >= z)
          then w
          else 
            if (x >= y) && (x >= z)
              then x
              else 
                if y >= z
                  then y
                  else z

max5 :: v:{Int||0} -> w:{Int||0} -> x:{Int||0} -> y:{Int||0} -> z:{Int||0} -> {Int|(((_v >= v && _v >= w) && _v >= x) && _v >= y) && _v >= z|0}
max5 = \v . \w . \x . \y . \z . 
          if (((v >= w) && (v >= x)) && (v
                                           >= y)) && (v >= z)
            then v
            else 
              if ((w >= x) && (w >= y)) && (w
                                              >= z)
                then w
                else 
                  if (x >= y) && (x >= z)
                    then x
                    else 
                      if y >= z
                        then y
                        else z

findIdx :: arr:{Array {1**a||0}||0} -> k:{1**a||0} -> {Int|((k < at0 arr ==> _v == 0) && (k > at1 arr ==> _v == 2)) && (k > at0 arr && k < at1 arr ==> _v == 1)|0}
findIdx = \arr . \k . 
    match arr with
      Array2 x3 x4 -> 
        if k < x4
          then n0
          else n2

findIdx :: arr:{Array {1**a||0}||0} -> k:{1**a||0} -> {Int|(((k < at0 arr ==> _v == 0) && (k > at2 arr ==> _v == 3)) && (k > at0 arr && k < at1 arr ==> _v == 1)) && (k > at1 arr && k < at2 arr ==> _v == 2)|0}
findIdx = \arr . \k . 
    match arr with
      Array3 x4 x5 x6 -> 
        if k < x6
          then n0
          else n3

findIdx :: arr:{Array {1**a||0}||0} -> k:{1**a||0} -> {Int|((((k < at0 arr ==> _v == 0) && (k > at3 arr ==> _v == 4)) && (k > at0 arr && k < at1 arr ==> _v == 1)) && (k > at1 arr && k < at2 arr ==> _v == 2)) && (k > at2 arr && k < at3 arr ==> _v == 3)|0}
findIdx = \arr . \k . 
    match arr with
      Array4 x5 x6 x7 x8 -> 
        if k < x8
          then n0
          else n4

findIdx :: arr:{Array {1**a||0}||0} -> k:{1**a||0} -> {Int|(((((k < at0 arr ==> _v == 0) && (k > at4 arr ==> _v == 5)) && (k > at0 arr && k < at1 arr ==> _v == 1)) && (k > at1 arr && k < at2 arr ==> _v == 2)) && (k > at2 arr && k < at3 arr ==> _v == 3)) && (k > at3 arr && k < at4 arr ==> _v == 4)|0}
findIdx = \arr . \k . 
    match arr with
      Array5 x6 x7 x8 x9 x10 -> 
        if k < x10
          then n0
          else n5

findIdx :: arr:{Array {1**a||0}||0} -> k:{1**a||0} -> {Int|((((((k < at0 arr ==> _v == 0) && (k > at5 arr ==> _v == 6)) && (k > at0 arr && k < at1 arr ==> _v == 1)) && (k > at1 arr && k < at2 arr ==> _v == 2)) && (k > at2 arr && k < at3 arr ==> _v == 3)) && (k > at3 arr && k < at4 arr ==> _v == 4)) && (k > at4 arr && k < at5 arr ==> _v == 5)|0}
findIdx = \arr . \k . 
    match arr with
      Array6 x7 x8 x9 x10 x11 x12 -> 
        if k < x12
          then n0
          else n6

balanceL :: y:{1**a||0} -> isR:{Bool||0} -> l:{RBT {1**a|_v < y|0}|size _v > 0 && (isR ==> isOk _v)|0} -> r:{RBT {1**a|_v > y|0}|(isOk _v && (isRed _v ==> !isR)) && bHeight _v == bHeight l|0} -> {RBT {1**a||0}|((elems _v == ([y] + elems l) + elems r && bHeight _v == bHeight r + bHt isR) && size _v == (1 + size l) + size r) && (isR || isOk _v)|0}
balanceL = \y . \isR . \l . \r .
        
        match l with
          Empty -> error
          Node x5 x6 x7 x8 -> 
            if isR && x6
              then Bad y x6 l r
              else Node y isR l r
          Bad x57 x58 x59 x60 -> 
            if x58
              then 
                match x59 with
                  Empty -> error
                  Node x65 x66 x67 x68 -> Node x57
                                            x58 (Node x65 isR x67 x68) (Node
                                                                          y isR
                                                                          x60 r)
                  Bad x85 x86 x87 x88 -> error
              else 
                match x60 with
                  Empty -> error
                  Node x93 x94 x95 x96 -> Node x93
                                            x94 (Node x57 x58 x59 x95) (Node
                                                                          y x58
                                                                          x96 r)
                  Bad x113 x114 x115 x116 -> error

balanceR :: x:{1**a||0} -> isR:{Bool||0} -> l:{RBT {1**a|_v < x|0}|isOk _v && (isRed _v ==> !isR)|0} -> r:{RBT {1**a|_v > x|0}|(size _v > 0 && (isR ==> isOk _v)) && bHeight _v == bHeight l|0} -> {RBT {1**a||0}|((elems _v == ([x] + elems l) + elems r && bHeight _v == bHeight l + bHt isR) && size _v == (1 + size l) + size r) && (isR || isOk _v)|0}
balanceR = \x . \isR . \l . \r .
        
        match r with
          Empty -> error
          Node x5 x6 x7 x8 -> 
            if isR && x6
              then 
                match l with
                  Empty -> Bad x5 isR (Node x x6
                                         Empty x7) x8
                  Node x21 x22 x23 x24 -> Bad x
                                            x22 l r
                  Bad x33 x34 x35 x36 -> error
              else Node x isR l r
          Bad x69 x70 x71 x72 -> 
            if x70
              then 
                match x71 with
                  Empty -> error
                  Node x77 x78 x79 x80 -> Node x77
                                            x70 (Node x isR l x79) (Node x69
                                                                      isR x80
                                                                      x72)
                  Bad x97 x98 x99 x100 -> error
              else 
                match x72 with
                  Empty -> error
                  Node x105 x106 x107 x108 -> Node
                                                x69 x106 (Node x x70 l x71)
                                                (Node x105 x70 x107 x108)
                  Bad x125 x126 x127 x128 -> error

ins :: x:{1**a||0} -> t:{RBT {1**a||0}|isOk _v|0} -> {RBT {1**a||0}|((((elems _v == [x] + elems t && bHeight _v == bHeight t) && size _v > 0) && size t <= size _v) && size _v <= size t + 1) && (isOk _v || isRed t)|0}
ins = \x . \t . 
    match t with
      Empty -> Node x red Empty Empty
      Node x9 x10 x11 x12 -> 
        if (x <= x9) && (x9 <= x)
          then t
          else 
            if x9 <= x
              then balanceR x9 x10 x11 (ins x
                                          x12)
              else 
                if x10 != True
                  then balanceL x9 black (ins x
                                            x11) x12
                  else balanceL x9 red (ins x x11)
                         x12
      Bad x41 x42 x43 x44 -> error

mkBlack :: t:{RBT {1**a||0}||0} -> {RBT {1**a||0}|isOk _v && elems _v == elems t|0}
mkBlack = \t . 
  match t with
    Empty -> Empty
    Node x5 x6 x7 x8 -> t
    Bad x13 x14 x15 x16 -> Node x13
                             black x15 x16

insert :: x:{1**a||0} -> t:{RBT {1**a||0}|isOk _v|0} -> {RBT {1**a||0}|isOk _v && elems _v == elems t + [x]|0}
insert = \x . \t . mkBlack (ins
                              x t)

balL0 :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}|balFac _v == 0|0} -> r:{AVL {1**a|_v > x|0}|realHeight l - realHeight _v == 2|0} -> {AVL {1**a||0}|realHeight _v == 1 + realHeight l && elems _v == ([x] + elems l) + elems r|0}
balL0 = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x5 x6 x7 x8 -> Node x5 x6
                              (Node x x7 r x8) (inc x8)

balLL :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}|balFac _v > 0|0} -> r:{AVL {1**a|_v > x|0}|realHeight l - realHeight _v == 2|0} -> {AVL {1**a||0}|realHeight _v == realHeight l && elems _v == ([x] + elems l) + elems r|0}
balLL = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x5 x6 x7 x8 -> 
          match x6 with
            Leaf -> error
            Node x13 x14 x15 x16 -> Node x5
                                      x6 (Node x x7 r x16) x8

balLR :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}|balFac _v < 0|0} -> r:{AVL {1**a|_v > x|0}|realHeight l - realHeight _v == 2|0} -> {AVL {1**a||0}|realHeight _v == realHeight l && elems _v == ([x] + elems l) + elems r|0}
balLR = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x5 x6 x7 x8 -> 
          match x7 with
            Leaf -> error
            Node x13 x14 x15 x16 -> Node x13
                                      (Node x5 x6 x14 x16) (Node x x15
                                                              r x16) x8

balR0 :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|realHeight _v - realHeight l == 2 && balFac _v == 0|0} -> {AVL {1**a||0}|realHeight _v == 1 + realHeight r && elems _v == ([x] + elems l) + elems r|0}
balR0 = \x . \l . \r . 
      match r with
        Leaf -> error
        Node x5 x6 x7 x8 -> Node x5
                              (Node x l x6 x8) x7 (inc x8)

balRL :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|realHeight _v - realHeight l == 2 && balFac _v > 0|0} -> {AVL {1**a||0}|realHeight _v == realHeight r && elems _v == ([x] + elems l) + elems r|0}
balRL = \x . \l . \r . 
      match r with
        Leaf -> error
        Node x5 x6 x7 x8 -> 
          match x6 with
            Leaf -> error
            Node x13 x14 x15 x16 -> Node x13
                                      (Node x l x14 x16) (Node x5 x15
                                                            x7 x16) x8

balRR :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|realHeight _v - realHeight l == 2 && balFac _v < 0|0} -> {AVL {1**a||0}|realHeight _v == realHeight r && elems _v == ([x] + elems l) + elems r|0}
balRR = \x . \l . \r . 
      match r with
        Leaf -> error
        Node x5 x6 x7 x8 -> 
          match x7 with
            Leaf -> error
            Node x13 x14 x15 x16 -> Node x5
                                      (Node x l x6 x16) x7 x8

balance :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|abs (realHeight l - realHeight _v) <= 2|0} -> {AVL {1**a||0}|(balHt l r _v && bigHt l r _v) && elems _v == ([x] + elems l) + elems r|0}
balance = \x . \l . \r . 
      if (isSkewed l r) &&
           (isLeftHeavy l)
        then balLL x l r
        else 
          if (isSkewed l r) &&
               (isRightHeavy l)
            then balLR x l r
            else 
              if isSkewed l r
                then balL0 x l r
                else 
                  if (isSkewed r l) &&
                       (isLeftHeavy r)
                    then balRL x l r
                    else 
                      if (isSkewed r l) &&
                           (isRightHeavy r)
                        then balRR x l r
                        else 
                          if isSkewed r l
                            then balR0 x l r
                            else Node x l r (nodeHeight l r)

insert :: y:{1**a||0} -> t:{AVL {1**a||0}||0} -> {AVL {1**a||0}|(realHeight t <= realHeight _v && realHeight _v <= realHeight t + 1) && elems _v == [y] + elems t|0}
insert = \y . \t . 
    match t with
      Leaf -> balance y Leaf Leaf
      Node x8 x9 x10 x11 -> 
        if x8 < y
          then balance x8 x9 (insert y
                                x10)
          else 
            if y < x8
              then balance x8 (insert y x9)
                     x10
              else t

extractMin :: t:{AVL {1**a||0}||0} -> {MinPair {1**a||0}|elems t == melems _v && eqOrOneLess (mheight _v) (realHeight t)|0}
extractMin = \t . 
  match t with
    Leaf -> Nothing
    Node x5 x6 x7 x8 -> 
      match extractMin x6 with
        Nothing -> MinPair x5 x7
        MinPair x15 x16 -> MinPair x15
                             (balance x5 x16 x7)

merge :: x:{1**a||0} -> l:{AVL {1**a|_v < x|0}||0} -> r:{AVL {1**a|_v > x|0}|isBal l _v 1|0} -> {AVL {1**a||0}|bigHt l r _v && elems _v == elems l + elems r|0}
merge = \x . \l . \r . 
      match extractMin r with
        Nothing -> l
        MinPair x5 x6 -> balance x5 l x6

delete :: y:{1**a||0} -> t:{AVL {1**a||0}||0} -> {AVL {1**a||0}|eqOrOneLess (realHeight _v) (realHeight t) && elems t - [y] == elems _v|0}
delete = \y . \t . 
    match t with
      Leaf -> Leaf
      Node x5 x6 x7 x8 -> 
        if x5 < y
          then balance x5 x6 (delete y x7)
          else 
            if y < x5
              then balance x5 (delete y x6) x7
              else merge x5 x6 x7

