data List a where
  Nil :: List a
  Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs

inline min x y = if x <= y then x else y  

union :: xs: List a -> ys: {List a | | min (len xs) (len _v) } -[1]-> {List a | elems _v == elems xs + elems ys}  
union = \xs . \ys .
  match xs with
    Nil -> ys
    Cons x xxs -> 
      match ys with
        Nil -> xs
        Cons y yys -> ?? -- Cons x (Cons y (union xxs yys))
        