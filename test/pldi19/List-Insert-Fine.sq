data IList a  where 
  INil :: IList a 
  ICons :: x: a -> xs: IList {a | x <= _v } -> IList a 
  
termination measure ilen :: IList a -> {Int | _v >= 0} where
  INil -> 0
  ICons x xs -> 1 + ilen xs  

measure ielems :: IList a -> Set a where
  INil -> []
  ICons x xs -> [x] + ielems xs

measure numgt :: x: a -> IList a -> {Int | _v >= 0} where 
  INil -> 0
  ICons y ys -> 
    if x >= y 
      then 1 + numgt x ys
      else numgt x ys
	
qualifier { x < y }

insert :: x: a -> xs: {IList a| |numgt x _v} -[1]-> {IList a | ielems _v == ielems xs + [x]}
insert = ?? {- \x. \xs. 
  match xs with
    INil -> ICons x INil
    ICons y ys -> 
      if x < y 
        then ICons x (ICons y ys)
        else ICons y (insert x ys)
-}
{-      if x > y
        then ICons y (insert x ys) 
        else ICons x (ICons y ys) 
-}
